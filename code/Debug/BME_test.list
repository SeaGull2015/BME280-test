
BME_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006674  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  08006818  08006818  00016818  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c1c  08006c1c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08006c1c  08006c1c  00016c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c24  08006c24  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c24  08006c24  00016c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c28  08006c28  00016c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006c2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  200001dc  08006e08  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  08006e08  000202cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a105  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000183d  00000000  00000000  0002a311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000938  00000000  00000000  0002bb50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008a0  00000000  00000000  0002c488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001666f  00000000  00000000  0002cd28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a364  00000000  00000000  00043397  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088520  00000000  00000000  0004d6fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d5c1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036a4  00000000  00000000  000d5c6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080067fc 	.word	0x080067fc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	080067fc 	.word	0x080067fc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_ldivmod>:
 8000bb8:	b97b      	cbnz	r3, 8000bda <__aeabi_ldivmod+0x22>
 8000bba:	b972      	cbnz	r2, 8000bda <__aeabi_ldivmod+0x22>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bfbe      	ittt	lt
 8000bc0:	2000      	movlt	r0, #0
 8000bc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000bc6:	e006      	blt.n	8000bd6 <__aeabi_ldivmod+0x1e>
 8000bc8:	bf08      	it	eq
 8000bca:	2800      	cmpeq	r0, #0
 8000bcc:	bf1c      	itt	ne
 8000bce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000bd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd6:	f000 b9bf 	b.w	8000f58 <__aeabi_idiv0>
 8000bda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be2:	2900      	cmp	r1, #0
 8000be4:	db09      	blt.n	8000bfa <__aeabi_ldivmod+0x42>
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	db1a      	blt.n	8000c20 <__aeabi_ldivmod+0x68>
 8000bea:	f000 f84d 	bl	8000c88 <__udivmoddi4>
 8000bee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf6:	b004      	add	sp, #16
 8000bf8:	4770      	bx	lr
 8000bfa:	4240      	negs	r0, r0
 8000bfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	db1b      	blt.n	8000c3c <__aeabi_ldivmod+0x84>
 8000c04:	f000 f840 	bl	8000c88 <__udivmoddi4>
 8000c08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c10:	b004      	add	sp, #16
 8000c12:	4240      	negs	r0, r0
 8000c14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c18:	4252      	negs	r2, r2
 8000c1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c1e:	4770      	bx	lr
 8000c20:	4252      	negs	r2, r2
 8000c22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c26:	f000 f82f 	bl	8000c88 <__udivmoddi4>
 8000c2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c32:	b004      	add	sp, #16
 8000c34:	4240      	negs	r0, r0
 8000c36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3a:	4770      	bx	lr
 8000c3c:	4252      	negs	r2, r2
 8000c3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c42:	f000 f821 	bl	8000c88 <__udivmoddi4>
 8000c46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c4e:	b004      	add	sp, #16
 8000c50:	4252      	negs	r2, r2
 8000c52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]

	HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f70:	68b9      	ldr	r1, [r7, #8]
 8000f72:	4804      	ldr	r0, [pc, #16]	; (8000f84 <_write+0x28>)
 8000f74:	f002 faf9 	bl	800356a <HAL_UART_Transmit>
	return len;
 8000f78:	687b      	ldr	r3, [r7, #4]
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3710      	adds	r7, #16
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000250 	.word	0x20000250

08000f88 <BME_ShiftRegs>:
uint8_t buf;
uint8_t BME_regD;
void BME_ShiftRegs(){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af02      	add	r7, sp, #8
			HAL_GPIO_WritePin(BME_nOE_GPIO_Port, BME_nOE_Pin, 1); //shiftreg 2 HiZ
 8000f8e:	2201      	movs	r2, #1
 8000f90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f94:	480f      	ldr	r0, [pc, #60]	; (8000fd4 <BME_ShiftRegs+0x4c>)
 8000f96:	f001 fb33 	bl	8002600 <HAL_GPIO_WritePin>
			uint8_t tbuf;
			HAL_GPIO_WritePin(BME_LATCH_GPIO_Port, BME_LATCH_Pin, 0);  //отключаем защёлку
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2102      	movs	r1, #2
 8000f9e:	480d      	ldr	r0, [pc, #52]	; (8000fd4 <BME_ShiftRegs+0x4c>)
 8000fa0:	f001 fb2e 	bl	8002600 <HAL_GPIO_WritePin>

			HAL_SPI_TransmitReceive(&hspi2, &BME_regD, &tbuf, 1, 5000);  //отправляем данные для сдвигового регистра со светодиодами
 8000fa4:	1dfa      	adds	r2, r7, #7
 8000fa6:	f241 3388 	movw	r3, #5000	; 0x1388
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	2301      	movs	r3, #1
 8000fae:	490a      	ldr	r1, [pc, #40]	; (8000fd8 <BME_ShiftRegs+0x50>)
 8000fb0:	480a      	ldr	r0, [pc, #40]	; (8000fdc <BME_ShiftRegs+0x54>)
 8000fb2:	f002 f820 	bl	8002ff6 <HAL_SPI_TransmitReceive>

			HAL_GPIO_WritePin(BME_LATCH_GPIO_Port, BME_LATCH_Pin, 1);  //включаем защёлку
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	2102      	movs	r1, #2
 8000fba:	4806      	ldr	r0, [pc, #24]	; (8000fd4 <BME_ShiftRegs+0x4c>)
 8000fbc:	f001 fb20 	bl	8002600 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BME_nOE_GPIO_Port, BME_nOE_Pin, 0);  //shitfreg вывести из HiZ
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fc6:	4803      	ldr	r0, [pc, #12]	; (8000fd4 <BME_ShiftRegs+0x4c>)
 8000fc8:	f001 fb1a 	bl	8002600 <HAL_GPIO_WritePin>
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40020800 	.word	0x40020800
 8000fd8:	200002b1 	.word	0x200002b1
 8000fdc:	200001f8 	.word	0x200001f8

08000fe0 <BME_cs>:

void BME_cs(uint8_t flag){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
			/*
			 * Данная функция нужна для управления ножкой CS BME280
			 * Если на вход подаётся 0, то на ножке появляется ноль, если другое число, то единица
			 */
		if(flag==0)
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d107      	bne.n	8001000 <BME_cs+0x20>
			{
			BME_regD &=~(1<<2); // BME CS is OUT2 on shiftreg
 8000ff0:	4b0a      	ldr	r3, [pc, #40]	; (800101c <BME_cs+0x3c>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	f023 0304 	bic.w	r3, r3, #4
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	4b08      	ldr	r3, [pc, #32]	; (800101c <BME_cs+0x3c>)
 8000ffc:	701a      	strb	r2, [r3, #0]
 8000ffe:	e006      	b.n	800100e <BME_cs+0x2e>
			}
		else
			{
			BME_regD |= 1<<2;
 8001000:	4b06      	ldr	r3, [pc, #24]	; (800101c <BME_cs+0x3c>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	f043 0304 	orr.w	r3, r3, #4
 8001008:	b2da      	uxtb	r2, r3
 800100a:	4b04      	ldr	r3, [pc, #16]	; (800101c <BME_cs+0x3c>)
 800100c:	701a      	strb	r2, [r3, #0]
			}
		BME_ShiftRegs();
 800100e:	f7ff ffbb 	bl	8000f88 <BME_ShiftRegs>
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	200002b1 	.word	0x200002b1

08001020 <BME_write_reg>:
/* About spi write in BME:
 * In SPI mode, only 7 bits of the register addresses are used; the MSB of register address is not used and replaced by a read/write bit (RW = '0' for write and RW = '1' for read). Example: address OxF7 is accessed by using SPI register address 0x77. For write access, the byte 0x77 is transferred, for read access, the byte OxF7 is transferred.
 * Writing is done by lowering CSB and sending pairs control bytes and register data. The control bytes consist of the SPI register address (= full register address without bit 7) and the write command (bit7 = RW = '0'). Several pairs can be written without raising CSB. The transaction is ended by a raising CSB. The SPI write protocol is depicted in Figure 12.
 */

void BME_write_reg(uint8_t reg, uint8_t val){
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af02      	add	r7, sp, #8
 8001026:	4603      	mov	r3, r0
 8001028:	460a      	mov	r2, r1
 800102a:	71fb      	strb	r3, [r7, #7]
 800102c:	4613      	mov	r3, r2
 800102e:	71bb      	strb	r3, [r7, #6]
#warning this is nrf copypasta, not sure if it will work
#warning check if uint16_t is needed
	BME_cs(0);
 8001030:	2000      	movs	r0, #0
 8001032:	f7ff ffd5 	bl	8000fe0 <BME_cs>

	reg &= BME_WRITE_MASK; // our write mask is ~0x80, e.g. we send 0x77 to access reg 0xF7
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800103c:	b2db      	uxtb	r3, r3
 800103e:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&hspi2, &reg, &buf, sizeof(reg), 10000);
 8001040:	1df9      	adds	r1, r7, #7
 8001042:	f242 7310 	movw	r3, #10000	; 0x2710
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	2301      	movs	r3, #1
 800104a:	4a0a      	ldr	r2, [pc, #40]	; (8001074 <BME_write_reg+0x54>)
 800104c:	480a      	ldr	r0, [pc, #40]	; (8001078 <BME_write_reg+0x58>)
 800104e:	f001 ffd2 	bl	8002ff6 <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(&hspi2, &val, &buf, sizeof(val), 10000);
 8001052:	1db9      	adds	r1, r7, #6
 8001054:	f242 7310 	movw	r3, #10000	; 0x2710
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	2301      	movs	r3, #1
 800105c:	4a05      	ldr	r2, [pc, #20]	; (8001074 <BME_write_reg+0x54>)
 800105e:	4806      	ldr	r0, [pc, #24]	; (8001078 <BME_write_reg+0x58>)
 8001060:	f001 ffc9 	bl	8002ff6 <HAL_SPI_TransmitReceive>

	BME_cs(1);
 8001064:	2001      	movs	r0, #1
 8001066:	f7ff ffbb 	bl	8000fe0 <BME_cs>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	200002b0 	.word	0x200002b0
 8001078:	200001f8 	.word	0x200001f8

0800107c <BME_read_Data8>:
/* About spi read in BME:
 * Reading is done by lowering CSB and first sending one control byte. The control bytes consist of the SPI register address (= full register address without bit 7) and the read command (bit 7 = RW = '1'). After writing the control byte, data is sent out of the SDO pin (SDI in 3-wire mode); the register address is automatically incremented. The SPI read protocol is depicted in Figure 13.
 * No mask is required for read, we send the reg through SPI
 */
uint8_t BME_read_Data8(uint8_t reg){
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af02      	add	r7, sp, #8
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
#warning this is nrf copypasta, not sure if it will work
	uint8_t rx_data;
	BME_cs(0);
 8001086:	2000      	movs	r0, #0
 8001088:	f7ff ffaa 	bl	8000fe0 <BME_cs>

	HAL_SPI_TransmitReceive(&hspi2, &reg, &rx_data, 1, 10000);
 800108c:	f107 020f 	add.w	r2, r7, #15
 8001090:	1df9      	adds	r1, r7, #7
 8001092:	f242 7310 	movw	r3, #10000	; 0x2710
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	2301      	movs	r3, #1
 800109a:	4805      	ldr	r0, [pc, #20]	; (80010b0 <BME_read_Data8+0x34>)
 800109c:	f001 ffab 	bl	8002ff6 <HAL_SPI_TransmitReceive>

	BME_cs(1);
 80010a0:	2001      	movs	r0, #1
 80010a2:	f7ff ff9d 	bl	8000fe0 <BME_cs>

	return rx_data;
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	200001f8 	.word	0x200001f8

080010b4 <BME_read_DataU16>:

void BME_read_DataU16(uint8_t reg, uint16_t *rx_data){ // unsigned
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af02      	add	r7, sp, #8
 80010ba:	4603      	mov	r3, r0
 80010bc:	6039      	str	r1, [r7, #0]
 80010be:	71fb      	strb	r3, [r7, #7]
#warning this is nrf copypasta, not sure if it will work
	//uint16_t rx_data;
	BME_cs(0);
 80010c0:	2000      	movs	r0, #0
 80010c2:	f7ff ff8d 	bl	8000fe0 <BME_cs>

	HAL_SPI_TransmitReceive(&hspi2, &reg, &rx_data, 2, 10000);
 80010c6:	463a      	mov	r2, r7
 80010c8:	1df9      	adds	r1, r7, #7
 80010ca:	f242 7310 	movw	r3, #10000	; 0x2710
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	2302      	movs	r3, #2
 80010d2:	4805      	ldr	r0, [pc, #20]	; (80010e8 <BME_read_DataU16+0x34>)
 80010d4:	f001 ff8f 	bl	8002ff6 <HAL_SPI_TransmitReceive>

	BME_cs(1);
 80010d8:	2001      	movs	r0, #1
 80010da:	f7ff ff81 	bl	8000fe0 <BME_cs>

	return rx_data;
 80010de:	bf00      	nop
}
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	200001f8 	.word	0x200001f8

080010ec <BME_read_DataS16>:

void BME_read_DataS16(uint8_t reg, int16_t *rx_data){ // signed
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af02      	add	r7, sp, #8
 80010f2:	4603      	mov	r3, r0
 80010f4:	6039      	str	r1, [r7, #0]
 80010f6:	71fb      	strb	r3, [r7, #7]
#warning this is nrf copypasta, not sure if it will work
	//uint16_t rx_data;
	BME_cs(0);
 80010f8:	2000      	movs	r0, #0
 80010fa:	f7ff ff71 	bl	8000fe0 <BME_cs>

	HAL_SPI_TransmitReceive(&hspi2, &reg, &rx_data, 2, 10000);
 80010fe:	463a      	mov	r2, r7
 8001100:	1df9      	adds	r1, r7, #7
 8001102:	f242 7310 	movw	r3, #10000	; 0x2710
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	2302      	movs	r3, #2
 800110a:	4805      	ldr	r0, [pc, #20]	; (8001120 <BME_read_DataS16+0x34>)
 800110c:	f001 ff73 	bl	8002ff6 <HAL_SPI_TransmitReceive>

	BME_cs(1);
 8001110:	2001      	movs	r0, #1
 8001112:	f7ff ff65 	bl	8000fe0 <BME_cs>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	200001f8 	.word	0x200001f8

08001124 <BME_read_DataU24_BE>:
	*(uint32_t *) rx_data &= 0x00FFFFFF; // wtf??? - we clear the first byte.

	BME_cs(1);
}

void BME_read_DataU24_BE(uint8_t reg, uint32_t *rx_data){ // basicly irreversed, cause bme280 should send us reversed data
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af02      	add	r7, sp, #8
 800112a:	4603      	mov	r3, r0
 800112c:	6039      	str	r1, [r7, #0]
 800112e:	71fb      	strb	r3, [r7, #7]
#warning this is nrf copypasta, not sure if it will work
	//uint16_t rx_data; - thrash
	BME_cs(0);
 8001130:	2000      	movs	r0, #0
 8001132:	f7ff ff55 	bl	8000fe0 <BME_cs>

	HAL_SPI_TransmitReceive(&hspi2, &reg, &rx_data, 3, 10000);
 8001136:	463a      	mov	r2, r7
 8001138:	1df9      	adds	r1, r7, #7
 800113a:	f242 7310 	movw	r3, #10000	; 0x2710
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	2303      	movs	r3, #3
 8001142:	480e      	ldr	r0, [pc, #56]	; (800117c <BME_read_DataU24_BE+0x58>)
 8001144:	f001 ff57 	bl	8002ff6 <HAL_SPI_TransmitReceive>

	*(uint32_t *) rx_data = be24toword(*(uint32_t *) rx_data) & 0x00FFFFFF; // wtf??? - we clear the first byte.
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	0c1b      	lsrs	r3, r3, #16
 800114e:	b2da      	uxtb	r2, r3
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001158:	431a      	orrs	r2, r3
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	041b      	lsls	r3, r3, #16
 8001160:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001164:	431a      	orrs	r2, r3
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800116c:	601a      	str	r2, [r3, #0]

	BME_cs(1);
 800116e:	2001      	movs	r0, #1
 8001170:	f7ff ff36 	bl	8000fe0 <BME_cs>
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	200001f8 	.word	0x200001f8

08001180 <BMEReadCalibData>:
	HAL_SPI_TransmitReceive(&hspi2, &reg, &rx_data, 3, 10000);

	BME_cs(1);
}

void BMEReadCalibData(BME280_CalibData *data){
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
	BME_read_DataU16(BME280_REGISTER_DIG_T1, &(data->dig_T1));HAL_Delay(1);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4619      	mov	r1, r3
 800118c:	2088      	movs	r0, #136	; 0x88
 800118e:	f7ff ff91 	bl	80010b4 <BME_read_DataU16>
 8001192:	2001      	movs	r0, #1
 8001194:	f000 ffa6 	bl	80020e4 <HAL_Delay>
	BME_read_DataS16(BME280_REGISTER_DIG_T2, &(data->dig_T2));HAL_Delay(1);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3302      	adds	r3, #2
 800119c:	4619      	mov	r1, r3
 800119e:	208a      	movs	r0, #138	; 0x8a
 80011a0:	f7ff ffa4 	bl	80010ec <BME_read_DataS16>
 80011a4:	2001      	movs	r0, #1
 80011a6:	f000 ff9d 	bl	80020e4 <HAL_Delay>
	BME_read_DataS16(BME280_REGISTER_DIG_T3, &(data->dig_T3));HAL_Delay(1);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	3304      	adds	r3, #4
 80011ae:	4619      	mov	r1, r3
 80011b0:	208c      	movs	r0, #140	; 0x8c
 80011b2:	f7ff ff9b 	bl	80010ec <BME_read_DataS16>
 80011b6:	2001      	movs	r0, #1
 80011b8:	f000 ff94 	bl	80020e4 <HAL_Delay>
	BME_read_DataU16(BME280_REGISTER_DIG_P1, &(data->dig_P1));HAL_Delay(1); // let's not be hasty
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3306      	adds	r3, #6
 80011c0:	4619      	mov	r1, r3
 80011c2:	208e      	movs	r0, #142	; 0x8e
 80011c4:	f7ff ff76 	bl	80010b4 <BME_read_DataU16>
 80011c8:	2001      	movs	r0, #1
 80011ca:	f000 ff8b 	bl	80020e4 <HAL_Delay>
	BME_read_DataS16(BME280_REGISTER_DIG_P2, &(data->dig_P2));HAL_Delay(1);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	3308      	adds	r3, #8
 80011d2:	4619      	mov	r1, r3
 80011d4:	2090      	movs	r0, #144	; 0x90
 80011d6:	f7ff ff89 	bl	80010ec <BME_read_DataS16>
 80011da:	2001      	movs	r0, #1
 80011dc:	f000 ff82 	bl	80020e4 <HAL_Delay>
	BME_read_DataS16(BME280_REGISTER_DIG_P3, &(data->dig_P3));HAL_Delay(1);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	330a      	adds	r3, #10
 80011e4:	4619      	mov	r1, r3
 80011e6:	2092      	movs	r0, #146	; 0x92
 80011e8:	f7ff ff80 	bl	80010ec <BME_read_DataS16>
 80011ec:	2001      	movs	r0, #1
 80011ee:	f000 ff79 	bl	80020e4 <HAL_Delay>
	BME_read_DataS16(BME280_REGISTER_DIG_P4, &(data->dig_P4));HAL_Delay(1);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	330c      	adds	r3, #12
 80011f6:	4619      	mov	r1, r3
 80011f8:	2094      	movs	r0, #148	; 0x94
 80011fa:	f7ff ff77 	bl	80010ec <BME_read_DataS16>
 80011fe:	2001      	movs	r0, #1
 8001200:	f000 ff70 	bl	80020e4 <HAL_Delay>
	BME_read_DataS16(BME280_REGISTER_DIG_P5, &(data->dig_P5));HAL_Delay(1);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	330e      	adds	r3, #14
 8001208:	4619      	mov	r1, r3
 800120a:	2096      	movs	r0, #150	; 0x96
 800120c:	f7ff ff6e 	bl	80010ec <BME_read_DataS16>
 8001210:	2001      	movs	r0, #1
 8001212:	f000 ff67 	bl	80020e4 <HAL_Delay>
	BME_read_DataS16(BME280_REGISTER_DIG_P6, &(data->dig_P6));HAL_Delay(1);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	3310      	adds	r3, #16
 800121a:	4619      	mov	r1, r3
 800121c:	2098      	movs	r0, #152	; 0x98
 800121e:	f7ff ff65 	bl	80010ec <BME_read_DataS16>
 8001222:	2001      	movs	r0, #1
 8001224:	f000 ff5e 	bl	80020e4 <HAL_Delay>
	BME_read_DataS16(BME280_REGISTER_DIG_P7, &(data->dig_P7));HAL_Delay(1);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3312      	adds	r3, #18
 800122c:	4619      	mov	r1, r3
 800122e:	209a      	movs	r0, #154	; 0x9a
 8001230:	f7ff ff5c 	bl	80010ec <BME_read_DataS16>
 8001234:	2001      	movs	r0, #1
 8001236:	f000 ff55 	bl	80020e4 <HAL_Delay>
	BME_read_DataS16(BME280_REGISTER_DIG_P8, &(data->dig_P8));HAL_Delay(1);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	3314      	adds	r3, #20
 800123e:	4619      	mov	r1, r3
 8001240:	209c      	movs	r0, #156	; 0x9c
 8001242:	f7ff ff53 	bl	80010ec <BME_read_DataS16>
 8001246:	2001      	movs	r0, #1
 8001248:	f000 ff4c 	bl	80020e4 <HAL_Delay>
	BME_read_DataS16(BME280_REGISTER_DIG_P9, &(data->dig_P9));HAL_Delay(1);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3316      	adds	r3, #22
 8001250:	4619      	mov	r1, r3
 8001252:	209e      	movs	r0, #158	; 0x9e
 8001254:	f7ff ff4a 	bl	80010ec <BME_read_DataS16>
 8001258:	2001      	movs	r0, #1
 800125a:	f000 ff43 	bl	80020e4 <HAL_Delay>
	// > &(data->dig_P9) - certified c99 moment, not sure if correct, but gotta be?
}
 800125e:	bf00      	nop
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <BME280_SetMode>:
void BME280_SetMode(uint8_t mode) { // so basicly mode is 2 bits in the MEAS reg, we set them here
 8001266:	b580      	push	{r7, lr}
 8001268:	b084      	sub	sp, #16
 800126a:	af00      	add	r7, sp, #0
 800126c:	4603      	mov	r3, r0
 800126e:	71fb      	strb	r3, [r7, #7]

  uint8_t reg = BME_read_Data8(BME280_REG_CTRL_MEAS) & ~BME280_MODE_MSK;
 8001270:	20f4      	movs	r0, #244	; 0xf4
 8001272:	f7ff ff03 	bl	800107c <BME_read_Data8>
 8001276:	4603      	mov	r3, r0
 8001278:	f023 0303 	bic.w	r3, r3, #3
 800127c:	73fb      	strb	r3, [r7, #15]

  HAL_Delay(10); // debug
 800127e:	200a      	movs	r0, #10
 8001280:	f000 ff30 	bl	80020e4 <HAL_Delay>

  reg |= mode & BME280_MODE_MSK;
 8001284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001288:	f003 0303 	and.w	r3, r3, #3
 800128c:	b25a      	sxtb	r2, r3
 800128e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001292:	4313      	orrs	r3, r2
 8001294:	b25b      	sxtb	r3, r3
 8001296:	73fb      	strb	r3, [r7, #15]

  BME_write_reg(BME280_REG_CTRL_MEAS, reg);
 8001298:	7bfb      	ldrb	r3, [r7, #15]
 800129a:	4619      	mov	r1, r3
 800129c:	20f4      	movs	r0, #244	; 0xf4
 800129e:	f7ff febf 	bl	8001020 <BME_write_reg>

}
 80012a2:	bf00      	nop
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <BME280_ReadTemperature>:

float BME280_ReadTemperature() // we actually need to do that because we need it to calc the pressure

{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0

  float temper_float = 0.0f;
 80012b2:	f04f 0300 	mov.w	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]
  uint32_t temper_raw;
  int32_t val1, val2;// intercalculation vars
#warning code trips on the next line BME_read_DataU24_BE
  BME_read_DataU24_BE(BME280_REGISTER_TEMPDATA,&temper_raw);
 80012b8:	463b      	mov	r3, r7
 80012ba:	4619      	mov	r1, r3
 80012bc:	20fa      	movs	r0, #250	; 0xfa
 80012be:	f7ff ff31 	bl	8001124 <BME_read_DataU24_BE>
  printf("hello\r\n");
 80012c2:	4824      	ldr	r0, [pc, #144]	; (8001354 <BME280_ReadTemperature+0xa8>)
 80012c4:	f003 f9e8 	bl	8004698 <puts>
  temper_raw >>= 4;
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	091b      	lsrs	r3, r3, #4
 80012cc:	603b      	str	r3, [r7, #0]

  val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) * // no idea what is going on
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	08db      	lsrs	r3, r3, #3
 80012d2:	4a21      	ldr	r2, [pc, #132]	; (8001358 <BME280_ReadTemperature+0xac>)
 80012d4:	8812      	ldrh	r2, [r2, #0]
 80012d6:	0052      	lsls	r2, r2, #1
 80012d8:	1a9b      	subs	r3, r3, r2
  ((int32_t)CalibData.dig_T2)) >> 11;
 80012da:	4a1f      	ldr	r2, [pc, #124]	; (8001358 <BME280_ReadTemperature+0xac>)
 80012dc:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
  val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) * // no idea what is going on
 80012e0:	fb02 f303 	mul.w	r3, r2, r3
  ((int32_t)CalibData.dig_T2)) >> 11;
 80012e4:	0adb      	lsrs	r3, r3, #11
  val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) * // no idea what is going on
 80012e6:	60bb      	str	r3, [r7, #8]
  val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	091b      	lsrs	r3, r3, #4
 80012ec:	4a1a      	ldr	r2, [pc, #104]	; (8001358 <BME280_ReadTemperature+0xac>)
 80012ee:	8812      	ldrh	r2, [r2, #0]
 80012f0:	1a9b      	subs	r3, r3, r2
  ((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 80012f2:	683a      	ldr	r2, [r7, #0]
 80012f4:	0912      	lsrs	r2, r2, #4
 80012f6:	4918      	ldr	r1, [pc, #96]	; (8001358 <BME280_ReadTemperature+0xac>)
 80012f8:	8809      	ldrh	r1, [r1, #0]
 80012fa:	1a52      	subs	r2, r2, r1
  val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 80012fc:	fb02 f303 	mul.w	r3, r2, r3
  ((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 8001300:	0b1b      	lsrs	r3, r3, #12
  ((int32_t)CalibData.dig_T3)) >> 14;
 8001302:	4a15      	ldr	r2, [pc, #84]	; (8001358 <BME280_ReadTemperature+0xac>)
 8001304:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
  ((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 8001308:	fb02 f303 	mul.w	r3, r2, r3
  ((int32_t)CalibData.dig_T3)) >> 14;
 800130c:	0b9b      	lsrs	r3, r3, #14
  val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 800130e:	607b      	str	r3, [r7, #4]
  temper_int = val1 + val2;
 8001310:	68ba      	ldr	r2, [r7, #8]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4413      	add	r3, r2
 8001316:	4a11      	ldr	r2, [pc, #68]	; (800135c <BME280_ReadTemperature+0xb0>)
 8001318:	6013      	str	r3, [r2, #0]

  temper_float = ((temper_int * 5 + 128) >> 8);
 800131a:	4b10      	ldr	r3, [pc, #64]	; (800135c <BME280_ReadTemperature+0xb0>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	4613      	mov	r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	4413      	add	r3, r2
 8001324:	3380      	adds	r3, #128	; 0x80
 8001326:	121b      	asrs	r3, r3, #8
 8001328:	ee07 3a90 	vmov	s15, r3
 800132c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001330:	edc7 7a03 	vstr	s15, [r7, #12]
  temper_float /= 100.0f;
 8001334:	ed97 7a03 	vldr	s14, [r7, #12]
 8001338:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001360 <BME280_ReadTemperature+0xb4>
 800133c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001340:	edc7 7a03 	vstr	s15, [r7, #12]

  return temper_float;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	ee07 3a90 	vmov	s15, r3

}
 800134a:	eeb0 0a67 	vmov.f32	s0, s15
 800134e:	3710      	adds	r7, #16
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	08006818 	.word	0x08006818
 8001358:	20000298 	.word	0x20000298
 800135c:	20000294 	.word	0x20000294
 8001360:	42c80000 	.word	0x42c80000

08001364 <BME280_ReadPressure>:

float BME280_ReadPressure()

{
 8001364:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001368:	b0d0      	sub	sp, #320	; 0x140
 800136a:	af00      	add	r7, sp, #0
  float press_float = 0.0f;
 800136c:	f04f 0300 	mov.w	r3, #0
 8001370:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  float temper_float = 0.0f;
 8001374:	f04f 0300 	mov.w	r3, #0
 8001378:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  uint32_t press_raw, pres_int;
  int64_t val1, val2, p;

#warning code trips on read temp

  temper_float = BME280_ReadTemperature();
 800137c:	f7ff ff96 	bl	80012ac <BME280_ReadTemperature>
 8001380:	ed87 0a4e 	vstr	s0, [r7, #312]	; 0x138
  BME_read_DataU24_BE(BME280_REGISTER_PRESSUREDATA,&press_raw);
 8001384:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001388:	4619      	mov	r1, r3
 800138a:	20f7      	movs	r0, #247	; 0xf7
 800138c:	f7ff feca 	bl	8001124 <BME_read_DataU24_BE>
  press_raw >>= 4;
 8001390:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001394:	091b      	lsrs	r3, r3, #4
 8001396:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118


  // i have no idea how does this work, if it does?
  val1 = ((int64_t) temper_int) - 128000;
 800139a:	4bac      	ldr	r3, [pc, #688]	; (800164c <BME280_ReadPressure+0x2e8>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	17da      	asrs	r2, r3, #31
 80013a0:	4698      	mov	r8, r3
 80013a2:	4691      	mov	r9, r2
 80013a4:	f5b8 33fa 	subs.w	r3, r8, #128000	; 0x1f400
 80013a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80013aa:	f149 33ff 	adc.w	r3, r9, #4294967295
 80013ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80013b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80013b4:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
  val2 = val1 * val1 * (int64_t)CalibData.dig_P6;
 80013b8:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80013bc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80013c0:	fb03 f102 	mul.w	r1, r3, r2
 80013c4:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80013c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80013cc:	fb02 f303 	mul.w	r3, r2, r3
 80013d0:	18ca      	adds	r2, r1, r3
 80013d2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80013d6:	fba3 4503 	umull	r4, r5, r3, r3
 80013da:	1953      	adds	r3, r2, r5
 80013dc:	461d      	mov	r5, r3
 80013de:	4b9c      	ldr	r3, [pc, #624]	; (8001650 <BME280_ReadPressure+0x2ec>)
 80013e0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80013e4:	b21b      	sxth	r3, r3
 80013e6:	17da      	asrs	r2, r3, #31
 80013e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80013ec:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80013f0:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80013f4:	4603      	mov	r3, r0
 80013f6:	fb03 f205 	mul.w	r2, r3, r5
 80013fa:	460b      	mov	r3, r1
 80013fc:	fb04 f303 	mul.w	r3, r4, r3
 8001400:	4413      	add	r3, r2
 8001402:	4602      	mov	r2, r0
 8001404:	fba4 ab02 	umull	sl, fp, r4, r2
 8001408:	445b      	add	r3, fp
 800140a:	469b      	mov	fp, r3
 800140c:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
 8001410:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
  val2 = val2 + ((val1 * (int64_t)CalibData.dig_P5) << 17);
 8001414:	4b8e      	ldr	r3, [pc, #568]	; (8001650 <BME280_ReadPressure+0x2ec>)
 8001416:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800141a:	b21b      	sxth	r3, r3
 800141c:	17da      	asrs	r2, r3, #31
 800141e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001422:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001426:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800142a:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 800142e:	462a      	mov	r2, r5
 8001430:	fb02 f203 	mul.w	r2, r2, r3
 8001434:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001438:	4621      	mov	r1, r4
 800143a:	fb01 f303 	mul.w	r3, r1, r3
 800143e:	441a      	add	r2, r3
 8001440:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001444:	4621      	mov	r1, r4
 8001446:	fba3 1301 	umull	r1, r3, r3, r1
 800144a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800144e:	460b      	mov	r3, r1
 8001450:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8001454:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001458:	18d3      	adds	r3, r2, r3
 800145a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800145e:	f04f 0000 	mov.w	r0, #0
 8001462:	f04f 0100 	mov.w	r1, #0
 8001466:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	; 0x110
 800146a:	462b      	mov	r3, r5
 800146c:	0459      	lsls	r1, r3, #17
 800146e:	4623      	mov	r3, r4
 8001470:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001474:	4623      	mov	r3, r4
 8001476:	0458      	lsls	r0, r3, #17
 8001478:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800147c:	1814      	adds	r4, r2, r0
 800147e:	643c      	str	r4, [r7, #64]	; 0x40
 8001480:	414b      	adcs	r3, r1
 8001482:	647b      	str	r3, [r7, #68]	; 0x44
 8001484:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001488:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
  val2 = val2 + ((int64_t)CalibData.dig_P4 << 35);
 800148c:	4b70      	ldr	r3, [pc, #448]	; (8001650 <BME280_ReadPressure+0x2ec>)
 800148e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001492:	b21b      	sxth	r3, r3
 8001494:	17da      	asrs	r2, r3, #31
 8001496:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800149a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800149e:	f04f 0000 	mov.w	r0, #0
 80014a2:	f04f 0100 	mov.w	r1, #0
 80014a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80014aa:	00d9      	lsls	r1, r3, #3
 80014ac:	2000      	movs	r0, #0
 80014ae:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80014b2:	1814      	adds	r4, r2, r0
 80014b4:	63bc      	str	r4, [r7, #56]	; 0x38
 80014b6:	414b      	adcs	r3, r1
 80014b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014ba:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80014be:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
  val1 = ((val1 * val1 * (int64_t)CalibData.dig_P3) >> 8) + ((val1 * (int64_t)CalibData.dig_P2) << 12);
 80014c2:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80014c6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80014ca:	fb03 f102 	mul.w	r1, r3, r2
 80014ce:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80014d2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80014d6:	fb02 f303 	mul.w	r3, r2, r3
 80014da:	18ca      	adds	r2, r1, r3
 80014dc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80014e0:	fba3 1303 	umull	r1, r3, r3, r3
 80014e4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80014e8:	460b      	mov	r3, r1
 80014ea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80014ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80014f2:	18d3      	adds	r3, r2, r3
 80014f4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80014f8:	4b55      	ldr	r3, [pc, #340]	; (8001650 <BME280_ReadPressure+0x2ec>)
 80014fa:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80014fe:	b21b      	sxth	r3, r3
 8001500:	17da      	asrs	r2, r3, #31
 8001502:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001506:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800150a:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 800150e:	462b      	mov	r3, r5
 8001510:	e9d7 892c 	ldrd	r8, r9, [r7, #176]	; 0xb0
 8001514:	4642      	mov	r2, r8
 8001516:	fb02 f203 	mul.w	r2, r2, r3
 800151a:	464b      	mov	r3, r9
 800151c:	4621      	mov	r1, r4
 800151e:	fb01 f303 	mul.w	r3, r1, r3
 8001522:	4413      	add	r3, r2
 8001524:	4622      	mov	r2, r4
 8001526:	4641      	mov	r1, r8
 8001528:	fba2 1201 	umull	r1, r2, r2, r1
 800152c:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8001530:	460a      	mov	r2, r1
 8001532:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 8001536:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800153a:	4413      	add	r3, r2
 800153c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001540:	f04f 0000 	mov.w	r0, #0
 8001544:	f04f 0100 	mov.w	r1, #0
 8001548:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800154c:	4623      	mov	r3, r4
 800154e:	0a18      	lsrs	r0, r3, #8
 8001550:	462b      	mov	r3, r5
 8001552:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001556:	462b      	mov	r3, r5
 8001558:	1219      	asrs	r1, r3, #8
 800155a:	4b3d      	ldr	r3, [pc, #244]	; (8001650 <BME280_ReadPressure+0x2ec>)
 800155c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001560:	b21b      	sxth	r3, r3
 8001562:	17da      	asrs	r2, r3, #31
 8001564:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001568:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800156c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001570:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8001574:	464a      	mov	r2, r9
 8001576:	fb02 f203 	mul.w	r2, r2, r3
 800157a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800157e:	4644      	mov	r4, r8
 8001580:	fb04 f303 	mul.w	r3, r4, r3
 8001584:	441a      	add	r2, r3
 8001586:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800158a:	4644      	mov	r4, r8
 800158c:	fba3 4304 	umull	r4, r3, r3, r4
 8001590:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001594:	4623      	mov	r3, r4
 8001596:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800159a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800159e:	18d3      	adds	r3, r2, r3
 80015a0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80015a4:	f04f 0200 	mov.w	r2, #0
 80015a8:	f04f 0300 	mov.w	r3, #0
 80015ac:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 80015b0:	464c      	mov	r4, r9
 80015b2:	0323      	lsls	r3, r4, #12
 80015b4:	4644      	mov	r4, r8
 80015b6:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80015ba:	4644      	mov	r4, r8
 80015bc:	0322      	lsls	r2, r4, #12
 80015be:	1884      	adds	r4, r0, r2
 80015c0:	633c      	str	r4, [r7, #48]	; 0x30
 80015c2:	eb41 0303 	adc.w	r3, r1, r3
 80015c6:	637b      	str	r3, [r7, #52]	; 0x34
 80015c8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80015cc:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
  val1 = (((((int64_t)1) << 47) + val1)) * ((int64_t)CalibData.dig_P1) >> 33;
 80015d0:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 80015d4:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80015d8:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
 80015dc:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 80015e0:	4b1b      	ldr	r3, [pc, #108]	; (8001650 <BME280_ReadPressure+0x2ec>)
 80015e2:	88db      	ldrh	r3, [r3, #6]
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	2200      	movs	r2, #0
 80015e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80015ec:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80015f0:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 80015f4:	462b      	mov	r3, r5
 80015f6:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 80015fa:	4642      	mov	r2, r8
 80015fc:	fb02 f203 	mul.w	r2, r2, r3
 8001600:	464b      	mov	r3, r9
 8001602:	4621      	mov	r1, r4
 8001604:	fb01 f303 	mul.w	r3, r1, r3
 8001608:	4413      	add	r3, r2
 800160a:	4622      	mov	r2, r4
 800160c:	4641      	mov	r1, r8
 800160e:	fba2 1201 	umull	r1, r2, r2, r1
 8001612:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8001616:	460a      	mov	r2, r1
 8001618:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800161c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001620:	4413      	add	r3, r2
 8001622:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001626:	f04f 0200 	mov.w	r2, #0
 800162a:	f04f 0300 	mov.w	r3, #0
 800162e:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001632:	4629      	mov	r1, r5
 8001634:	104a      	asrs	r2, r1, #1
 8001636:	4629      	mov	r1, r5
 8001638:	17cb      	asrs	r3, r1, #31
 800163a:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
  if (val1 == 0) return 0; // avoid exception caused by division by zero
 800163e:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8001642:	4313      	orrs	r3, r2
 8001644:	d106      	bne.n	8001654 <BME280_ReadPressure+0x2f0>
 8001646:	f04f 0300 	mov.w	r3, #0
 800164a:	e194      	b.n	8001976 <BME280_ReadPressure+0x612>
 800164c:	20000294 	.word	0x20000294
 8001650:	20000298 	.word	0x20000298
  p = 1048576 - press_raw;
 8001654:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001658:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800165c:	2200      	movs	r2, #0
 800165e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001660:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001662:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001666:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
  p = (((p << 31) - val2) * 3125) / val1;
 800166a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800166e:	085b      	lsrs	r3, r3, #1
 8001670:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001674:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001678:	07db      	lsls	r3, r3, #31
 800167a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800167e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001682:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001686:	4621      	mov	r1, r4
 8001688:	1a89      	subs	r1, r1, r2
 800168a:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800168e:	4629      	mov	r1, r5
 8001690:	eb61 0303 	sbc.w	r3, r1, r3
 8001694:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001698:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800169c:	4622      	mov	r2, r4
 800169e:	462b      	mov	r3, r5
 80016a0:	1891      	adds	r1, r2, r2
 80016a2:	6239      	str	r1, [r7, #32]
 80016a4:	415b      	adcs	r3, r3
 80016a6:	627b      	str	r3, [r7, #36]	; 0x24
 80016a8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80016ac:	4621      	mov	r1, r4
 80016ae:	1851      	adds	r1, r2, r1
 80016b0:	61b9      	str	r1, [r7, #24]
 80016b2:	4629      	mov	r1, r5
 80016b4:	414b      	adcs	r3, r1
 80016b6:	61fb      	str	r3, [r7, #28]
 80016b8:	f04f 0200 	mov.w	r2, #0
 80016bc:	f04f 0300 	mov.w	r3, #0
 80016c0:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80016c4:	4649      	mov	r1, r9
 80016c6:	018b      	lsls	r3, r1, #6
 80016c8:	4641      	mov	r1, r8
 80016ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016ce:	4641      	mov	r1, r8
 80016d0:	018a      	lsls	r2, r1, #6
 80016d2:	4641      	mov	r1, r8
 80016d4:	1889      	adds	r1, r1, r2
 80016d6:	6139      	str	r1, [r7, #16]
 80016d8:	4649      	mov	r1, r9
 80016da:	eb43 0101 	adc.w	r1, r3, r1
 80016de:	6179      	str	r1, [r7, #20]
 80016e0:	f04f 0200 	mov.w	r2, #0
 80016e4:	f04f 0300 	mov.w	r3, #0
 80016e8:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80016ec:	4649      	mov	r1, r9
 80016ee:	008b      	lsls	r3, r1, #2
 80016f0:	4641      	mov	r1, r8
 80016f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80016f6:	4641      	mov	r1, r8
 80016f8:	008a      	lsls	r2, r1, #2
 80016fa:	4610      	mov	r0, r2
 80016fc:	4619      	mov	r1, r3
 80016fe:	4603      	mov	r3, r0
 8001700:	4622      	mov	r2, r4
 8001702:	189b      	adds	r3, r3, r2
 8001704:	60bb      	str	r3, [r7, #8]
 8001706:	460b      	mov	r3, r1
 8001708:	462a      	mov	r2, r5
 800170a:	eb42 0303 	adc.w	r3, r2, r3
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	f04f 0200 	mov.w	r2, #0
 8001714:	f04f 0300 	mov.w	r3, #0
 8001718:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800171c:	4649      	mov	r1, r9
 800171e:	008b      	lsls	r3, r1, #2
 8001720:	4641      	mov	r1, r8
 8001722:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001726:	4641      	mov	r1, r8
 8001728:	008a      	lsls	r2, r1, #2
 800172a:	4610      	mov	r0, r2
 800172c:	4619      	mov	r1, r3
 800172e:	4603      	mov	r3, r0
 8001730:	4622      	mov	r2, r4
 8001732:	189b      	adds	r3, r3, r2
 8001734:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001738:	462b      	mov	r3, r5
 800173a:	460a      	mov	r2, r1
 800173c:	eb42 0303 	adc.w	r3, r2, r3
 8001740:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001744:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8001748:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800174c:	f7ff fa34 	bl	8000bb8 <__aeabi_ldivmod>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
  val1 = (((int64_t)CalibData.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 8001758:	4b8b      	ldr	r3, [pc, #556]	; (8001988 <BME280_ReadPressure+0x624>)
 800175a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800175e:	b21b      	sxth	r3, r3
 8001760:	17da      	asrs	r2, r3, #31
 8001762:	67bb      	str	r3, [r7, #120]	; 0x78
 8001764:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001766:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800176a:	f04f 0000 	mov.w	r0, #0
 800176e:	f04f 0100 	mov.w	r1, #0
 8001772:	0b50      	lsrs	r0, r2, #13
 8001774:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001778:	1359      	asrs	r1, r3, #13
 800177a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800177e:	462b      	mov	r3, r5
 8001780:	fb00 f203 	mul.w	r2, r0, r3
 8001784:	4623      	mov	r3, r4
 8001786:	fb03 f301 	mul.w	r3, r3, r1
 800178a:	4413      	add	r3, r2
 800178c:	4622      	mov	r2, r4
 800178e:	fba2 1200 	umull	r1, r2, r2, r0
 8001792:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001796:	460a      	mov	r2, r1
 8001798:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 800179c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80017a0:	4413      	add	r3, r2
 80017a2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80017a6:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80017aa:	f04f 0000 	mov.w	r0, #0
 80017ae:	f04f 0100 	mov.w	r1, #0
 80017b2:	0b50      	lsrs	r0, r2, #13
 80017b4:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80017b8:	1359      	asrs	r1, r3, #13
 80017ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80017be:	462b      	mov	r3, r5
 80017c0:	fb00 f203 	mul.w	r2, r0, r3
 80017c4:	4623      	mov	r3, r4
 80017c6:	fb03 f301 	mul.w	r3, r3, r1
 80017ca:	4413      	add	r3, r2
 80017cc:	4622      	mov	r2, r4
 80017ce:	fba2 1200 	umull	r1, r2, r2, r0
 80017d2:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80017d6:	460a      	mov	r2, r1
 80017d8:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80017dc:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80017e0:	4413      	add	r3, r2
 80017e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80017e6:	f04f 0200 	mov.w	r2, #0
 80017ea:	f04f 0300 	mov.w	r3, #0
 80017ee:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80017f2:	4621      	mov	r1, r4
 80017f4:	0e4a      	lsrs	r2, r1, #25
 80017f6:	4629      	mov	r1, r5
 80017f8:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80017fc:	4629      	mov	r1, r5
 80017fe:	164b      	asrs	r3, r1, #25
 8001800:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
  val2 = (((int64_t)CalibData.dig_P8) * p) >> 19;
 8001804:	4b60      	ldr	r3, [pc, #384]	; (8001988 <BME280_ReadPressure+0x624>)
 8001806:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800180a:	b21b      	sxth	r3, r3
 800180c:	17da      	asrs	r2, r3, #31
 800180e:	673b      	str	r3, [r7, #112]	; 0x70
 8001810:	677a      	str	r2, [r7, #116]	; 0x74
 8001812:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001816:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 800181a:	462a      	mov	r2, r5
 800181c:	fb02 f203 	mul.w	r2, r2, r3
 8001820:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001824:	4621      	mov	r1, r4
 8001826:	fb01 f303 	mul.w	r3, r1, r3
 800182a:	441a      	add	r2, r3
 800182c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001830:	4621      	mov	r1, r4
 8001832:	fba3 1301 	umull	r1, r3, r3, r1
 8001836:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800183a:	460b      	mov	r3, r1
 800183c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001840:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001844:	18d3      	adds	r3, r2, r3
 8001846:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800184a:	f04f 0200 	mov.w	r2, #0
 800184e:	f04f 0300 	mov.w	r3, #0
 8001852:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001856:	4621      	mov	r1, r4
 8001858:	0cca      	lsrs	r2, r1, #19
 800185a:	4629      	mov	r1, r5
 800185c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001860:	4629      	mov	r1, r5
 8001862:	14cb      	asrs	r3, r1, #19
 8001864:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
  p = ((p + val1 + val2) >> 8) + ((int64_t)CalibData.dig_P7 << 4);
 8001868:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800186c:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8001870:	1884      	adds	r4, r0, r2
 8001872:	66bc      	str	r4, [r7, #104]	; 0x68
 8001874:	eb41 0303 	adc.w	r3, r1, r3
 8001878:	66fb      	str	r3, [r7, #108]	; 0x6c
 800187a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800187e:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001882:	4621      	mov	r1, r4
 8001884:	1889      	adds	r1, r1, r2
 8001886:	6639      	str	r1, [r7, #96]	; 0x60
 8001888:	4629      	mov	r1, r5
 800188a:	eb43 0101 	adc.w	r1, r3, r1
 800188e:	6679      	str	r1, [r7, #100]	; 0x64
 8001890:	f04f 0000 	mov.w	r0, #0
 8001894:	f04f 0100 	mov.w	r1, #0
 8001898:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800189c:	4623      	mov	r3, r4
 800189e:	0a18      	lsrs	r0, r3, #8
 80018a0:	462b      	mov	r3, r5
 80018a2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80018a6:	462b      	mov	r3, r5
 80018a8:	1219      	asrs	r1, r3, #8
 80018aa:	4b37      	ldr	r3, [pc, #220]	; (8001988 <BME280_ReadPressure+0x624>)
 80018ac:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80018b0:	b21b      	sxth	r3, r3
 80018b2:	17da      	asrs	r2, r3, #31
 80018b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80018b6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	f04f 0300 	mov.w	r3, #0
 80018c0:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	; 0x58
 80018c4:	464c      	mov	r4, r9
 80018c6:	0123      	lsls	r3, r4, #4
 80018c8:	4644      	mov	r4, r8
 80018ca:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80018ce:	4644      	mov	r4, r8
 80018d0:	0122      	lsls	r2, r4, #4
 80018d2:	1884      	adds	r4, r0, r2
 80018d4:	603c      	str	r4, [r7, #0]
 80018d6:	eb41 0303 	adc.w	r3, r1, r3
 80018da:	607b      	str	r3, [r7, #4]
 80018dc:	e9d7 3400 	ldrd	r3, r4, [r7]
 80018e0:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
  pres_int = ((p >> 8) * 1000) + (((p & 0xff) * 390625) / 100000);
 80018e4:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 80018e8:	f04f 0200 	mov.w	r2, #0
 80018ec:	f04f 0300 	mov.w	r3, #0
 80018f0:	0a02      	lsrs	r2, r0, #8
 80018f2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80018f6:	120b      	asrs	r3, r1, #8
 80018f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018fc:	fb03 f402 	mul.w	r4, r3, r2
 8001900:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001904:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 8001908:	653b      	str	r3, [r7, #80]	; 0x50
 800190a:	2300      	movs	r3, #0
 800190c:	657b      	str	r3, [r7, #84]	; 0x54
 800190e:	4b1f      	ldr	r3, [pc, #124]	; (800198c <BME280_ReadPressure+0x628>)
 8001910:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001914:	464a      	mov	r2, r9
 8001916:	fb03 f202 	mul.w	r2, r3, r2
 800191a:	2300      	movs	r3, #0
 800191c:	4641      	mov	r1, r8
 800191e:	fb01 f303 	mul.w	r3, r1, r3
 8001922:	4413      	add	r3, r2
 8001924:	4a19      	ldr	r2, [pc, #100]	; (800198c <BME280_ReadPressure+0x628>)
 8001926:	4641      	mov	r1, r8
 8001928:	fba1 1202 	umull	r1, r2, r1, r2
 800192c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001930:	460a      	mov	r2, r1
 8001932:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001936:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800193a:	4413      	add	r3, r2
 800193c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001940:	4a13      	ldr	r2, [pc, #76]	; (8001990 <BME280_ReadPressure+0x62c>)
 8001942:	f04f 0300 	mov.w	r3, #0
 8001946:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800194a:	f7ff f935 	bl	8000bb8 <__aeabi_ldivmod>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	4613      	mov	r3, r2
 8001954:	4423      	add	r3, r4
 8001956:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  press_float = pres_int / 100.0f;
 800195a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800195e:	ee07 3a90 	vmov	s15, r3
 8001962:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001966:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001994 <BME280_ReadPressure+0x630>
 800196a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800196e:	edc7 7a4f 	vstr	s15, [r7, #316]	; 0x13c

  return press_float;
 8001972:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c

}
 8001976:	ee07 3a90 	vmov	s15, r3
 800197a:	eeb0 0a67 	vmov.f32	s0, s15
 800197e:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8001982:	46bd      	mov	sp, r7
 8001984:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001988:	20000298 	.word	0x20000298
 800198c:	0005f5e1 	.word	0x0005f5e1
 8001990:	000186a0 	.word	0x000186a0
 8001994:	42c80000 	.word	0x42c80000

08001998 <BME280_Init>:

void BME280_Init(){
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
	/*
	 * first, we soft-reset.
	 * The self test uses a total wait time of 9 milliseconds. Of this, 2 milliseconds are used as wait time for soft reset and 7 milliseconds are used as wait time for conversion. The soft reset is performed in order to erase any possible old settings and could be omitted if the sensor is known to be in an untouched state after power on.
	 */
	BME_write_reg(BME280_REG_SOFTRESET,BME280_SOFTRESET_VALUE);
 800199c:	21b6      	movs	r1, #182	; 0xb6
 800199e:	20e0      	movs	r0, #224	; 0xe0
 80019a0:	f7ff fb3e 	bl	8001020 <BME_write_reg>
	HAL_Delay(10); // let's wait a little
 80019a4:	200a      	movs	r0, #10
 80019a6:	f000 fb9d 	bl	80020e4 <HAL_Delay>
	BMEReadCalibData(&CalibData);
 80019aa:	4804      	ldr	r0, [pc, #16]	; (80019bc <BME280_Init+0x24>)
 80019ac:	f7ff fbe8 	bl	8001180 <BMEReadCalibData>
#warning maybe i should comment the BMEReadCalibData???
#warning im not sure, but by default standby timing of the BME should be 0.5 ms.
#warning i should set filtration and oversampling, but **do i need to**?
	BME280_SetMode(BME280_MODE_NORMAL);
 80019b0:	2003      	movs	r0, #3
 80019b2:	f7ff fc58 	bl	8001266 <BME280_SetMode>

}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20000298 	.word	0x20000298

080019c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019c6:	f000 fb1b 	bl	8002000 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019ca:	f000 f81f 	bl	8001a0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019ce:	f000 f8e9 	bl	8001ba4 <MX_GPIO_Init>
  MX_SPI2_Init();
 80019d2:	f000 f887 	bl	8001ae4 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80019d6:	f000 f8bb 	bl	8001b50 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 80019da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019de:	f000 fb81 	bl	80020e4 <HAL_Delay>
  //printf("innit\r\n");
  BME280_Init();
 80019e2:	f7ff ffd9 	bl	8001998 <BME280_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	//printf("hello\n"); // if I have set the frequency on 8 MHZ the uart doesn' work
	//float result = BME280_ReadPressure();
	float result = BME280_ReadPressure();
 80019e6:	f7ff fcbd 	bl	8001364 <BME280_ReadPressure>
 80019ea:	ed87 0a01 	vstr	s0, [r7, #4]
	HAL_Delay(2000);
 80019ee:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80019f2:	f000 fb77 	bl	80020e4 <HAL_Delay>
	printf("%f\r\n", result);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f7fe fdae 	bl	8000558 <__aeabi_f2d>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	4801      	ldr	r0, [pc, #4]	; (8001a08 <main+0x48>)
 8001a02:	f002 fdc3 	bl	800458c <iprintf>
  {
 8001a06:	e7ee      	b.n	80019e6 <main+0x26>
 8001a08:	08006820 	.word	0x08006820

08001a0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b094      	sub	sp, #80	; 0x50
 8001a10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a12:	f107 0320 	add.w	r3, r7, #32
 8001a16:	2230      	movs	r2, #48	; 0x30
 8001a18:	2100      	movs	r1, #0
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f002 f944 	bl	8003ca8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a20:	f107 030c 	add.w	r3, r7, #12
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a30:	2300      	movs	r3, #0
 8001a32:	60bb      	str	r3, [r7, #8]
 8001a34:	4b29      	ldr	r3, [pc, #164]	; (8001adc <SystemClock_Config+0xd0>)
 8001a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a38:	4a28      	ldr	r2, [pc, #160]	; (8001adc <SystemClock_Config+0xd0>)
 8001a3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a3e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a40:	4b26      	ldr	r3, [pc, #152]	; (8001adc <SystemClock_Config+0xd0>)
 8001a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a48:	60bb      	str	r3, [r7, #8]
 8001a4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	607b      	str	r3, [r7, #4]
 8001a50:	4b23      	ldr	r3, [pc, #140]	; (8001ae0 <SystemClock_Config+0xd4>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a58:	4a21      	ldr	r2, [pc, #132]	; (8001ae0 <SystemClock_Config+0xd4>)
 8001a5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a5e:	6013      	str	r3, [r2, #0]
 8001a60:	4b1f      	ldr	r3, [pc, #124]	; (8001ae0 <SystemClock_Config+0xd4>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a68:	607b      	str	r3, [r7, #4]
 8001a6a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a76:	2302      	movs	r3, #2
 8001a78:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a7a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001a80:	2306      	movs	r3, #6
 8001a82:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001a84:	2360      	movs	r3, #96	; 0x60
 8001a86:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8001a88:	2306      	movs	r3, #6
 8001a8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a8c:	2304      	movs	r3, #4
 8001a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a90:	f107 0320 	add.w	r3, r7, #32
 8001a94:	4618      	mov	r0, r3
 8001a96:	f000 fdcd 	bl	8002634 <HAL_RCC_OscConfig>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001aa0:	f000 f8e0 	bl	8001c64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001aa4:	230f      	movs	r3, #15
 8001aa6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001aac:	2380      	movs	r3, #128	; 0x80
 8001aae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ab0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ab4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001ab6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001aba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001abc:	f107 030c 	add.w	r3, r7, #12
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f001 f82e 	bl	8002b24 <HAL_RCC_ClockConfig>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001ace:	f000 f8c9 	bl	8001c64 <Error_Handler>
  }
}
 8001ad2:	bf00      	nop
 8001ad4:	3750      	adds	r7, #80	; 0x50
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	40007000 	.word	0x40007000

08001ae4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001ae8:	4b17      	ldr	r3, [pc, #92]	; (8001b48 <MX_SPI2_Init+0x64>)
 8001aea:	4a18      	ldr	r2, [pc, #96]	; (8001b4c <MX_SPI2_Init+0x68>)
 8001aec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001aee:	4b16      	ldr	r3, [pc, #88]	; (8001b48 <MX_SPI2_Init+0x64>)
 8001af0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001af4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001af6:	4b14      	ldr	r3, [pc, #80]	; (8001b48 <MX_SPI2_Init+0x64>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001afc:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <MX_SPI2_Init+0x64>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b02:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <MX_SPI2_Init+0x64>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b08:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <MX_SPI2_Init+0x64>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001b0e:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <MX_SPI2_Init+0x64>)
 8001b10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b14:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b16:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <MX_SPI2_Init+0x64>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b1c:	4b0a      	ldr	r3, [pc, #40]	; (8001b48 <MX_SPI2_Init+0x64>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b22:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <MX_SPI2_Init+0x64>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b28:	4b07      	ldr	r3, [pc, #28]	; (8001b48 <MX_SPI2_Init+0x64>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001b2e:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <MX_SPI2_Init+0x64>)
 8001b30:	220a      	movs	r2, #10
 8001b32:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001b34:	4804      	ldr	r0, [pc, #16]	; (8001b48 <MX_SPI2_Init+0x64>)
 8001b36:	f001 f9d5 	bl	8002ee4 <HAL_SPI_Init>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001b40:	f000 f890 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001b44:	bf00      	nop
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	200001f8 	.word	0x200001f8
 8001b4c:	40003800 	.word	0x40003800

08001b50 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b54:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <MX_USART1_UART_Init+0x4c>)
 8001b56:	4a12      	ldr	r2, [pc, #72]	; (8001ba0 <MX_USART1_UART_Init+0x50>)
 8001b58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001b5a:	4b10      	ldr	r3, [pc, #64]	; (8001b9c <MX_USART1_UART_Init+0x4c>)
 8001b5c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b62:	4b0e      	ldr	r3, [pc, #56]	; (8001b9c <MX_USART1_UART_Init+0x4c>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b68:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <MX_USART1_UART_Init+0x4c>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b6e:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <MX_USART1_UART_Init+0x4c>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b74:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <MX_USART1_UART_Init+0x4c>)
 8001b76:	220c      	movs	r2, #12
 8001b78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b7a:	4b08      	ldr	r3, [pc, #32]	; (8001b9c <MX_USART1_UART_Init+0x4c>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b80:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <MX_USART1_UART_Init+0x4c>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b86:	4805      	ldr	r0, [pc, #20]	; (8001b9c <MX_USART1_UART_Init+0x4c>)
 8001b88:	f001 fca2 	bl	80034d0 <HAL_UART_Init>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b92:	f000 f867 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000250 	.word	0x20000250
 8001ba0:	40011000 	.word	0x40011000

08001ba4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08a      	sub	sp, #40	; 0x28
 8001ba8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001baa:	f107 0314 	add.w	r3, r7, #20
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	605a      	str	r2, [r3, #4]
 8001bb4:	609a      	str	r2, [r3, #8]
 8001bb6:	60da      	str	r2, [r3, #12]
 8001bb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	613b      	str	r3, [r7, #16]
 8001bbe:	4b27      	ldr	r3, [pc, #156]	; (8001c5c <MX_GPIO_Init+0xb8>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	4a26      	ldr	r2, [pc, #152]	; (8001c5c <MX_GPIO_Init+0xb8>)
 8001bc4:	f043 0304 	orr.w	r3, r3, #4
 8001bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bca:	4b24      	ldr	r3, [pc, #144]	; (8001c5c <MX_GPIO_Init+0xb8>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	f003 0304 	and.w	r3, r3, #4
 8001bd2:	613b      	str	r3, [r7, #16]
 8001bd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	4b20      	ldr	r3, [pc, #128]	; (8001c5c <MX_GPIO_Init+0xb8>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	4a1f      	ldr	r2, [pc, #124]	; (8001c5c <MX_GPIO_Init+0xb8>)
 8001be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001be4:	6313      	str	r3, [r2, #48]	; 0x30
 8001be6:	4b1d      	ldr	r3, [pc, #116]	; (8001c5c <MX_GPIO_Init+0xb8>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60bb      	str	r3, [r7, #8]
 8001bf6:	4b19      	ldr	r3, [pc, #100]	; (8001c5c <MX_GPIO_Init+0xb8>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	4a18      	ldr	r2, [pc, #96]	; (8001c5c <MX_GPIO_Init+0xb8>)
 8001bfc:	f043 0302 	orr.w	r3, r3, #2
 8001c00:	6313      	str	r3, [r2, #48]	; 0x30
 8001c02:	4b16      	ldr	r3, [pc, #88]	; (8001c5c <MX_GPIO_Init+0xb8>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	60bb      	str	r3, [r7, #8]
 8001c0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	607b      	str	r3, [r7, #4]
 8001c12:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <MX_GPIO_Init+0xb8>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	4a11      	ldr	r2, [pc, #68]	; (8001c5c <MX_GPIO_Init+0xb8>)
 8001c18:	f043 0301 	orr.w	r3, r3, #1
 8001c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1e:	4b0f      	ldr	r3, [pc, #60]	; (8001c5c <MX_GPIO_Init+0xb8>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	607b      	str	r3, [r7, #4]
 8001c28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, nOE_Pin|LATCH_Pin, GPIO_PIN_RESET);
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f242 0102 	movw	r1, #8194	; 0x2002
 8001c30:	480b      	ldr	r0, [pc, #44]	; (8001c60 <MX_GPIO_Init+0xbc>)
 8001c32:	f000 fce5 	bl	8002600 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : nOE_Pin LATCH_Pin */
  GPIO_InitStruct.Pin = nOE_Pin|LATCH_Pin;
 8001c36:	f242 0302 	movw	r3, #8194	; 0x2002
 8001c3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c44:	2300      	movs	r3, #0
 8001c46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c48:	f107 0314 	add.w	r3, r7, #20
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4804      	ldr	r0, [pc, #16]	; (8001c60 <MX_GPIO_Init+0xbc>)
 8001c50:	f000 fb52 	bl	80022f8 <HAL_GPIO_Init>

}
 8001c54:	bf00      	nop
 8001c56:	3728      	adds	r7, #40	; 0x28
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	40020800 	.word	0x40020800

08001c64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c68:	b672      	cpsid	i
}
 8001c6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c6c:	e7fe      	b.n	8001c6c <Error_Handler+0x8>
	...

08001c70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	607b      	str	r3, [r7, #4]
 8001c7a:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <HAL_MspInit+0x4c>)
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7e:	4a0f      	ldr	r2, [pc, #60]	; (8001cbc <HAL_MspInit+0x4c>)
 8001c80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c84:	6453      	str	r3, [r2, #68]	; 0x44
 8001c86:	4b0d      	ldr	r3, [pc, #52]	; (8001cbc <HAL_MspInit+0x4c>)
 8001c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c8e:	607b      	str	r3, [r7, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	603b      	str	r3, [r7, #0]
 8001c96:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <HAL_MspInit+0x4c>)
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	4a08      	ldr	r2, [pc, #32]	; (8001cbc <HAL_MspInit+0x4c>)
 8001c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ca2:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <HAL_MspInit+0x4c>)
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001caa:	603b      	str	r3, [r7, #0]
 8001cac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	40023800 	.word	0x40023800

08001cc0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08a      	sub	sp, #40	; 0x28
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc8:	f107 0314 	add.w	r3, r7, #20
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
 8001cd6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a19      	ldr	r2, [pc, #100]	; (8001d44 <HAL_SPI_MspInit+0x84>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d12c      	bne.n	8001d3c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	4b18      	ldr	r3, [pc, #96]	; (8001d48 <HAL_SPI_MspInit+0x88>)
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	4a17      	ldr	r2, [pc, #92]	; (8001d48 <HAL_SPI_MspInit+0x88>)
 8001cec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cf2:	4b15      	ldr	r3, [pc, #84]	; (8001d48 <HAL_SPI_MspInit+0x88>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cfa:	613b      	str	r3, [r7, #16]
 8001cfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	4b11      	ldr	r3, [pc, #68]	; (8001d48 <HAL_SPI_MspInit+0x88>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	4a10      	ldr	r2, [pc, #64]	; (8001d48 <HAL_SPI_MspInit+0x88>)
 8001d08:	f043 0302 	orr.w	r3, r3, #2
 8001d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0e:	4b0e      	ldr	r3, [pc, #56]	; (8001d48 <HAL_SPI_MspInit+0x88>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001d1a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001d1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d20:	2302      	movs	r3, #2
 8001d22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d2c:	2305      	movs	r3, #5
 8001d2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d30:	f107 0314 	add.w	r3, r7, #20
 8001d34:	4619      	mov	r1, r3
 8001d36:	4805      	ldr	r0, [pc, #20]	; (8001d4c <HAL_SPI_MspInit+0x8c>)
 8001d38:	f000 fade 	bl	80022f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001d3c:	bf00      	nop
 8001d3e:	3728      	adds	r7, #40	; 0x28
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40003800 	.word	0x40003800
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	40020400 	.word	0x40020400

08001d50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08a      	sub	sp, #40	; 0x28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d58:	f107 0314 	add.w	r3, r7, #20
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
 8001d66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a19      	ldr	r2, [pc, #100]	; (8001dd4 <HAL_UART_MspInit+0x84>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d12c      	bne.n	8001dcc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	613b      	str	r3, [r7, #16]
 8001d76:	4b18      	ldr	r3, [pc, #96]	; (8001dd8 <HAL_UART_MspInit+0x88>)
 8001d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7a:	4a17      	ldr	r2, [pc, #92]	; (8001dd8 <HAL_UART_MspInit+0x88>)
 8001d7c:	f043 0310 	orr.w	r3, r3, #16
 8001d80:	6453      	str	r3, [r2, #68]	; 0x44
 8001d82:	4b15      	ldr	r3, [pc, #84]	; (8001dd8 <HAL_UART_MspInit+0x88>)
 8001d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d86:	f003 0310 	and.w	r3, r3, #16
 8001d8a:	613b      	str	r3, [r7, #16]
 8001d8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <HAL_UART_MspInit+0x88>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	4a10      	ldr	r2, [pc, #64]	; (8001dd8 <HAL_UART_MspInit+0x88>)
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9e:	4b0e      	ldr	r3, [pc, #56]	; (8001dd8 <HAL_UART_MspInit+0x88>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001daa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001dae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db0:	2302      	movs	r3, #2
 8001db2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db8:	2303      	movs	r3, #3
 8001dba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001dbc:	2307      	movs	r3, #7
 8001dbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc0:	f107 0314 	add.w	r3, r7, #20
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4805      	ldr	r0, [pc, #20]	; (8001ddc <HAL_UART_MspInit+0x8c>)
 8001dc8:	f000 fa96 	bl	80022f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001dcc:	bf00      	nop
 8001dce:	3728      	adds	r7, #40	; 0x28
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40011000 	.word	0x40011000
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	40020000 	.word	0x40020000

08001de0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001de4:	e7fe      	b.n	8001de4 <NMI_Handler+0x4>

08001de6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001de6:	b480      	push	{r7}
 8001de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dea:	e7fe      	b.n	8001dea <HardFault_Handler+0x4>

08001dec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001df0:	e7fe      	b.n	8001df0 <MemManage_Handler+0x4>

08001df2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001df2:	b480      	push	{r7}
 8001df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001df6:	e7fe      	b.n	8001df6 <BusFault_Handler+0x4>

08001df8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dfc:	e7fe      	b.n	8001dfc <UsageFault_Handler+0x4>

08001dfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e2c:	f000 f93a 	bl	80020a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e30:	bf00      	nop
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <_getpid>:
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	2301      	movs	r3, #1
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <_kill>:
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
 8001e4e:	f001 ff01 	bl	8003c54 <__errno>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2216      	movs	r2, #22
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	f04f 33ff 	mov.w	r3, #4294967295
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <_exit>:
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f7ff ffe7 	bl	8001e44 <_kill>
 8001e76:	e7fe      	b.n	8001e76 <_exit+0x12>

08001e78 <_read>:
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
 8001e84:	2300      	movs	r3, #0
 8001e86:	617b      	str	r3, [r7, #20]
 8001e88:	e00a      	b.n	8001ea0 <_read+0x28>
 8001e8a:	f3af 8000 	nop.w
 8001e8e:	4601      	mov	r1, r0
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	1c5a      	adds	r2, r3, #1
 8001e94:	60ba      	str	r2, [r7, #8]
 8001e96:	b2ca      	uxtb	r2, r1
 8001e98:	701a      	strb	r2, [r3, #0]
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	617b      	str	r3, [r7, #20]
 8001ea0:	697a      	ldr	r2, [r7, #20]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	dbf0      	blt.n	8001e8a <_read+0x12>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3718      	adds	r7, #24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <_close>:
 8001eb2:	b480      	push	{r7}
 8001eb4:	b083      	sub	sp, #12
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
 8001eba:	f04f 33ff 	mov.w	r3, #4294967295
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <_fstat>:
 8001eca:	b480      	push	{r7}
 8001ecc:	b083      	sub	sp, #12
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
 8001ed2:	6039      	str	r1, [r7, #0]
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eda:	605a      	str	r2, [r3, #4]
 8001edc:	2300      	movs	r3, #0
 8001ede:	4618      	mov	r0, r3
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <_isatty>:
 8001eea:	b480      	push	{r7}
 8001eec:	b083      	sub	sp, #12
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <_lseek>:
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3714      	adds	r7, #20
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
	...

08001f1c <_sbrk>:
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	4a14      	ldr	r2, [pc, #80]	; (8001f78 <_sbrk+0x5c>)
 8001f26:	4b15      	ldr	r3, [pc, #84]	; (8001f7c <_sbrk+0x60>)
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	617b      	str	r3, [r7, #20]
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	613b      	str	r3, [r7, #16]
 8001f30:	4b13      	ldr	r3, [pc, #76]	; (8001f80 <_sbrk+0x64>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d102      	bne.n	8001f3e <_sbrk+0x22>
 8001f38:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <_sbrk+0x64>)
 8001f3a:	4a12      	ldr	r2, [pc, #72]	; (8001f84 <_sbrk+0x68>)
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	4b10      	ldr	r3, [pc, #64]	; (8001f80 <_sbrk+0x64>)
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4413      	add	r3, r2
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d207      	bcs.n	8001f5c <_sbrk+0x40>
 8001f4c:	f001 fe82 	bl	8003c54 <__errno>
 8001f50:	4603      	mov	r3, r0
 8001f52:	220c      	movs	r2, #12
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	f04f 33ff 	mov.w	r3, #4294967295
 8001f5a:	e009      	b.n	8001f70 <_sbrk+0x54>
 8001f5c:	4b08      	ldr	r3, [pc, #32]	; (8001f80 <_sbrk+0x64>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	60fb      	str	r3, [r7, #12]
 8001f62:	4b07      	ldr	r3, [pc, #28]	; (8001f80 <_sbrk+0x64>)
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4413      	add	r3, r2
 8001f6a:	4a05      	ldr	r2, [pc, #20]	; (8001f80 <_sbrk+0x64>)
 8001f6c:	6013      	str	r3, [r2, #0]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	4618      	mov	r0, r3
 8001f72:	3718      	adds	r7, #24
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	20010000 	.word	0x20010000
 8001f7c:	00000400 	.word	0x00000400
 8001f80:	200002b4 	.word	0x200002b4
 8001f84:	200002d0 	.word	0x200002d0

08001f88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f8c:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <SystemInit+0x20>)
 8001f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f92:	4a05      	ldr	r2, [pc, #20]	; (8001fa8 <SystemInit+0x20>)
 8001f94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	e000ed00 	.word	0xe000ed00

08001fac <Reset_Handler>:
 8001fac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fe4 <LoopFillZerobss+0x12>
 8001fb0:	480d      	ldr	r0, [pc, #52]	; (8001fe8 <LoopFillZerobss+0x16>)
 8001fb2:	490e      	ldr	r1, [pc, #56]	; (8001fec <LoopFillZerobss+0x1a>)
 8001fb4:	4a0e      	ldr	r2, [pc, #56]	; (8001ff0 <LoopFillZerobss+0x1e>)
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	e002      	b.n	8001fc0 <LoopCopyDataInit>

08001fba <CopyDataInit>:
 8001fba:	58d4      	ldr	r4, [r2, r3]
 8001fbc:	50c4      	str	r4, [r0, r3]
 8001fbe:	3304      	adds	r3, #4

08001fc0 <LoopCopyDataInit>:
 8001fc0:	18c4      	adds	r4, r0, r3
 8001fc2:	428c      	cmp	r4, r1
 8001fc4:	d3f9      	bcc.n	8001fba <CopyDataInit>
 8001fc6:	4a0b      	ldr	r2, [pc, #44]	; (8001ff4 <LoopFillZerobss+0x22>)
 8001fc8:	4c0b      	ldr	r4, [pc, #44]	; (8001ff8 <LoopFillZerobss+0x26>)
 8001fca:	2300      	movs	r3, #0
 8001fcc:	e001      	b.n	8001fd2 <LoopFillZerobss>

08001fce <FillZerobss>:
 8001fce:	6013      	str	r3, [r2, #0]
 8001fd0:	3204      	adds	r2, #4

08001fd2 <LoopFillZerobss>:
 8001fd2:	42a2      	cmp	r2, r4
 8001fd4:	d3fb      	bcc.n	8001fce <FillZerobss>
 8001fd6:	f7ff ffd7 	bl	8001f88 <SystemInit>
 8001fda:	f001 fe41 	bl	8003c60 <__libc_init_array>
 8001fde:	f7ff fcef 	bl	80019c0 <main>
 8001fe2:	4770      	bx	lr
 8001fe4:	20010000 	.word	0x20010000
 8001fe8:	20000000 	.word	0x20000000
 8001fec:	200001dc 	.word	0x200001dc
 8001ff0:	08006c2c 	.word	0x08006c2c
 8001ff4:	200001dc 	.word	0x200001dc
 8001ff8:	200002cc 	.word	0x200002cc

08001ffc <ADC_IRQHandler>:
 8001ffc:	e7fe      	b.n	8001ffc <ADC_IRQHandler>
	...

08002000 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002004:	4b0e      	ldr	r3, [pc, #56]	; (8002040 <HAL_Init+0x40>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a0d      	ldr	r2, [pc, #52]	; (8002040 <HAL_Init+0x40>)
 800200a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800200e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002010:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <HAL_Init+0x40>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a0a      	ldr	r2, [pc, #40]	; (8002040 <HAL_Init+0x40>)
 8002016:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800201a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800201c:	4b08      	ldr	r3, [pc, #32]	; (8002040 <HAL_Init+0x40>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a07      	ldr	r2, [pc, #28]	; (8002040 <HAL_Init+0x40>)
 8002022:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002026:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002028:	2003      	movs	r0, #3
 800202a:	f000 f931 	bl	8002290 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800202e:	200f      	movs	r0, #15
 8002030:	f000 f808 	bl	8002044 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002034:	f7ff fe1c 	bl	8001c70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40023c00 	.word	0x40023c00

08002044 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800204c:	4b12      	ldr	r3, [pc, #72]	; (8002098 <HAL_InitTick+0x54>)
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	4b12      	ldr	r3, [pc, #72]	; (800209c <HAL_InitTick+0x58>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	4619      	mov	r1, r3
 8002056:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800205a:	fbb3 f3f1 	udiv	r3, r3, r1
 800205e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002062:	4618      	mov	r0, r3
 8002064:	f000 f93b 	bl	80022de <HAL_SYSTICK_Config>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e00e      	b.n	8002090 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b0f      	cmp	r3, #15
 8002076:	d80a      	bhi.n	800208e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002078:	2200      	movs	r2, #0
 800207a:	6879      	ldr	r1, [r7, #4]
 800207c:	f04f 30ff 	mov.w	r0, #4294967295
 8002080:	f000 f911 	bl	80022a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002084:	4a06      	ldr	r2, [pc, #24]	; (80020a0 <HAL_InitTick+0x5c>)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800208a:	2300      	movs	r3, #0
 800208c:	e000      	b.n	8002090 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
}
 8002090:	4618      	mov	r0, r3
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	20000000 	.word	0x20000000
 800209c:	20000008 	.word	0x20000008
 80020a0:	20000004 	.word	0x20000004

080020a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020a8:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <HAL_IncTick+0x20>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	461a      	mov	r2, r3
 80020ae:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <HAL_IncTick+0x24>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4413      	add	r3, r2
 80020b4:	4a04      	ldr	r2, [pc, #16]	; (80020c8 <HAL_IncTick+0x24>)
 80020b6:	6013      	str	r3, [r2, #0]
}
 80020b8:	bf00      	nop
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	20000008 	.word	0x20000008
 80020c8:	200002b8 	.word	0x200002b8

080020cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  return uwTick;
 80020d0:	4b03      	ldr	r3, [pc, #12]	; (80020e0 <HAL_GetTick+0x14>)
 80020d2:	681b      	ldr	r3, [r3, #0]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	200002b8 	.word	0x200002b8

080020e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020ec:	f7ff ffee 	bl	80020cc <HAL_GetTick>
 80020f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020fc:	d005      	beq.n	800210a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020fe:	4b0a      	ldr	r3, [pc, #40]	; (8002128 <HAL_Delay+0x44>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	461a      	mov	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	4413      	add	r3, r2
 8002108:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800210a:	bf00      	nop
 800210c:	f7ff ffde 	bl	80020cc <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	429a      	cmp	r2, r3
 800211a:	d8f7      	bhi.n	800210c <HAL_Delay+0x28>
  {
  }
}
 800211c:	bf00      	nop
 800211e:	bf00      	nop
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	20000008 	.word	0x20000008

0800212c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f003 0307 	and.w	r3, r3, #7
 800213a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800213c:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <__NVIC_SetPriorityGrouping+0x44>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002142:	68ba      	ldr	r2, [r7, #8]
 8002144:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002148:	4013      	ands	r3, r2
 800214a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002154:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002158:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800215c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800215e:	4a04      	ldr	r2, [pc, #16]	; (8002170 <__NVIC_SetPriorityGrouping+0x44>)
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	60d3      	str	r3, [r2, #12]
}
 8002164:	bf00      	nop
 8002166:	3714      	adds	r7, #20
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	e000ed00 	.word	0xe000ed00

08002174 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002178:	4b04      	ldr	r3, [pc, #16]	; (800218c <__NVIC_GetPriorityGrouping+0x18>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	0a1b      	lsrs	r3, r3, #8
 800217e:	f003 0307 	and.w	r3, r3, #7
}
 8002182:	4618      	mov	r0, r3
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	e000ed00 	.word	0xe000ed00

08002190 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	6039      	str	r1, [r7, #0]
 800219a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800219c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	db0a      	blt.n	80021ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	b2da      	uxtb	r2, r3
 80021a8:	490c      	ldr	r1, [pc, #48]	; (80021dc <__NVIC_SetPriority+0x4c>)
 80021aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ae:	0112      	lsls	r2, r2, #4
 80021b0:	b2d2      	uxtb	r2, r2
 80021b2:	440b      	add	r3, r1
 80021b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021b8:	e00a      	b.n	80021d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	b2da      	uxtb	r2, r3
 80021be:	4908      	ldr	r1, [pc, #32]	; (80021e0 <__NVIC_SetPriority+0x50>)
 80021c0:	79fb      	ldrb	r3, [r7, #7]
 80021c2:	f003 030f 	and.w	r3, r3, #15
 80021c6:	3b04      	subs	r3, #4
 80021c8:	0112      	lsls	r2, r2, #4
 80021ca:	b2d2      	uxtb	r2, r2
 80021cc:	440b      	add	r3, r1
 80021ce:	761a      	strb	r2, [r3, #24]
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	e000e100 	.word	0xe000e100
 80021e0:	e000ed00 	.word	0xe000ed00

080021e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b089      	sub	sp, #36	; 0x24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f003 0307 	and.w	r3, r3, #7
 80021f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	f1c3 0307 	rsb	r3, r3, #7
 80021fe:	2b04      	cmp	r3, #4
 8002200:	bf28      	it	cs
 8002202:	2304      	movcs	r3, #4
 8002204:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	3304      	adds	r3, #4
 800220a:	2b06      	cmp	r3, #6
 800220c:	d902      	bls.n	8002214 <NVIC_EncodePriority+0x30>
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	3b03      	subs	r3, #3
 8002212:	e000      	b.n	8002216 <NVIC_EncodePriority+0x32>
 8002214:	2300      	movs	r3, #0
 8002216:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002218:	f04f 32ff 	mov.w	r2, #4294967295
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	43da      	mvns	r2, r3
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	401a      	ands	r2, r3
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800222c:	f04f 31ff 	mov.w	r1, #4294967295
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	fa01 f303 	lsl.w	r3, r1, r3
 8002236:	43d9      	mvns	r1, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800223c:	4313      	orrs	r3, r2
         );
}
 800223e:	4618      	mov	r0, r3
 8002240:	3724      	adds	r7, #36	; 0x24
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
	...

0800224c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	3b01      	subs	r3, #1
 8002258:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800225c:	d301      	bcc.n	8002262 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800225e:	2301      	movs	r3, #1
 8002260:	e00f      	b.n	8002282 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002262:	4a0a      	ldr	r2, [pc, #40]	; (800228c <SysTick_Config+0x40>)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3b01      	subs	r3, #1
 8002268:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800226a:	210f      	movs	r1, #15
 800226c:	f04f 30ff 	mov.w	r0, #4294967295
 8002270:	f7ff ff8e 	bl	8002190 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002274:	4b05      	ldr	r3, [pc, #20]	; (800228c <SysTick_Config+0x40>)
 8002276:	2200      	movs	r2, #0
 8002278:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800227a:	4b04      	ldr	r3, [pc, #16]	; (800228c <SysTick_Config+0x40>)
 800227c:	2207      	movs	r2, #7
 800227e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	e000e010 	.word	0xe000e010

08002290 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f7ff ff47 	bl	800212c <__NVIC_SetPriorityGrouping>
}
 800229e:	bf00      	nop
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b086      	sub	sp, #24
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	4603      	mov	r3, r0
 80022ae:	60b9      	str	r1, [r7, #8]
 80022b0:	607a      	str	r2, [r7, #4]
 80022b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022b4:	2300      	movs	r3, #0
 80022b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022b8:	f7ff ff5c 	bl	8002174 <__NVIC_GetPriorityGrouping>
 80022bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	68b9      	ldr	r1, [r7, #8]
 80022c2:	6978      	ldr	r0, [r7, #20]
 80022c4:	f7ff ff8e 	bl	80021e4 <NVIC_EncodePriority>
 80022c8:	4602      	mov	r2, r0
 80022ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ce:	4611      	mov	r1, r2
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff ff5d 	bl	8002190 <__NVIC_SetPriority>
}
 80022d6:	bf00      	nop
 80022d8:	3718      	adds	r7, #24
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b082      	sub	sp, #8
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7ff ffb0 	bl	800224c <SysTick_Config>
 80022ec:	4603      	mov	r3, r0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
	...

080022f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b089      	sub	sp, #36	; 0x24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002302:	2300      	movs	r3, #0
 8002304:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002306:	2300      	movs	r3, #0
 8002308:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800230a:	2300      	movs	r3, #0
 800230c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800230e:	2300      	movs	r3, #0
 8002310:	61fb      	str	r3, [r7, #28]
 8002312:	e159      	b.n	80025c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002314:	2201      	movs	r2, #1
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	4013      	ands	r3, r2
 8002326:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	429a      	cmp	r2, r3
 800232e:	f040 8148 	bne.w	80025c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f003 0303 	and.w	r3, r3, #3
 800233a:	2b01      	cmp	r3, #1
 800233c:	d005      	beq.n	800234a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002346:	2b02      	cmp	r3, #2
 8002348:	d130      	bne.n	80023ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	2203      	movs	r2, #3
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4013      	ands	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	68da      	ldr	r2, [r3, #12]
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4313      	orrs	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002380:	2201      	movs	r2, #1
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	43db      	mvns	r3, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4013      	ands	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	091b      	lsrs	r3, r3, #4
 8002396:	f003 0201 	and.w	r2, r3, #1
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 0303 	and.w	r3, r3, #3
 80023b4:	2b03      	cmp	r3, #3
 80023b6:	d017      	beq.n	80023e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	2203      	movs	r2, #3
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43db      	mvns	r3, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	4313      	orrs	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f003 0303 	and.w	r3, r3, #3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d123      	bne.n	800243c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	08da      	lsrs	r2, r3, #3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3208      	adds	r2, #8
 80023fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002400:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	220f      	movs	r2, #15
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	43db      	mvns	r3, r3
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4013      	ands	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	691a      	ldr	r2, [r3, #16]
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4313      	orrs	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	08da      	lsrs	r2, r3, #3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	3208      	adds	r2, #8
 8002436:	69b9      	ldr	r1, [r7, #24]
 8002438:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	2203      	movs	r2, #3
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	43db      	mvns	r3, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4013      	ands	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 0203 	and.w	r2, r3, #3
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4313      	orrs	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 80a2 	beq.w	80025c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	4b57      	ldr	r3, [pc, #348]	; (80025e0 <HAL_GPIO_Init+0x2e8>)
 8002484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002486:	4a56      	ldr	r2, [pc, #344]	; (80025e0 <HAL_GPIO_Init+0x2e8>)
 8002488:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800248c:	6453      	str	r3, [r2, #68]	; 0x44
 800248e:	4b54      	ldr	r3, [pc, #336]	; (80025e0 <HAL_GPIO_Init+0x2e8>)
 8002490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800249a:	4a52      	ldr	r2, [pc, #328]	; (80025e4 <HAL_GPIO_Init+0x2ec>)
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	089b      	lsrs	r3, r3, #2
 80024a0:	3302      	adds	r3, #2
 80024a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	f003 0303 	and.w	r3, r3, #3
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	220f      	movs	r2, #15
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43db      	mvns	r3, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4013      	ands	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a49      	ldr	r2, [pc, #292]	; (80025e8 <HAL_GPIO_Init+0x2f0>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d019      	beq.n	80024fa <HAL_GPIO_Init+0x202>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a48      	ldr	r2, [pc, #288]	; (80025ec <HAL_GPIO_Init+0x2f4>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d013      	beq.n	80024f6 <HAL_GPIO_Init+0x1fe>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a47      	ldr	r2, [pc, #284]	; (80025f0 <HAL_GPIO_Init+0x2f8>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d00d      	beq.n	80024f2 <HAL_GPIO_Init+0x1fa>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a46      	ldr	r2, [pc, #280]	; (80025f4 <HAL_GPIO_Init+0x2fc>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d007      	beq.n	80024ee <HAL_GPIO_Init+0x1f6>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a45      	ldr	r2, [pc, #276]	; (80025f8 <HAL_GPIO_Init+0x300>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d101      	bne.n	80024ea <HAL_GPIO_Init+0x1f2>
 80024e6:	2304      	movs	r3, #4
 80024e8:	e008      	b.n	80024fc <HAL_GPIO_Init+0x204>
 80024ea:	2307      	movs	r3, #7
 80024ec:	e006      	b.n	80024fc <HAL_GPIO_Init+0x204>
 80024ee:	2303      	movs	r3, #3
 80024f0:	e004      	b.n	80024fc <HAL_GPIO_Init+0x204>
 80024f2:	2302      	movs	r3, #2
 80024f4:	e002      	b.n	80024fc <HAL_GPIO_Init+0x204>
 80024f6:	2301      	movs	r3, #1
 80024f8:	e000      	b.n	80024fc <HAL_GPIO_Init+0x204>
 80024fa:	2300      	movs	r3, #0
 80024fc:	69fa      	ldr	r2, [r7, #28]
 80024fe:	f002 0203 	and.w	r2, r2, #3
 8002502:	0092      	lsls	r2, r2, #2
 8002504:	4093      	lsls	r3, r2
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4313      	orrs	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800250c:	4935      	ldr	r1, [pc, #212]	; (80025e4 <HAL_GPIO_Init+0x2ec>)
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	089b      	lsrs	r3, r3, #2
 8002512:	3302      	adds	r3, #2
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800251a:	4b38      	ldr	r3, [pc, #224]	; (80025fc <HAL_GPIO_Init+0x304>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	43db      	mvns	r3, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4013      	ands	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	4313      	orrs	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800253e:	4a2f      	ldr	r2, [pc, #188]	; (80025fc <HAL_GPIO_Init+0x304>)
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002544:	4b2d      	ldr	r3, [pc, #180]	; (80025fc <HAL_GPIO_Init+0x304>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	43db      	mvns	r3, r3
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4013      	ands	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d003      	beq.n	8002568 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	4313      	orrs	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002568:	4a24      	ldr	r2, [pc, #144]	; (80025fc <HAL_GPIO_Init+0x304>)
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800256e:	4b23      	ldr	r3, [pc, #140]	; (80025fc <HAL_GPIO_Init+0x304>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	43db      	mvns	r3, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4013      	ands	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	4313      	orrs	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002592:	4a1a      	ldr	r2, [pc, #104]	; (80025fc <HAL_GPIO_Init+0x304>)
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002598:	4b18      	ldr	r3, [pc, #96]	; (80025fc <HAL_GPIO_Init+0x304>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	43db      	mvns	r3, r3
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	4013      	ands	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d003      	beq.n	80025bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025bc:	4a0f      	ldr	r2, [pc, #60]	; (80025fc <HAL_GPIO_Init+0x304>)
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	3301      	adds	r3, #1
 80025c6:	61fb      	str	r3, [r7, #28]
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	2b0f      	cmp	r3, #15
 80025cc:	f67f aea2 	bls.w	8002314 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025d0:	bf00      	nop
 80025d2:	bf00      	nop
 80025d4:	3724      	adds	r7, #36	; 0x24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	40023800 	.word	0x40023800
 80025e4:	40013800 	.word	0x40013800
 80025e8:	40020000 	.word	0x40020000
 80025ec:	40020400 	.word	0x40020400
 80025f0:	40020800 	.word	0x40020800
 80025f4:	40020c00 	.word	0x40020c00
 80025f8:	40021000 	.word	0x40021000
 80025fc:	40013c00 	.word	0x40013c00

08002600 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	460b      	mov	r3, r1
 800260a:	807b      	strh	r3, [r7, #2]
 800260c:	4613      	mov	r3, r2
 800260e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002610:	787b      	ldrb	r3, [r7, #1]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002616:	887a      	ldrh	r2, [r7, #2]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800261c:	e003      	b.n	8002626 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800261e:	887b      	ldrh	r3, [r7, #2]
 8002620:	041a      	lsls	r2, r3, #16
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	619a      	str	r2, [r3, #24]
}
 8002626:	bf00      	nop
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
	...

08002634 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e267      	b.n	8002b16 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b00      	cmp	r3, #0
 8002650:	d075      	beq.n	800273e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002652:	4b88      	ldr	r3, [pc, #544]	; (8002874 <HAL_RCC_OscConfig+0x240>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 030c 	and.w	r3, r3, #12
 800265a:	2b04      	cmp	r3, #4
 800265c:	d00c      	beq.n	8002678 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800265e:	4b85      	ldr	r3, [pc, #532]	; (8002874 <HAL_RCC_OscConfig+0x240>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002666:	2b08      	cmp	r3, #8
 8002668:	d112      	bne.n	8002690 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800266a:	4b82      	ldr	r3, [pc, #520]	; (8002874 <HAL_RCC_OscConfig+0x240>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002672:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002676:	d10b      	bne.n	8002690 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002678:	4b7e      	ldr	r3, [pc, #504]	; (8002874 <HAL_RCC_OscConfig+0x240>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d05b      	beq.n	800273c <HAL_RCC_OscConfig+0x108>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d157      	bne.n	800273c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e242      	b.n	8002b16 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002698:	d106      	bne.n	80026a8 <HAL_RCC_OscConfig+0x74>
 800269a:	4b76      	ldr	r3, [pc, #472]	; (8002874 <HAL_RCC_OscConfig+0x240>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a75      	ldr	r2, [pc, #468]	; (8002874 <HAL_RCC_OscConfig+0x240>)
 80026a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026a4:	6013      	str	r3, [r2, #0]
 80026a6:	e01d      	b.n	80026e4 <HAL_RCC_OscConfig+0xb0>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026b0:	d10c      	bne.n	80026cc <HAL_RCC_OscConfig+0x98>
 80026b2:	4b70      	ldr	r3, [pc, #448]	; (8002874 <HAL_RCC_OscConfig+0x240>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a6f      	ldr	r2, [pc, #444]	; (8002874 <HAL_RCC_OscConfig+0x240>)
 80026b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026bc:	6013      	str	r3, [r2, #0]
 80026be:	4b6d      	ldr	r3, [pc, #436]	; (8002874 <HAL_RCC_OscConfig+0x240>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a6c      	ldr	r2, [pc, #432]	; (8002874 <HAL_RCC_OscConfig+0x240>)
 80026c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c8:	6013      	str	r3, [r2, #0]
 80026ca:	e00b      	b.n	80026e4 <HAL_RCC_OscConfig+0xb0>
 80026cc:	4b69      	ldr	r3, [pc, #420]	; (8002874 <HAL_RCC_OscConfig+0x240>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a68      	ldr	r2, [pc, #416]	; (8002874 <HAL_RCC_OscConfig+0x240>)
 80026d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026d6:	6013      	str	r3, [r2, #0]
 80026d8:	4b66      	ldr	r3, [pc, #408]	; (8002874 <HAL_RCC_OscConfig+0x240>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a65      	ldr	r2, [pc, #404]	; (8002874 <HAL_RCC_OscConfig+0x240>)
 80026de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d013      	beq.n	8002714 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ec:	f7ff fcee 	bl	80020cc <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026f2:	e008      	b.n	8002706 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026f4:	f7ff fcea 	bl	80020cc <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b64      	cmp	r3, #100	; 0x64
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e207      	b.n	8002b16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002706:	4b5b      	ldr	r3, [pc, #364]	; (8002874 <HAL_RCC_OscConfig+0x240>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d0f0      	beq.n	80026f4 <HAL_RCC_OscConfig+0xc0>
 8002712:	e014      	b.n	800273e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002714:	f7ff fcda 	bl	80020cc <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800271c:	f7ff fcd6 	bl	80020cc <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b64      	cmp	r3, #100	; 0x64
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e1f3      	b.n	8002b16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800272e:	4b51      	ldr	r3, [pc, #324]	; (8002874 <HAL_RCC_OscConfig+0x240>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1f0      	bne.n	800271c <HAL_RCC_OscConfig+0xe8>
 800273a:	e000      	b.n	800273e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800273c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d063      	beq.n	8002812 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800274a:	4b4a      	ldr	r3, [pc, #296]	; (8002874 <HAL_RCC_OscConfig+0x240>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f003 030c 	and.w	r3, r3, #12
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00b      	beq.n	800276e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002756:	4b47      	ldr	r3, [pc, #284]	; (8002874 <HAL_RCC_OscConfig+0x240>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800275e:	2b08      	cmp	r3, #8
 8002760:	d11c      	bne.n	800279c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002762:	4b44      	ldr	r3, [pc, #272]	; (8002874 <HAL_RCC_OscConfig+0x240>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d116      	bne.n	800279c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800276e:	4b41      	ldr	r3, [pc, #260]	; (8002874 <HAL_RCC_OscConfig+0x240>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d005      	beq.n	8002786 <HAL_RCC_OscConfig+0x152>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d001      	beq.n	8002786 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e1c7      	b.n	8002b16 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002786:	4b3b      	ldr	r3, [pc, #236]	; (8002874 <HAL_RCC_OscConfig+0x240>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4937      	ldr	r1, [pc, #220]	; (8002874 <HAL_RCC_OscConfig+0x240>)
 8002796:	4313      	orrs	r3, r2
 8002798:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800279a:	e03a      	b.n	8002812 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d020      	beq.n	80027e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027a4:	4b34      	ldr	r3, [pc, #208]	; (8002878 <HAL_RCC_OscConfig+0x244>)
 80027a6:	2201      	movs	r2, #1
 80027a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027aa:	f7ff fc8f 	bl	80020cc <HAL_GetTick>
 80027ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b0:	e008      	b.n	80027c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027b2:	f7ff fc8b 	bl	80020cc <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e1a8      	b.n	8002b16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027c4:	4b2b      	ldr	r3, [pc, #172]	; (8002874 <HAL_RCC_OscConfig+0x240>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d0f0      	beq.n	80027b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d0:	4b28      	ldr	r3, [pc, #160]	; (8002874 <HAL_RCC_OscConfig+0x240>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	4925      	ldr	r1, [pc, #148]	; (8002874 <HAL_RCC_OscConfig+0x240>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	600b      	str	r3, [r1, #0]
 80027e4:	e015      	b.n	8002812 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027e6:	4b24      	ldr	r3, [pc, #144]	; (8002878 <HAL_RCC_OscConfig+0x244>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ec:	f7ff fc6e 	bl	80020cc <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027f4:	f7ff fc6a 	bl	80020cc <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e187      	b.n	8002b16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002806:	4b1b      	ldr	r3, [pc, #108]	; (8002874 <HAL_RCC_OscConfig+0x240>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1f0      	bne.n	80027f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0308 	and.w	r3, r3, #8
 800281a:	2b00      	cmp	r3, #0
 800281c:	d036      	beq.n	800288c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d016      	beq.n	8002854 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002826:	4b15      	ldr	r3, [pc, #84]	; (800287c <HAL_RCC_OscConfig+0x248>)
 8002828:	2201      	movs	r2, #1
 800282a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800282c:	f7ff fc4e 	bl	80020cc <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002834:	f7ff fc4a 	bl	80020cc <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e167      	b.n	8002b16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002846:	4b0b      	ldr	r3, [pc, #44]	; (8002874 <HAL_RCC_OscConfig+0x240>)
 8002848:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d0f0      	beq.n	8002834 <HAL_RCC_OscConfig+0x200>
 8002852:	e01b      	b.n	800288c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002854:	4b09      	ldr	r3, [pc, #36]	; (800287c <HAL_RCC_OscConfig+0x248>)
 8002856:	2200      	movs	r2, #0
 8002858:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800285a:	f7ff fc37 	bl	80020cc <HAL_GetTick>
 800285e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002860:	e00e      	b.n	8002880 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002862:	f7ff fc33 	bl	80020cc <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d907      	bls.n	8002880 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e150      	b.n	8002b16 <HAL_RCC_OscConfig+0x4e2>
 8002874:	40023800 	.word	0x40023800
 8002878:	42470000 	.word	0x42470000
 800287c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002880:	4b88      	ldr	r3, [pc, #544]	; (8002aa4 <HAL_RCC_OscConfig+0x470>)
 8002882:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1ea      	bne.n	8002862 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	2b00      	cmp	r3, #0
 8002896:	f000 8097 	beq.w	80029c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800289a:	2300      	movs	r3, #0
 800289c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800289e:	4b81      	ldr	r3, [pc, #516]	; (8002aa4 <HAL_RCC_OscConfig+0x470>)
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d10f      	bne.n	80028ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028aa:	2300      	movs	r3, #0
 80028ac:	60bb      	str	r3, [r7, #8]
 80028ae:	4b7d      	ldr	r3, [pc, #500]	; (8002aa4 <HAL_RCC_OscConfig+0x470>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	4a7c      	ldr	r2, [pc, #496]	; (8002aa4 <HAL_RCC_OscConfig+0x470>)
 80028b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028b8:	6413      	str	r3, [r2, #64]	; 0x40
 80028ba:	4b7a      	ldr	r3, [pc, #488]	; (8002aa4 <HAL_RCC_OscConfig+0x470>)
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c2:	60bb      	str	r3, [r7, #8]
 80028c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028c6:	2301      	movs	r3, #1
 80028c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ca:	4b77      	ldr	r3, [pc, #476]	; (8002aa8 <HAL_RCC_OscConfig+0x474>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d118      	bne.n	8002908 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028d6:	4b74      	ldr	r3, [pc, #464]	; (8002aa8 <HAL_RCC_OscConfig+0x474>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a73      	ldr	r2, [pc, #460]	; (8002aa8 <HAL_RCC_OscConfig+0x474>)
 80028dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028e2:	f7ff fbf3 	bl	80020cc <HAL_GetTick>
 80028e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ea:	f7ff fbef 	bl	80020cc <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e10c      	b.n	8002b16 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028fc:	4b6a      	ldr	r3, [pc, #424]	; (8002aa8 <HAL_RCC_OscConfig+0x474>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0f0      	beq.n	80028ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d106      	bne.n	800291e <HAL_RCC_OscConfig+0x2ea>
 8002910:	4b64      	ldr	r3, [pc, #400]	; (8002aa4 <HAL_RCC_OscConfig+0x470>)
 8002912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002914:	4a63      	ldr	r2, [pc, #396]	; (8002aa4 <HAL_RCC_OscConfig+0x470>)
 8002916:	f043 0301 	orr.w	r3, r3, #1
 800291a:	6713      	str	r3, [r2, #112]	; 0x70
 800291c:	e01c      	b.n	8002958 <HAL_RCC_OscConfig+0x324>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	2b05      	cmp	r3, #5
 8002924:	d10c      	bne.n	8002940 <HAL_RCC_OscConfig+0x30c>
 8002926:	4b5f      	ldr	r3, [pc, #380]	; (8002aa4 <HAL_RCC_OscConfig+0x470>)
 8002928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292a:	4a5e      	ldr	r2, [pc, #376]	; (8002aa4 <HAL_RCC_OscConfig+0x470>)
 800292c:	f043 0304 	orr.w	r3, r3, #4
 8002930:	6713      	str	r3, [r2, #112]	; 0x70
 8002932:	4b5c      	ldr	r3, [pc, #368]	; (8002aa4 <HAL_RCC_OscConfig+0x470>)
 8002934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002936:	4a5b      	ldr	r2, [pc, #364]	; (8002aa4 <HAL_RCC_OscConfig+0x470>)
 8002938:	f043 0301 	orr.w	r3, r3, #1
 800293c:	6713      	str	r3, [r2, #112]	; 0x70
 800293e:	e00b      	b.n	8002958 <HAL_RCC_OscConfig+0x324>
 8002940:	4b58      	ldr	r3, [pc, #352]	; (8002aa4 <HAL_RCC_OscConfig+0x470>)
 8002942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002944:	4a57      	ldr	r2, [pc, #348]	; (8002aa4 <HAL_RCC_OscConfig+0x470>)
 8002946:	f023 0301 	bic.w	r3, r3, #1
 800294a:	6713      	str	r3, [r2, #112]	; 0x70
 800294c:	4b55      	ldr	r3, [pc, #340]	; (8002aa4 <HAL_RCC_OscConfig+0x470>)
 800294e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002950:	4a54      	ldr	r2, [pc, #336]	; (8002aa4 <HAL_RCC_OscConfig+0x470>)
 8002952:	f023 0304 	bic.w	r3, r3, #4
 8002956:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d015      	beq.n	800298c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002960:	f7ff fbb4 	bl	80020cc <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002966:	e00a      	b.n	800297e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002968:	f7ff fbb0 	bl	80020cc <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	f241 3288 	movw	r2, #5000	; 0x1388
 8002976:	4293      	cmp	r3, r2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e0cb      	b.n	8002b16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800297e:	4b49      	ldr	r3, [pc, #292]	; (8002aa4 <HAL_RCC_OscConfig+0x470>)
 8002980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d0ee      	beq.n	8002968 <HAL_RCC_OscConfig+0x334>
 800298a:	e014      	b.n	80029b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800298c:	f7ff fb9e 	bl	80020cc <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002992:	e00a      	b.n	80029aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002994:	f7ff fb9a 	bl	80020cc <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e0b5      	b.n	8002b16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029aa:	4b3e      	ldr	r3, [pc, #248]	; (8002aa4 <HAL_RCC_OscConfig+0x470>)
 80029ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1ee      	bne.n	8002994 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029b6:	7dfb      	ldrb	r3, [r7, #23]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d105      	bne.n	80029c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029bc:	4b39      	ldr	r3, [pc, #228]	; (8002aa4 <HAL_RCC_OscConfig+0x470>)
 80029be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c0:	4a38      	ldr	r2, [pc, #224]	; (8002aa4 <HAL_RCC_OscConfig+0x470>)
 80029c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 80a1 	beq.w	8002b14 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029d2:	4b34      	ldr	r3, [pc, #208]	; (8002aa4 <HAL_RCC_OscConfig+0x470>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f003 030c 	and.w	r3, r3, #12
 80029da:	2b08      	cmp	r3, #8
 80029dc:	d05c      	beq.n	8002a98 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d141      	bne.n	8002a6a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029e6:	4b31      	ldr	r3, [pc, #196]	; (8002aac <HAL_RCC_OscConfig+0x478>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ec:	f7ff fb6e 	bl	80020cc <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029f4:	f7ff fb6a 	bl	80020cc <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e087      	b.n	8002b16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a06:	4b27      	ldr	r3, [pc, #156]	; (8002aa4 <HAL_RCC_OscConfig+0x470>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1f0      	bne.n	80029f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	69da      	ldr	r2, [r3, #28]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a20:	019b      	lsls	r3, r3, #6
 8002a22:	431a      	orrs	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a28:	085b      	lsrs	r3, r3, #1
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	041b      	lsls	r3, r3, #16
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a34:	061b      	lsls	r3, r3, #24
 8002a36:	491b      	ldr	r1, [pc, #108]	; (8002aa4 <HAL_RCC_OscConfig+0x470>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a3c:	4b1b      	ldr	r3, [pc, #108]	; (8002aac <HAL_RCC_OscConfig+0x478>)
 8002a3e:	2201      	movs	r2, #1
 8002a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a42:	f7ff fb43 	bl	80020cc <HAL_GetTick>
 8002a46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a48:	e008      	b.n	8002a5c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a4a:	f7ff fb3f 	bl	80020cc <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d901      	bls.n	8002a5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e05c      	b.n	8002b16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a5c:	4b11      	ldr	r3, [pc, #68]	; (8002aa4 <HAL_RCC_OscConfig+0x470>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d0f0      	beq.n	8002a4a <HAL_RCC_OscConfig+0x416>
 8002a68:	e054      	b.n	8002b14 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a6a:	4b10      	ldr	r3, [pc, #64]	; (8002aac <HAL_RCC_OscConfig+0x478>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a70:	f7ff fb2c 	bl	80020cc <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a78:	f7ff fb28 	bl	80020cc <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e045      	b.n	8002b16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a8a:	4b06      	ldr	r3, [pc, #24]	; (8002aa4 <HAL_RCC_OscConfig+0x470>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1f0      	bne.n	8002a78 <HAL_RCC_OscConfig+0x444>
 8002a96:	e03d      	b.n	8002b14 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d107      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e038      	b.n	8002b16 <HAL_RCC_OscConfig+0x4e2>
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	40007000 	.word	0x40007000
 8002aac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ab0:	4b1b      	ldr	r3, [pc, #108]	; (8002b20 <HAL_RCC_OscConfig+0x4ec>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d028      	beq.n	8002b10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d121      	bne.n	8002b10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d11a      	bne.n	8002b10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ae6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d111      	bne.n	8002b10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af6:	085b      	lsrs	r3, r3, #1
 8002af8:	3b01      	subs	r3, #1
 8002afa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d107      	bne.n	8002b10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d001      	beq.n	8002b14 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e000      	b.n	8002b16 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3718      	adds	r7, #24
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	40023800 	.word	0x40023800

08002b24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e0cc      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b38:	4b68      	ldr	r3, [pc, #416]	; (8002cdc <HAL_RCC_ClockConfig+0x1b8>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d90c      	bls.n	8002b60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b46:	4b65      	ldr	r3, [pc, #404]	; (8002cdc <HAL_RCC_ClockConfig+0x1b8>)
 8002b48:	683a      	ldr	r2, [r7, #0]
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b4e:	4b63      	ldr	r3, [pc, #396]	; (8002cdc <HAL_RCC_ClockConfig+0x1b8>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0307 	and.w	r3, r3, #7
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d001      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e0b8      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d020      	beq.n	8002bae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0304 	and.w	r3, r3, #4
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d005      	beq.n	8002b84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b78:	4b59      	ldr	r3, [pc, #356]	; (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	4a58      	ldr	r2, [pc, #352]	; (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0308 	and.w	r3, r3, #8
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d005      	beq.n	8002b9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b90:	4b53      	ldr	r3, [pc, #332]	; (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	4a52      	ldr	r2, [pc, #328]	; (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b9c:	4b50      	ldr	r3, [pc, #320]	; (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	494d      	ldr	r1, [pc, #308]	; (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d044      	beq.n	8002c44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d107      	bne.n	8002bd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bc2:	4b47      	ldr	r3, [pc, #284]	; (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d119      	bne.n	8002c02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e07f      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d003      	beq.n	8002be2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bde:	2b03      	cmp	r3, #3
 8002be0:	d107      	bne.n	8002bf2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002be2:	4b3f      	ldr	r3, [pc, #252]	; (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d109      	bne.n	8002c02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e06f      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bf2:	4b3b      	ldr	r3, [pc, #236]	; (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e067      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c02:	4b37      	ldr	r3, [pc, #220]	; (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f023 0203 	bic.w	r2, r3, #3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	4934      	ldr	r1, [pc, #208]	; (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c14:	f7ff fa5a 	bl	80020cc <HAL_GetTick>
 8002c18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c1a:	e00a      	b.n	8002c32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c1c:	f7ff fa56 	bl	80020cc <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e04f      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c32:	4b2b      	ldr	r3, [pc, #172]	; (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 020c 	and.w	r2, r3, #12
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d1eb      	bne.n	8002c1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c44:	4b25      	ldr	r3, [pc, #148]	; (8002cdc <HAL_RCC_ClockConfig+0x1b8>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0307 	and.w	r3, r3, #7
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d20c      	bcs.n	8002c6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c52:	4b22      	ldr	r3, [pc, #136]	; (8002cdc <HAL_RCC_ClockConfig+0x1b8>)
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c5a:	4b20      	ldr	r3, [pc, #128]	; (8002cdc <HAL_RCC_ClockConfig+0x1b8>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d001      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e032      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d008      	beq.n	8002c8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c78:	4b19      	ldr	r3, [pc, #100]	; (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	4916      	ldr	r1, [pc, #88]	; (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0308 	and.w	r3, r3, #8
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d009      	beq.n	8002caa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c96:	4b12      	ldr	r3, [pc, #72]	; (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	490e      	ldr	r1, [pc, #56]	; (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002caa:	f000 f821 	bl	8002cf0 <HAL_RCC_GetSysClockFreq>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	091b      	lsrs	r3, r3, #4
 8002cb6:	f003 030f 	and.w	r3, r3, #15
 8002cba:	490a      	ldr	r1, [pc, #40]	; (8002ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8002cbc:	5ccb      	ldrb	r3, [r1, r3]
 8002cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8002cc2:	4a09      	ldr	r2, [pc, #36]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002cc6:	4b09      	ldr	r3, [pc, #36]	; (8002cec <HAL_RCC_ClockConfig+0x1c8>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7ff f9ba 	bl	8002044 <HAL_InitTick>

  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40023c00 	.word	0x40023c00
 8002ce0:	40023800 	.word	0x40023800
 8002ce4:	08006828 	.word	0x08006828
 8002ce8:	20000000 	.word	0x20000000
 8002cec:	20000004 	.word	0x20000004

08002cf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cf4:	b090      	sub	sp, #64	; 0x40
 8002cf6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	637b      	str	r3, [r7, #52]	; 0x34
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d00:	2300      	movs	r3, #0
 8002d02:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002d04:	2300      	movs	r3, #0
 8002d06:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d08:	4b59      	ldr	r3, [pc, #356]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f003 030c 	and.w	r3, r3, #12
 8002d10:	2b08      	cmp	r3, #8
 8002d12:	d00d      	beq.n	8002d30 <HAL_RCC_GetSysClockFreq+0x40>
 8002d14:	2b08      	cmp	r3, #8
 8002d16:	f200 80a1 	bhi.w	8002e5c <HAL_RCC_GetSysClockFreq+0x16c>
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d002      	beq.n	8002d24 <HAL_RCC_GetSysClockFreq+0x34>
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	d003      	beq.n	8002d2a <HAL_RCC_GetSysClockFreq+0x3a>
 8002d22:	e09b      	b.n	8002e5c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d24:	4b53      	ldr	r3, [pc, #332]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d26:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002d28:	e09b      	b.n	8002e62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d2a:	4b53      	ldr	r3, [pc, #332]	; (8002e78 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d2c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d2e:	e098      	b.n	8002e62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d30:	4b4f      	ldr	r3, [pc, #316]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d38:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d3a:	4b4d      	ldr	r3, [pc, #308]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d028      	beq.n	8002d98 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d46:	4b4a      	ldr	r3, [pc, #296]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	099b      	lsrs	r3, r3, #6
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	623b      	str	r3, [r7, #32]
 8002d50:	627a      	str	r2, [r7, #36]	; 0x24
 8002d52:	6a3b      	ldr	r3, [r7, #32]
 8002d54:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d58:	2100      	movs	r1, #0
 8002d5a:	4b47      	ldr	r3, [pc, #284]	; (8002e78 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d5c:	fb03 f201 	mul.w	r2, r3, r1
 8002d60:	2300      	movs	r3, #0
 8002d62:	fb00 f303 	mul.w	r3, r0, r3
 8002d66:	4413      	add	r3, r2
 8002d68:	4a43      	ldr	r2, [pc, #268]	; (8002e78 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d6a:	fba0 1202 	umull	r1, r2, r0, r2
 8002d6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d70:	460a      	mov	r2, r1
 8002d72:	62ba      	str	r2, [r7, #40]	; 0x28
 8002d74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d76:	4413      	add	r3, r2
 8002d78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	61bb      	str	r3, [r7, #24]
 8002d80:	61fa      	str	r2, [r7, #28]
 8002d82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d86:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002d8a:	f7fd ff65 	bl	8000c58 <__aeabi_uldivmod>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	460b      	mov	r3, r1
 8002d92:	4613      	mov	r3, r2
 8002d94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d96:	e053      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d98:	4b35      	ldr	r3, [pc, #212]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	099b      	lsrs	r3, r3, #6
 8002d9e:	2200      	movs	r2, #0
 8002da0:	613b      	str	r3, [r7, #16]
 8002da2:	617a      	str	r2, [r7, #20]
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002daa:	f04f 0b00 	mov.w	fp, #0
 8002dae:	4652      	mov	r2, sl
 8002db0:	465b      	mov	r3, fp
 8002db2:	f04f 0000 	mov.w	r0, #0
 8002db6:	f04f 0100 	mov.w	r1, #0
 8002dba:	0159      	lsls	r1, r3, #5
 8002dbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dc0:	0150      	lsls	r0, r2, #5
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	ebb2 080a 	subs.w	r8, r2, sl
 8002dca:	eb63 090b 	sbc.w	r9, r3, fp
 8002dce:	f04f 0200 	mov.w	r2, #0
 8002dd2:	f04f 0300 	mov.w	r3, #0
 8002dd6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002dda:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002dde:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002de2:	ebb2 0408 	subs.w	r4, r2, r8
 8002de6:	eb63 0509 	sbc.w	r5, r3, r9
 8002dea:	f04f 0200 	mov.w	r2, #0
 8002dee:	f04f 0300 	mov.w	r3, #0
 8002df2:	00eb      	lsls	r3, r5, #3
 8002df4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002df8:	00e2      	lsls	r2, r4, #3
 8002dfa:	4614      	mov	r4, r2
 8002dfc:	461d      	mov	r5, r3
 8002dfe:	eb14 030a 	adds.w	r3, r4, sl
 8002e02:	603b      	str	r3, [r7, #0]
 8002e04:	eb45 030b 	adc.w	r3, r5, fp
 8002e08:	607b      	str	r3, [r7, #4]
 8002e0a:	f04f 0200 	mov.w	r2, #0
 8002e0e:	f04f 0300 	mov.w	r3, #0
 8002e12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e16:	4629      	mov	r1, r5
 8002e18:	028b      	lsls	r3, r1, #10
 8002e1a:	4621      	mov	r1, r4
 8002e1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e20:	4621      	mov	r1, r4
 8002e22:	028a      	lsls	r2, r1, #10
 8002e24:	4610      	mov	r0, r2
 8002e26:	4619      	mov	r1, r3
 8002e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	60bb      	str	r3, [r7, #8]
 8002e2e:	60fa      	str	r2, [r7, #12]
 8002e30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e34:	f7fd ff10 	bl	8000c58 <__aeabi_uldivmod>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e40:	4b0b      	ldr	r3, [pc, #44]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	0c1b      	lsrs	r3, r3, #16
 8002e46:	f003 0303 	and.w	r3, r3, #3
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002e50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e58:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e5a:	e002      	b.n	8002e62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e5c:	4b05      	ldr	r3, [pc, #20]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e5e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3740      	adds	r7, #64	; 0x40
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e6e:	bf00      	nop
 8002e70:	40023800 	.word	0x40023800
 8002e74:	00f42400 	.word	0x00f42400
 8002e78:	00b71b00 	.word	0x00b71b00

08002e7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e80:	4b03      	ldr	r3, [pc, #12]	; (8002e90 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e82:	681b      	ldr	r3, [r3, #0]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	20000000 	.word	0x20000000

08002e94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e98:	f7ff fff0 	bl	8002e7c <HAL_RCC_GetHCLKFreq>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	4b05      	ldr	r3, [pc, #20]	; (8002eb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	0a9b      	lsrs	r3, r3, #10
 8002ea4:	f003 0307 	and.w	r3, r3, #7
 8002ea8:	4903      	ldr	r1, [pc, #12]	; (8002eb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002eaa:	5ccb      	ldrb	r3, [r1, r3]
 8002eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	08006838 	.word	0x08006838

08002ebc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ec0:	f7ff ffdc 	bl	8002e7c <HAL_RCC_GetHCLKFreq>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	4b05      	ldr	r3, [pc, #20]	; (8002edc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	0b5b      	lsrs	r3, r3, #13
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	4903      	ldr	r1, [pc, #12]	; (8002ee0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ed2:	5ccb      	ldrb	r3, [r1, r3]
 8002ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40023800 	.word	0x40023800
 8002ee0:	08006838 	.word	0x08006838

08002ee4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e07b      	b.n	8002fee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d108      	bne.n	8002f10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f06:	d009      	beq.n	8002f1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	61da      	str	r2, [r3, #28]
 8002f0e:	e005      	b.n	8002f1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d106      	bne.n	8002f3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7fe fec2 	bl	8001cc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2202      	movs	r2, #2
 8002f40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f52:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002f64:	431a      	orrs	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	431a      	orrs	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	431a      	orrs	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a1b      	ldr	r3, [r3, #32]
 8002f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa0:	ea42 0103 	orr.w	r1, r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	0c1b      	lsrs	r3, r3, #16
 8002fba:	f003 0104 	and.w	r1, r3, #4
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc2:	f003 0210 	and.w	r2, r3, #16
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	69da      	ldr	r2, [r3, #28]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fdc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b08c      	sub	sp, #48	; 0x30
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	60f8      	str	r0, [r7, #12]
 8002ffe:	60b9      	str	r1, [r7, #8]
 8003000:	607a      	str	r2, [r7, #4]
 8003002:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003004:	2301      	movs	r3, #1
 8003006:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003008:	2300      	movs	r3, #0
 800300a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003014:	2b01      	cmp	r3, #1
 8003016:	d101      	bne.n	800301c <HAL_SPI_TransmitReceive+0x26>
 8003018:	2302      	movs	r3, #2
 800301a:	e18a      	b.n	8003332 <HAL_SPI_TransmitReceive+0x33c>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003024:	f7ff f852 	bl	80020cc <HAL_GetTick>
 8003028:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003030:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800303a:	887b      	ldrh	r3, [r7, #2]
 800303c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800303e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003042:	2b01      	cmp	r3, #1
 8003044:	d00f      	beq.n	8003066 <HAL_SPI_TransmitReceive+0x70>
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800304c:	d107      	bne.n	800305e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d103      	bne.n	800305e <HAL_SPI_TransmitReceive+0x68>
 8003056:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800305a:	2b04      	cmp	r3, #4
 800305c:	d003      	beq.n	8003066 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800305e:	2302      	movs	r3, #2
 8003060:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003064:	e15b      	b.n	800331e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d005      	beq.n	8003078 <HAL_SPI_TransmitReceive+0x82>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d002      	beq.n	8003078 <HAL_SPI_TransmitReceive+0x82>
 8003072:	887b      	ldrh	r3, [r7, #2]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d103      	bne.n	8003080 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800307e:	e14e      	b.n	800331e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003086:	b2db      	uxtb	r3, r3
 8003088:	2b04      	cmp	r3, #4
 800308a:	d003      	beq.n	8003094 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2205      	movs	r2, #5
 8003090:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	887a      	ldrh	r2, [r7, #2]
 80030a4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	887a      	ldrh	r2, [r7, #2]
 80030aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	68ba      	ldr	r2, [r7, #8]
 80030b0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	887a      	ldrh	r2, [r7, #2]
 80030b6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	887a      	ldrh	r2, [r7, #2]
 80030bc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d4:	2b40      	cmp	r3, #64	; 0x40
 80030d6:	d007      	beq.n	80030e8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030f0:	d178      	bne.n	80031e4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d002      	beq.n	8003100 <HAL_SPI_TransmitReceive+0x10a>
 80030fa:	8b7b      	ldrh	r3, [r7, #26]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d166      	bne.n	80031ce <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003104:	881a      	ldrh	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003110:	1c9a      	adds	r2, r3, #2
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800311a:	b29b      	uxth	r3, r3
 800311c:	3b01      	subs	r3, #1
 800311e:	b29a      	uxth	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003124:	e053      	b.n	80031ce <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b02      	cmp	r3, #2
 8003132:	d11b      	bne.n	800316c <HAL_SPI_TransmitReceive+0x176>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003138:	b29b      	uxth	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d016      	beq.n	800316c <HAL_SPI_TransmitReceive+0x176>
 800313e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003140:	2b01      	cmp	r3, #1
 8003142:	d113      	bne.n	800316c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003148:	881a      	ldrh	r2, [r3, #0]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003154:	1c9a      	adds	r2, r3, #2
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800315e:	b29b      	uxth	r3, r3
 8003160:	3b01      	subs	r3, #1
 8003162:	b29a      	uxth	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003168:	2300      	movs	r3, #0
 800316a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b01      	cmp	r3, #1
 8003178:	d119      	bne.n	80031ae <HAL_SPI_TransmitReceive+0x1b8>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800317e:	b29b      	uxth	r3, r3
 8003180:	2b00      	cmp	r3, #0
 8003182:	d014      	beq.n	80031ae <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68da      	ldr	r2, [r3, #12]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800318e:	b292      	uxth	r2, r2
 8003190:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003196:	1c9a      	adds	r2, r3, #2
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	3b01      	subs	r3, #1
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80031aa:	2301      	movs	r3, #1
 80031ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80031ae:	f7fe ff8d 	bl	80020cc <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d807      	bhi.n	80031ce <HAL_SPI_TransmitReceive+0x1d8>
 80031be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c4:	d003      	beq.n	80031ce <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80031cc:	e0a7      	b.n	800331e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1a6      	bne.n	8003126 <HAL_SPI_TransmitReceive+0x130>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031dc:	b29b      	uxth	r3, r3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1a1      	bne.n	8003126 <HAL_SPI_TransmitReceive+0x130>
 80031e2:	e07c      	b.n	80032de <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d002      	beq.n	80031f2 <HAL_SPI_TransmitReceive+0x1fc>
 80031ec:	8b7b      	ldrh	r3, [r7, #26]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d16b      	bne.n	80032ca <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	330c      	adds	r3, #12
 80031fc:	7812      	ldrb	r2, [r2, #0]
 80031fe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003204:	1c5a      	adds	r2, r3, #1
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800320e:	b29b      	uxth	r3, r3
 8003210:	3b01      	subs	r3, #1
 8003212:	b29a      	uxth	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003218:	e057      	b.n	80032ca <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b02      	cmp	r3, #2
 8003226:	d11c      	bne.n	8003262 <HAL_SPI_TransmitReceive+0x26c>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800322c:	b29b      	uxth	r3, r3
 800322e:	2b00      	cmp	r3, #0
 8003230:	d017      	beq.n	8003262 <HAL_SPI_TransmitReceive+0x26c>
 8003232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003234:	2b01      	cmp	r3, #1
 8003236:	d114      	bne.n	8003262 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	330c      	adds	r3, #12
 8003242:	7812      	ldrb	r2, [r2, #0]
 8003244:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324a:	1c5a      	adds	r2, r3, #1
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003254:	b29b      	uxth	r3, r3
 8003256:	3b01      	subs	r3, #1
 8003258:	b29a      	uxth	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800325e:	2300      	movs	r3, #0
 8003260:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	2b01      	cmp	r3, #1
 800326e:	d119      	bne.n	80032a4 <HAL_SPI_TransmitReceive+0x2ae>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003274:	b29b      	uxth	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d014      	beq.n	80032a4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68da      	ldr	r2, [r3, #12]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003284:	b2d2      	uxtb	r2, r2
 8003286:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328c:	1c5a      	adds	r2, r3, #1
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003296:	b29b      	uxth	r3, r3
 8003298:	3b01      	subs	r3, #1
 800329a:	b29a      	uxth	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032a0:	2301      	movs	r3, #1
 80032a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80032a4:	f7fe ff12 	bl	80020cc <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d803      	bhi.n	80032bc <HAL_SPI_TransmitReceive+0x2c6>
 80032b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ba:	d102      	bne.n	80032c2 <HAL_SPI_TransmitReceive+0x2cc>
 80032bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d103      	bne.n	80032ca <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80032c8:	e029      	b.n	800331e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1a2      	bne.n	800321a <HAL_SPI_TransmitReceive+0x224>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032d8:	b29b      	uxth	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d19d      	bne.n	800321a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f000 f8b2 	bl	800344c <SPI_EndRxTxTransaction>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d006      	beq.n	80032fc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2220      	movs	r2, #32
 80032f8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80032fa:	e010      	b.n	800331e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d10b      	bne.n	800331c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003304:	2300      	movs	r3, #0
 8003306:	617b      	str	r3, [r7, #20]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	617b      	str	r3, [r7, #20]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	617b      	str	r3, [r7, #20]
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	e000      	b.n	800331e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800331c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2201      	movs	r2, #1
 8003322:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800332e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003332:	4618      	mov	r0, r3
 8003334:	3730      	adds	r7, #48	; 0x30
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
	...

0800333c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b088      	sub	sp, #32
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	603b      	str	r3, [r7, #0]
 8003348:	4613      	mov	r3, r2
 800334a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800334c:	f7fe febe 	bl	80020cc <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003354:	1a9b      	subs	r3, r3, r2
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	4413      	add	r3, r2
 800335a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800335c:	f7fe feb6 	bl	80020cc <HAL_GetTick>
 8003360:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003362:	4b39      	ldr	r3, [pc, #228]	; (8003448 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	015b      	lsls	r3, r3, #5
 8003368:	0d1b      	lsrs	r3, r3, #20
 800336a:	69fa      	ldr	r2, [r7, #28]
 800336c:	fb02 f303 	mul.w	r3, r2, r3
 8003370:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003372:	e054      	b.n	800341e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337a:	d050      	beq.n	800341e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800337c:	f7fe fea6 	bl	80020cc <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	69fa      	ldr	r2, [r7, #28]
 8003388:	429a      	cmp	r2, r3
 800338a:	d902      	bls.n	8003392 <SPI_WaitFlagStateUntilTimeout+0x56>
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d13d      	bne.n	800340e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	685a      	ldr	r2, [r3, #4]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80033a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033aa:	d111      	bne.n	80033d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033b4:	d004      	beq.n	80033c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033be:	d107      	bne.n	80033d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033d8:	d10f      	bne.n	80033fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033e8:	601a      	str	r2, [r3, #0]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e017      	b.n	800343e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d101      	bne.n	8003418 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003414:	2300      	movs	r3, #0
 8003416:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	3b01      	subs	r3, #1
 800341c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	4013      	ands	r3, r2
 8003428:	68ba      	ldr	r2, [r7, #8]
 800342a:	429a      	cmp	r2, r3
 800342c:	bf0c      	ite	eq
 800342e:	2301      	moveq	r3, #1
 8003430:	2300      	movne	r3, #0
 8003432:	b2db      	uxtb	r3, r3
 8003434:	461a      	mov	r2, r3
 8003436:	79fb      	ldrb	r3, [r7, #7]
 8003438:	429a      	cmp	r2, r3
 800343a:	d19b      	bne.n	8003374 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3720      	adds	r7, #32
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	20000000 	.word	0x20000000

0800344c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b088      	sub	sp, #32
 8003450:	af02      	add	r7, sp, #8
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003458:	4b1b      	ldr	r3, [pc, #108]	; (80034c8 <SPI_EndRxTxTransaction+0x7c>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a1b      	ldr	r2, [pc, #108]	; (80034cc <SPI_EndRxTxTransaction+0x80>)
 800345e:	fba2 2303 	umull	r2, r3, r2, r3
 8003462:	0d5b      	lsrs	r3, r3, #21
 8003464:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003468:	fb02 f303 	mul.w	r3, r2, r3
 800346c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003476:	d112      	bne.n	800349e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	9300      	str	r3, [sp, #0]
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	2200      	movs	r2, #0
 8003480:	2180      	movs	r1, #128	; 0x80
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	f7ff ff5a 	bl	800333c <SPI_WaitFlagStateUntilTimeout>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d016      	beq.n	80034bc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003492:	f043 0220 	orr.w	r2, r3, #32
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e00f      	b.n	80034be <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00a      	beq.n	80034ba <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	3b01      	subs	r3, #1
 80034a8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b4:	2b80      	cmp	r3, #128	; 0x80
 80034b6:	d0f2      	beq.n	800349e <SPI_EndRxTxTransaction+0x52>
 80034b8:	e000      	b.n	80034bc <SPI_EndRxTxTransaction+0x70>
        break;
 80034ba:	bf00      	nop
  }

  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3718      	adds	r7, #24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	20000000 	.word	0x20000000
 80034cc:	165e9f81 	.word	0x165e9f81

080034d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e03f      	b.n	8003562 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d106      	bne.n	80034fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7fe fc2a 	bl	8001d50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2224      	movs	r2, #36	; 0x24
 8003500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68da      	ldr	r2, [r3, #12]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003512:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 f929 	bl	800376c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	691a      	ldr	r2, [r3, #16]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003528:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	695a      	ldr	r2, [r3, #20]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003538:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68da      	ldr	r2, [r3, #12]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003548:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2220      	movs	r2, #32
 8003554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2220      	movs	r2, #32
 800355c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b08a      	sub	sp, #40	; 0x28
 800356e:	af02      	add	r7, sp, #8
 8003570:	60f8      	str	r0, [r7, #12]
 8003572:	60b9      	str	r1, [r7, #8]
 8003574:	603b      	str	r3, [r7, #0]
 8003576:	4613      	mov	r3, r2
 8003578:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800357a:	2300      	movs	r3, #0
 800357c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b20      	cmp	r3, #32
 8003588:	d17c      	bne.n	8003684 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d002      	beq.n	8003596 <HAL_UART_Transmit+0x2c>
 8003590:	88fb      	ldrh	r3, [r7, #6]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e075      	b.n	8003686 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d101      	bne.n	80035a8 <HAL_UART_Transmit+0x3e>
 80035a4:	2302      	movs	r3, #2
 80035a6:	e06e      	b.n	8003686 <HAL_UART_Transmit+0x11c>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2221      	movs	r2, #33	; 0x21
 80035ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035be:	f7fe fd85 	bl	80020cc <HAL_GetTick>
 80035c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	88fa      	ldrh	r2, [r7, #6]
 80035c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	88fa      	ldrh	r2, [r7, #6]
 80035ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035d8:	d108      	bne.n	80035ec <HAL_UART_Transmit+0x82>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d104      	bne.n	80035ec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80035e2:	2300      	movs	r3, #0
 80035e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	61bb      	str	r3, [r7, #24]
 80035ea:	e003      	b.n	80035f4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035f0:	2300      	movs	r3, #0
 80035f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80035fc:	e02a      	b.n	8003654 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	9300      	str	r3, [sp, #0]
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	2200      	movs	r2, #0
 8003606:	2180      	movs	r1, #128	; 0x80
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	f000 f840 	bl	800368e <UART_WaitOnFlagUntilTimeout>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d001      	beq.n	8003618 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e036      	b.n	8003686 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10b      	bne.n	8003636 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	881b      	ldrh	r3, [r3, #0]
 8003622:	461a      	mov	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800362c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	3302      	adds	r3, #2
 8003632:	61bb      	str	r3, [r7, #24]
 8003634:	e007      	b.n	8003646 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	781a      	ldrb	r2, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	3301      	adds	r3, #1
 8003644:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800364a:	b29b      	uxth	r3, r3
 800364c:	3b01      	subs	r3, #1
 800364e:	b29a      	uxth	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003658:	b29b      	uxth	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1cf      	bne.n	80035fe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	9300      	str	r3, [sp, #0]
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	2200      	movs	r2, #0
 8003666:	2140      	movs	r1, #64	; 0x40
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	f000 f810 	bl	800368e <UART_WaitOnFlagUntilTimeout>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d001      	beq.n	8003678 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e006      	b.n	8003686 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2220      	movs	r2, #32
 800367c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003680:	2300      	movs	r3, #0
 8003682:	e000      	b.n	8003686 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003684:	2302      	movs	r3, #2
  }
}
 8003686:	4618      	mov	r0, r3
 8003688:	3720      	adds	r7, #32
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800368e:	b580      	push	{r7, lr}
 8003690:	b090      	sub	sp, #64	; 0x40
 8003692:	af00      	add	r7, sp, #0
 8003694:	60f8      	str	r0, [r7, #12]
 8003696:	60b9      	str	r1, [r7, #8]
 8003698:	603b      	str	r3, [r7, #0]
 800369a:	4613      	mov	r3, r2
 800369c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800369e:	e050      	b.n	8003742 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a6:	d04c      	beq.n	8003742 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80036a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d007      	beq.n	80036be <UART_WaitOnFlagUntilTimeout+0x30>
 80036ae:	f7fe fd0d 	bl	80020cc <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d241      	bcs.n	8003742 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	330c      	adds	r3, #12
 80036c4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c8:	e853 3f00 	ldrex	r3, [r3]
 80036cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80036d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	330c      	adds	r3, #12
 80036dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036de:	637a      	str	r2, [r7, #52]	; 0x34
 80036e0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036e6:	e841 2300 	strex	r3, r2, [r1]
 80036ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80036ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1e5      	bne.n	80036be <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	3314      	adds	r3, #20
 80036f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	e853 3f00 	ldrex	r3, [r3]
 8003700:	613b      	str	r3, [r7, #16]
   return(result);
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	f023 0301 	bic.w	r3, r3, #1
 8003708:	63bb      	str	r3, [r7, #56]	; 0x38
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	3314      	adds	r3, #20
 8003710:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003712:	623a      	str	r2, [r7, #32]
 8003714:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003716:	69f9      	ldr	r1, [r7, #28]
 8003718:	6a3a      	ldr	r2, [r7, #32]
 800371a:	e841 2300 	strex	r3, r2, [r1]
 800371e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1e5      	bne.n	80036f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2220      	movs	r2, #32
 800372a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2220      	movs	r2, #32
 8003732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e00f      	b.n	8003762 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	4013      	ands	r3, r2
 800374c:	68ba      	ldr	r2, [r7, #8]
 800374e:	429a      	cmp	r2, r3
 8003750:	bf0c      	ite	eq
 8003752:	2301      	moveq	r3, #1
 8003754:	2300      	movne	r3, #0
 8003756:	b2db      	uxtb	r3, r3
 8003758:	461a      	mov	r2, r3
 800375a:	79fb      	ldrb	r3, [r7, #7]
 800375c:	429a      	cmp	r2, r3
 800375e:	d09f      	beq.n	80036a0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3740      	adds	r7, #64	; 0x40
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
	...

0800376c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800376c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003770:	b0c0      	sub	sp, #256	; 0x100
 8003772:	af00      	add	r7, sp, #0
 8003774:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003788:	68d9      	ldr	r1, [r3, #12]
 800378a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	ea40 0301 	orr.w	r3, r0, r1
 8003794:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800379a:	689a      	ldr	r2, [r3, #8]
 800379c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	431a      	orrs	r2, r3
 80037a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	431a      	orrs	r2, r3
 80037ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b0:	69db      	ldr	r3, [r3, #28]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80037b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80037c4:	f021 010c 	bic.w	r1, r1, #12
 80037c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80037d2:	430b      	orrs	r3, r1
 80037d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80037e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e6:	6999      	ldr	r1, [r3, #24]
 80037e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	ea40 0301 	orr.w	r3, r0, r1
 80037f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	4b8f      	ldr	r3, [pc, #572]	; (8003a38 <UART_SetConfig+0x2cc>)
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d005      	beq.n	800380c <UART_SetConfig+0xa0>
 8003800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	4b8d      	ldr	r3, [pc, #564]	; (8003a3c <UART_SetConfig+0x2d0>)
 8003808:	429a      	cmp	r2, r3
 800380a:	d104      	bne.n	8003816 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800380c:	f7ff fb56 	bl	8002ebc <HAL_RCC_GetPCLK2Freq>
 8003810:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003814:	e003      	b.n	800381e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003816:	f7ff fb3d 	bl	8002e94 <HAL_RCC_GetPCLK1Freq>
 800381a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800381e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003822:	69db      	ldr	r3, [r3, #28]
 8003824:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003828:	f040 810c 	bne.w	8003a44 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800382c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003830:	2200      	movs	r2, #0
 8003832:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003836:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800383a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800383e:	4622      	mov	r2, r4
 8003840:	462b      	mov	r3, r5
 8003842:	1891      	adds	r1, r2, r2
 8003844:	65b9      	str	r1, [r7, #88]	; 0x58
 8003846:	415b      	adcs	r3, r3
 8003848:	65fb      	str	r3, [r7, #92]	; 0x5c
 800384a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800384e:	4621      	mov	r1, r4
 8003850:	eb12 0801 	adds.w	r8, r2, r1
 8003854:	4629      	mov	r1, r5
 8003856:	eb43 0901 	adc.w	r9, r3, r1
 800385a:	f04f 0200 	mov.w	r2, #0
 800385e:	f04f 0300 	mov.w	r3, #0
 8003862:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003866:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800386a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800386e:	4690      	mov	r8, r2
 8003870:	4699      	mov	r9, r3
 8003872:	4623      	mov	r3, r4
 8003874:	eb18 0303 	adds.w	r3, r8, r3
 8003878:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800387c:	462b      	mov	r3, r5
 800387e:	eb49 0303 	adc.w	r3, r9, r3
 8003882:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003892:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003896:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800389a:	460b      	mov	r3, r1
 800389c:	18db      	adds	r3, r3, r3
 800389e:	653b      	str	r3, [r7, #80]	; 0x50
 80038a0:	4613      	mov	r3, r2
 80038a2:	eb42 0303 	adc.w	r3, r2, r3
 80038a6:	657b      	str	r3, [r7, #84]	; 0x54
 80038a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80038ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80038b0:	f7fd f9d2 	bl	8000c58 <__aeabi_uldivmod>
 80038b4:	4602      	mov	r2, r0
 80038b6:	460b      	mov	r3, r1
 80038b8:	4b61      	ldr	r3, [pc, #388]	; (8003a40 <UART_SetConfig+0x2d4>)
 80038ba:	fba3 2302 	umull	r2, r3, r3, r2
 80038be:	095b      	lsrs	r3, r3, #5
 80038c0:	011c      	lsls	r4, r3, #4
 80038c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038c6:	2200      	movs	r2, #0
 80038c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80038cc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80038d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80038d4:	4642      	mov	r2, r8
 80038d6:	464b      	mov	r3, r9
 80038d8:	1891      	adds	r1, r2, r2
 80038da:	64b9      	str	r1, [r7, #72]	; 0x48
 80038dc:	415b      	adcs	r3, r3
 80038de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80038e4:	4641      	mov	r1, r8
 80038e6:	eb12 0a01 	adds.w	sl, r2, r1
 80038ea:	4649      	mov	r1, r9
 80038ec:	eb43 0b01 	adc.w	fp, r3, r1
 80038f0:	f04f 0200 	mov.w	r2, #0
 80038f4:	f04f 0300 	mov.w	r3, #0
 80038f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80038fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003900:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003904:	4692      	mov	sl, r2
 8003906:	469b      	mov	fp, r3
 8003908:	4643      	mov	r3, r8
 800390a:	eb1a 0303 	adds.w	r3, sl, r3
 800390e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003912:	464b      	mov	r3, r9
 8003914:	eb4b 0303 	adc.w	r3, fp, r3
 8003918:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800391c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003928:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800392c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003930:	460b      	mov	r3, r1
 8003932:	18db      	adds	r3, r3, r3
 8003934:	643b      	str	r3, [r7, #64]	; 0x40
 8003936:	4613      	mov	r3, r2
 8003938:	eb42 0303 	adc.w	r3, r2, r3
 800393c:	647b      	str	r3, [r7, #68]	; 0x44
 800393e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003942:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003946:	f7fd f987 	bl	8000c58 <__aeabi_uldivmod>
 800394a:	4602      	mov	r2, r0
 800394c:	460b      	mov	r3, r1
 800394e:	4611      	mov	r1, r2
 8003950:	4b3b      	ldr	r3, [pc, #236]	; (8003a40 <UART_SetConfig+0x2d4>)
 8003952:	fba3 2301 	umull	r2, r3, r3, r1
 8003956:	095b      	lsrs	r3, r3, #5
 8003958:	2264      	movs	r2, #100	; 0x64
 800395a:	fb02 f303 	mul.w	r3, r2, r3
 800395e:	1acb      	subs	r3, r1, r3
 8003960:	00db      	lsls	r3, r3, #3
 8003962:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003966:	4b36      	ldr	r3, [pc, #216]	; (8003a40 <UART_SetConfig+0x2d4>)
 8003968:	fba3 2302 	umull	r2, r3, r3, r2
 800396c:	095b      	lsrs	r3, r3, #5
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003974:	441c      	add	r4, r3
 8003976:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800397a:	2200      	movs	r2, #0
 800397c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003980:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003984:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003988:	4642      	mov	r2, r8
 800398a:	464b      	mov	r3, r9
 800398c:	1891      	adds	r1, r2, r2
 800398e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003990:	415b      	adcs	r3, r3
 8003992:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003994:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003998:	4641      	mov	r1, r8
 800399a:	1851      	adds	r1, r2, r1
 800399c:	6339      	str	r1, [r7, #48]	; 0x30
 800399e:	4649      	mov	r1, r9
 80039a0:	414b      	adcs	r3, r1
 80039a2:	637b      	str	r3, [r7, #52]	; 0x34
 80039a4:	f04f 0200 	mov.w	r2, #0
 80039a8:	f04f 0300 	mov.w	r3, #0
 80039ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80039b0:	4659      	mov	r1, fp
 80039b2:	00cb      	lsls	r3, r1, #3
 80039b4:	4651      	mov	r1, sl
 80039b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039ba:	4651      	mov	r1, sl
 80039bc:	00ca      	lsls	r2, r1, #3
 80039be:	4610      	mov	r0, r2
 80039c0:	4619      	mov	r1, r3
 80039c2:	4603      	mov	r3, r0
 80039c4:	4642      	mov	r2, r8
 80039c6:	189b      	adds	r3, r3, r2
 80039c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80039cc:	464b      	mov	r3, r9
 80039ce:	460a      	mov	r2, r1
 80039d0:	eb42 0303 	adc.w	r3, r2, r3
 80039d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80039e4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80039e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80039ec:	460b      	mov	r3, r1
 80039ee:	18db      	adds	r3, r3, r3
 80039f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80039f2:	4613      	mov	r3, r2
 80039f4:	eb42 0303 	adc.w	r3, r2, r3
 80039f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003a02:	f7fd f929 	bl	8000c58 <__aeabi_uldivmod>
 8003a06:	4602      	mov	r2, r0
 8003a08:	460b      	mov	r3, r1
 8003a0a:	4b0d      	ldr	r3, [pc, #52]	; (8003a40 <UART_SetConfig+0x2d4>)
 8003a0c:	fba3 1302 	umull	r1, r3, r3, r2
 8003a10:	095b      	lsrs	r3, r3, #5
 8003a12:	2164      	movs	r1, #100	; 0x64
 8003a14:	fb01 f303 	mul.w	r3, r1, r3
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	3332      	adds	r3, #50	; 0x32
 8003a1e:	4a08      	ldr	r2, [pc, #32]	; (8003a40 <UART_SetConfig+0x2d4>)
 8003a20:	fba2 2303 	umull	r2, r3, r2, r3
 8003a24:	095b      	lsrs	r3, r3, #5
 8003a26:	f003 0207 	and.w	r2, r3, #7
 8003a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4422      	add	r2, r4
 8003a32:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a34:	e105      	b.n	8003c42 <UART_SetConfig+0x4d6>
 8003a36:	bf00      	nop
 8003a38:	40011000 	.word	0x40011000
 8003a3c:	40011400 	.word	0x40011400
 8003a40:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003a4e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003a52:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003a56:	4642      	mov	r2, r8
 8003a58:	464b      	mov	r3, r9
 8003a5a:	1891      	adds	r1, r2, r2
 8003a5c:	6239      	str	r1, [r7, #32]
 8003a5e:	415b      	adcs	r3, r3
 8003a60:	627b      	str	r3, [r7, #36]	; 0x24
 8003a62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a66:	4641      	mov	r1, r8
 8003a68:	1854      	adds	r4, r2, r1
 8003a6a:	4649      	mov	r1, r9
 8003a6c:	eb43 0501 	adc.w	r5, r3, r1
 8003a70:	f04f 0200 	mov.w	r2, #0
 8003a74:	f04f 0300 	mov.w	r3, #0
 8003a78:	00eb      	lsls	r3, r5, #3
 8003a7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a7e:	00e2      	lsls	r2, r4, #3
 8003a80:	4614      	mov	r4, r2
 8003a82:	461d      	mov	r5, r3
 8003a84:	4643      	mov	r3, r8
 8003a86:	18e3      	adds	r3, r4, r3
 8003a88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003a8c:	464b      	mov	r3, r9
 8003a8e:	eb45 0303 	adc.w	r3, r5, r3
 8003a92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003aa2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003aa6:	f04f 0200 	mov.w	r2, #0
 8003aaa:	f04f 0300 	mov.w	r3, #0
 8003aae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003ab2:	4629      	mov	r1, r5
 8003ab4:	008b      	lsls	r3, r1, #2
 8003ab6:	4621      	mov	r1, r4
 8003ab8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003abc:	4621      	mov	r1, r4
 8003abe:	008a      	lsls	r2, r1, #2
 8003ac0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003ac4:	f7fd f8c8 	bl	8000c58 <__aeabi_uldivmod>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	460b      	mov	r3, r1
 8003acc:	4b60      	ldr	r3, [pc, #384]	; (8003c50 <UART_SetConfig+0x4e4>)
 8003ace:	fba3 2302 	umull	r2, r3, r3, r2
 8003ad2:	095b      	lsrs	r3, r3, #5
 8003ad4:	011c      	lsls	r4, r3, #4
 8003ad6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ada:	2200      	movs	r2, #0
 8003adc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003ae0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003ae4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003ae8:	4642      	mov	r2, r8
 8003aea:	464b      	mov	r3, r9
 8003aec:	1891      	adds	r1, r2, r2
 8003aee:	61b9      	str	r1, [r7, #24]
 8003af0:	415b      	adcs	r3, r3
 8003af2:	61fb      	str	r3, [r7, #28]
 8003af4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003af8:	4641      	mov	r1, r8
 8003afa:	1851      	adds	r1, r2, r1
 8003afc:	6139      	str	r1, [r7, #16]
 8003afe:	4649      	mov	r1, r9
 8003b00:	414b      	adcs	r3, r1
 8003b02:	617b      	str	r3, [r7, #20]
 8003b04:	f04f 0200 	mov.w	r2, #0
 8003b08:	f04f 0300 	mov.w	r3, #0
 8003b0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b10:	4659      	mov	r1, fp
 8003b12:	00cb      	lsls	r3, r1, #3
 8003b14:	4651      	mov	r1, sl
 8003b16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b1a:	4651      	mov	r1, sl
 8003b1c:	00ca      	lsls	r2, r1, #3
 8003b1e:	4610      	mov	r0, r2
 8003b20:	4619      	mov	r1, r3
 8003b22:	4603      	mov	r3, r0
 8003b24:	4642      	mov	r2, r8
 8003b26:	189b      	adds	r3, r3, r2
 8003b28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b2c:	464b      	mov	r3, r9
 8003b2e:	460a      	mov	r2, r1
 8003b30:	eb42 0303 	adc.w	r3, r2, r3
 8003b34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b42:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003b44:	f04f 0200 	mov.w	r2, #0
 8003b48:	f04f 0300 	mov.w	r3, #0
 8003b4c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003b50:	4649      	mov	r1, r9
 8003b52:	008b      	lsls	r3, r1, #2
 8003b54:	4641      	mov	r1, r8
 8003b56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b5a:	4641      	mov	r1, r8
 8003b5c:	008a      	lsls	r2, r1, #2
 8003b5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003b62:	f7fd f879 	bl	8000c58 <__aeabi_uldivmod>
 8003b66:	4602      	mov	r2, r0
 8003b68:	460b      	mov	r3, r1
 8003b6a:	4b39      	ldr	r3, [pc, #228]	; (8003c50 <UART_SetConfig+0x4e4>)
 8003b6c:	fba3 1302 	umull	r1, r3, r3, r2
 8003b70:	095b      	lsrs	r3, r3, #5
 8003b72:	2164      	movs	r1, #100	; 0x64
 8003b74:	fb01 f303 	mul.w	r3, r1, r3
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	011b      	lsls	r3, r3, #4
 8003b7c:	3332      	adds	r3, #50	; 0x32
 8003b7e:	4a34      	ldr	r2, [pc, #208]	; (8003c50 <UART_SetConfig+0x4e4>)
 8003b80:	fba2 2303 	umull	r2, r3, r2, r3
 8003b84:	095b      	lsrs	r3, r3, #5
 8003b86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b8a:	441c      	add	r4, r3
 8003b8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b90:	2200      	movs	r2, #0
 8003b92:	673b      	str	r3, [r7, #112]	; 0x70
 8003b94:	677a      	str	r2, [r7, #116]	; 0x74
 8003b96:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003b9a:	4642      	mov	r2, r8
 8003b9c:	464b      	mov	r3, r9
 8003b9e:	1891      	adds	r1, r2, r2
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	415b      	adcs	r3, r3
 8003ba4:	60fb      	str	r3, [r7, #12]
 8003ba6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003baa:	4641      	mov	r1, r8
 8003bac:	1851      	adds	r1, r2, r1
 8003bae:	6039      	str	r1, [r7, #0]
 8003bb0:	4649      	mov	r1, r9
 8003bb2:	414b      	adcs	r3, r1
 8003bb4:	607b      	str	r3, [r7, #4]
 8003bb6:	f04f 0200 	mov.w	r2, #0
 8003bba:	f04f 0300 	mov.w	r3, #0
 8003bbe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003bc2:	4659      	mov	r1, fp
 8003bc4:	00cb      	lsls	r3, r1, #3
 8003bc6:	4651      	mov	r1, sl
 8003bc8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bcc:	4651      	mov	r1, sl
 8003bce:	00ca      	lsls	r2, r1, #3
 8003bd0:	4610      	mov	r0, r2
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	4642      	mov	r2, r8
 8003bd8:	189b      	adds	r3, r3, r2
 8003bda:	66bb      	str	r3, [r7, #104]	; 0x68
 8003bdc:	464b      	mov	r3, r9
 8003bde:	460a      	mov	r2, r1
 8003be0:	eb42 0303 	adc.w	r3, r2, r3
 8003be4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	663b      	str	r3, [r7, #96]	; 0x60
 8003bf0:	667a      	str	r2, [r7, #100]	; 0x64
 8003bf2:	f04f 0200 	mov.w	r2, #0
 8003bf6:	f04f 0300 	mov.w	r3, #0
 8003bfa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003bfe:	4649      	mov	r1, r9
 8003c00:	008b      	lsls	r3, r1, #2
 8003c02:	4641      	mov	r1, r8
 8003c04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c08:	4641      	mov	r1, r8
 8003c0a:	008a      	lsls	r2, r1, #2
 8003c0c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003c10:	f7fd f822 	bl	8000c58 <__aeabi_uldivmod>
 8003c14:	4602      	mov	r2, r0
 8003c16:	460b      	mov	r3, r1
 8003c18:	4b0d      	ldr	r3, [pc, #52]	; (8003c50 <UART_SetConfig+0x4e4>)
 8003c1a:	fba3 1302 	umull	r1, r3, r3, r2
 8003c1e:	095b      	lsrs	r3, r3, #5
 8003c20:	2164      	movs	r1, #100	; 0x64
 8003c22:	fb01 f303 	mul.w	r3, r1, r3
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	011b      	lsls	r3, r3, #4
 8003c2a:	3332      	adds	r3, #50	; 0x32
 8003c2c:	4a08      	ldr	r2, [pc, #32]	; (8003c50 <UART_SetConfig+0x4e4>)
 8003c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c32:	095b      	lsrs	r3, r3, #5
 8003c34:	f003 020f 	and.w	r2, r3, #15
 8003c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4422      	add	r2, r4
 8003c40:	609a      	str	r2, [r3, #8]
}
 8003c42:	bf00      	nop
 8003c44:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c4e:	bf00      	nop
 8003c50:	51eb851f 	.word	0x51eb851f

08003c54 <__errno>:
 8003c54:	4b01      	ldr	r3, [pc, #4]	; (8003c5c <__errno+0x8>)
 8003c56:	6818      	ldr	r0, [r3, #0]
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	2000000c 	.word	0x2000000c

08003c60 <__libc_init_array>:
 8003c60:	b570      	push	{r4, r5, r6, lr}
 8003c62:	4d0d      	ldr	r5, [pc, #52]	; (8003c98 <__libc_init_array+0x38>)
 8003c64:	4c0d      	ldr	r4, [pc, #52]	; (8003c9c <__libc_init_array+0x3c>)
 8003c66:	1b64      	subs	r4, r4, r5
 8003c68:	10a4      	asrs	r4, r4, #2
 8003c6a:	2600      	movs	r6, #0
 8003c6c:	42a6      	cmp	r6, r4
 8003c6e:	d109      	bne.n	8003c84 <__libc_init_array+0x24>
 8003c70:	4d0b      	ldr	r5, [pc, #44]	; (8003ca0 <__libc_init_array+0x40>)
 8003c72:	4c0c      	ldr	r4, [pc, #48]	; (8003ca4 <__libc_init_array+0x44>)
 8003c74:	f002 fdc2 	bl	80067fc <_init>
 8003c78:	1b64      	subs	r4, r4, r5
 8003c7a:	10a4      	asrs	r4, r4, #2
 8003c7c:	2600      	movs	r6, #0
 8003c7e:	42a6      	cmp	r6, r4
 8003c80:	d105      	bne.n	8003c8e <__libc_init_array+0x2e>
 8003c82:	bd70      	pop	{r4, r5, r6, pc}
 8003c84:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c88:	4798      	blx	r3
 8003c8a:	3601      	adds	r6, #1
 8003c8c:	e7ee      	b.n	8003c6c <__libc_init_array+0xc>
 8003c8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c92:	4798      	blx	r3
 8003c94:	3601      	adds	r6, #1
 8003c96:	e7f2      	b.n	8003c7e <__libc_init_array+0x1e>
 8003c98:	08006c24 	.word	0x08006c24
 8003c9c:	08006c24 	.word	0x08006c24
 8003ca0:	08006c24 	.word	0x08006c24
 8003ca4:	08006c28 	.word	0x08006c28

08003ca8 <memset>:
 8003ca8:	4402      	add	r2, r0
 8003caa:	4603      	mov	r3, r0
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d100      	bne.n	8003cb2 <memset+0xa>
 8003cb0:	4770      	bx	lr
 8003cb2:	f803 1b01 	strb.w	r1, [r3], #1
 8003cb6:	e7f9      	b.n	8003cac <memset+0x4>

08003cb8 <__cvt>:
 8003cb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003cbc:	ec55 4b10 	vmov	r4, r5, d0
 8003cc0:	2d00      	cmp	r5, #0
 8003cc2:	460e      	mov	r6, r1
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	462b      	mov	r3, r5
 8003cc8:	bfbb      	ittet	lt
 8003cca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003cce:	461d      	movlt	r5, r3
 8003cd0:	2300      	movge	r3, #0
 8003cd2:	232d      	movlt	r3, #45	; 0x2d
 8003cd4:	700b      	strb	r3, [r1, #0]
 8003cd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003cd8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003cdc:	4691      	mov	r9, r2
 8003cde:	f023 0820 	bic.w	r8, r3, #32
 8003ce2:	bfbc      	itt	lt
 8003ce4:	4622      	movlt	r2, r4
 8003ce6:	4614      	movlt	r4, r2
 8003ce8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003cec:	d005      	beq.n	8003cfa <__cvt+0x42>
 8003cee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003cf2:	d100      	bne.n	8003cf6 <__cvt+0x3e>
 8003cf4:	3601      	adds	r6, #1
 8003cf6:	2102      	movs	r1, #2
 8003cf8:	e000      	b.n	8003cfc <__cvt+0x44>
 8003cfa:	2103      	movs	r1, #3
 8003cfc:	ab03      	add	r3, sp, #12
 8003cfe:	9301      	str	r3, [sp, #4]
 8003d00:	ab02      	add	r3, sp, #8
 8003d02:	9300      	str	r3, [sp, #0]
 8003d04:	ec45 4b10 	vmov	d0, r4, r5
 8003d08:	4653      	mov	r3, sl
 8003d0a:	4632      	mov	r2, r6
 8003d0c:	f000 fe18 	bl	8004940 <_dtoa_r>
 8003d10:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003d14:	4607      	mov	r7, r0
 8003d16:	d102      	bne.n	8003d1e <__cvt+0x66>
 8003d18:	f019 0f01 	tst.w	r9, #1
 8003d1c:	d022      	beq.n	8003d64 <__cvt+0xac>
 8003d1e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003d22:	eb07 0906 	add.w	r9, r7, r6
 8003d26:	d110      	bne.n	8003d4a <__cvt+0x92>
 8003d28:	783b      	ldrb	r3, [r7, #0]
 8003d2a:	2b30      	cmp	r3, #48	; 0x30
 8003d2c:	d10a      	bne.n	8003d44 <__cvt+0x8c>
 8003d2e:	2200      	movs	r2, #0
 8003d30:	2300      	movs	r3, #0
 8003d32:	4620      	mov	r0, r4
 8003d34:	4629      	mov	r1, r5
 8003d36:	f7fc fecf 	bl	8000ad8 <__aeabi_dcmpeq>
 8003d3a:	b918      	cbnz	r0, 8003d44 <__cvt+0x8c>
 8003d3c:	f1c6 0601 	rsb	r6, r6, #1
 8003d40:	f8ca 6000 	str.w	r6, [sl]
 8003d44:	f8da 3000 	ldr.w	r3, [sl]
 8003d48:	4499      	add	r9, r3
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	4620      	mov	r0, r4
 8003d50:	4629      	mov	r1, r5
 8003d52:	f7fc fec1 	bl	8000ad8 <__aeabi_dcmpeq>
 8003d56:	b108      	cbz	r0, 8003d5c <__cvt+0xa4>
 8003d58:	f8cd 900c 	str.w	r9, [sp, #12]
 8003d5c:	2230      	movs	r2, #48	; 0x30
 8003d5e:	9b03      	ldr	r3, [sp, #12]
 8003d60:	454b      	cmp	r3, r9
 8003d62:	d307      	bcc.n	8003d74 <__cvt+0xbc>
 8003d64:	9b03      	ldr	r3, [sp, #12]
 8003d66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003d68:	1bdb      	subs	r3, r3, r7
 8003d6a:	4638      	mov	r0, r7
 8003d6c:	6013      	str	r3, [r2, #0]
 8003d6e:	b004      	add	sp, #16
 8003d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d74:	1c59      	adds	r1, r3, #1
 8003d76:	9103      	str	r1, [sp, #12]
 8003d78:	701a      	strb	r2, [r3, #0]
 8003d7a:	e7f0      	b.n	8003d5e <__cvt+0xa6>

08003d7c <__exponent>:
 8003d7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2900      	cmp	r1, #0
 8003d82:	bfb8      	it	lt
 8003d84:	4249      	neglt	r1, r1
 8003d86:	f803 2b02 	strb.w	r2, [r3], #2
 8003d8a:	bfb4      	ite	lt
 8003d8c:	222d      	movlt	r2, #45	; 0x2d
 8003d8e:	222b      	movge	r2, #43	; 0x2b
 8003d90:	2909      	cmp	r1, #9
 8003d92:	7042      	strb	r2, [r0, #1]
 8003d94:	dd2a      	ble.n	8003dec <__exponent+0x70>
 8003d96:	f10d 0407 	add.w	r4, sp, #7
 8003d9a:	46a4      	mov	ip, r4
 8003d9c:	270a      	movs	r7, #10
 8003d9e:	46a6      	mov	lr, r4
 8003da0:	460a      	mov	r2, r1
 8003da2:	fb91 f6f7 	sdiv	r6, r1, r7
 8003da6:	fb07 1516 	mls	r5, r7, r6, r1
 8003daa:	3530      	adds	r5, #48	; 0x30
 8003dac:	2a63      	cmp	r2, #99	; 0x63
 8003dae:	f104 34ff 	add.w	r4, r4, #4294967295
 8003db2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003db6:	4631      	mov	r1, r6
 8003db8:	dcf1      	bgt.n	8003d9e <__exponent+0x22>
 8003dba:	3130      	adds	r1, #48	; 0x30
 8003dbc:	f1ae 0502 	sub.w	r5, lr, #2
 8003dc0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003dc4:	1c44      	adds	r4, r0, #1
 8003dc6:	4629      	mov	r1, r5
 8003dc8:	4561      	cmp	r1, ip
 8003dca:	d30a      	bcc.n	8003de2 <__exponent+0x66>
 8003dcc:	f10d 0209 	add.w	r2, sp, #9
 8003dd0:	eba2 020e 	sub.w	r2, r2, lr
 8003dd4:	4565      	cmp	r5, ip
 8003dd6:	bf88      	it	hi
 8003dd8:	2200      	movhi	r2, #0
 8003dda:	4413      	add	r3, r2
 8003ddc:	1a18      	subs	r0, r3, r0
 8003dde:	b003      	add	sp, #12
 8003de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003de2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003de6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003dea:	e7ed      	b.n	8003dc8 <__exponent+0x4c>
 8003dec:	2330      	movs	r3, #48	; 0x30
 8003dee:	3130      	adds	r1, #48	; 0x30
 8003df0:	7083      	strb	r3, [r0, #2]
 8003df2:	70c1      	strb	r1, [r0, #3]
 8003df4:	1d03      	adds	r3, r0, #4
 8003df6:	e7f1      	b.n	8003ddc <__exponent+0x60>

08003df8 <_printf_float>:
 8003df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dfc:	ed2d 8b02 	vpush	{d8}
 8003e00:	b08d      	sub	sp, #52	; 0x34
 8003e02:	460c      	mov	r4, r1
 8003e04:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003e08:	4616      	mov	r6, r2
 8003e0a:	461f      	mov	r7, r3
 8003e0c:	4605      	mov	r5, r0
 8003e0e:	f001 fd3d 	bl	800588c <_localeconv_r>
 8003e12:	f8d0 a000 	ldr.w	sl, [r0]
 8003e16:	4650      	mov	r0, sl
 8003e18:	f7fc f9e2 	bl	80001e0 <strlen>
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	930a      	str	r3, [sp, #40]	; 0x28
 8003e20:	6823      	ldr	r3, [r4, #0]
 8003e22:	9305      	str	r3, [sp, #20]
 8003e24:	f8d8 3000 	ldr.w	r3, [r8]
 8003e28:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003e2c:	3307      	adds	r3, #7
 8003e2e:	f023 0307 	bic.w	r3, r3, #7
 8003e32:	f103 0208 	add.w	r2, r3, #8
 8003e36:	f8c8 2000 	str.w	r2, [r8]
 8003e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e3e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003e42:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003e46:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003e4a:	9307      	str	r3, [sp, #28]
 8003e4c:	f8cd 8018 	str.w	r8, [sp, #24]
 8003e50:	ee08 0a10 	vmov	s16, r0
 8003e54:	4b9f      	ldr	r3, [pc, #636]	; (80040d4 <_printf_float+0x2dc>)
 8003e56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8003e5e:	f7fc fe6d 	bl	8000b3c <__aeabi_dcmpun>
 8003e62:	bb88      	cbnz	r0, 8003ec8 <_printf_float+0xd0>
 8003e64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003e68:	4b9a      	ldr	r3, [pc, #616]	; (80040d4 <_printf_float+0x2dc>)
 8003e6a:	f04f 32ff 	mov.w	r2, #4294967295
 8003e6e:	f7fc fe47 	bl	8000b00 <__aeabi_dcmple>
 8003e72:	bb48      	cbnz	r0, 8003ec8 <_printf_float+0xd0>
 8003e74:	2200      	movs	r2, #0
 8003e76:	2300      	movs	r3, #0
 8003e78:	4640      	mov	r0, r8
 8003e7a:	4649      	mov	r1, r9
 8003e7c:	f7fc fe36 	bl	8000aec <__aeabi_dcmplt>
 8003e80:	b110      	cbz	r0, 8003e88 <_printf_float+0x90>
 8003e82:	232d      	movs	r3, #45	; 0x2d
 8003e84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e88:	4b93      	ldr	r3, [pc, #588]	; (80040d8 <_printf_float+0x2e0>)
 8003e8a:	4894      	ldr	r0, [pc, #592]	; (80040dc <_printf_float+0x2e4>)
 8003e8c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003e90:	bf94      	ite	ls
 8003e92:	4698      	movls	r8, r3
 8003e94:	4680      	movhi	r8, r0
 8003e96:	2303      	movs	r3, #3
 8003e98:	6123      	str	r3, [r4, #16]
 8003e9a:	9b05      	ldr	r3, [sp, #20]
 8003e9c:	f023 0204 	bic.w	r2, r3, #4
 8003ea0:	6022      	str	r2, [r4, #0]
 8003ea2:	f04f 0900 	mov.w	r9, #0
 8003ea6:	9700      	str	r7, [sp, #0]
 8003ea8:	4633      	mov	r3, r6
 8003eaa:	aa0b      	add	r2, sp, #44	; 0x2c
 8003eac:	4621      	mov	r1, r4
 8003eae:	4628      	mov	r0, r5
 8003eb0:	f000 f9d8 	bl	8004264 <_printf_common>
 8003eb4:	3001      	adds	r0, #1
 8003eb6:	f040 8090 	bne.w	8003fda <_printf_float+0x1e2>
 8003eba:	f04f 30ff 	mov.w	r0, #4294967295
 8003ebe:	b00d      	add	sp, #52	; 0x34
 8003ec0:	ecbd 8b02 	vpop	{d8}
 8003ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ec8:	4642      	mov	r2, r8
 8003eca:	464b      	mov	r3, r9
 8003ecc:	4640      	mov	r0, r8
 8003ece:	4649      	mov	r1, r9
 8003ed0:	f7fc fe34 	bl	8000b3c <__aeabi_dcmpun>
 8003ed4:	b140      	cbz	r0, 8003ee8 <_printf_float+0xf0>
 8003ed6:	464b      	mov	r3, r9
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	bfbc      	itt	lt
 8003edc:	232d      	movlt	r3, #45	; 0x2d
 8003ede:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003ee2:	487f      	ldr	r0, [pc, #508]	; (80040e0 <_printf_float+0x2e8>)
 8003ee4:	4b7f      	ldr	r3, [pc, #508]	; (80040e4 <_printf_float+0x2ec>)
 8003ee6:	e7d1      	b.n	8003e8c <_printf_float+0x94>
 8003ee8:	6863      	ldr	r3, [r4, #4]
 8003eea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003eee:	9206      	str	r2, [sp, #24]
 8003ef0:	1c5a      	adds	r2, r3, #1
 8003ef2:	d13f      	bne.n	8003f74 <_printf_float+0x17c>
 8003ef4:	2306      	movs	r3, #6
 8003ef6:	6063      	str	r3, [r4, #4]
 8003ef8:	9b05      	ldr	r3, [sp, #20]
 8003efa:	6861      	ldr	r1, [r4, #4]
 8003efc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003f00:	2300      	movs	r3, #0
 8003f02:	9303      	str	r3, [sp, #12]
 8003f04:	ab0a      	add	r3, sp, #40	; 0x28
 8003f06:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003f0a:	ab09      	add	r3, sp, #36	; 0x24
 8003f0c:	ec49 8b10 	vmov	d0, r8, r9
 8003f10:	9300      	str	r3, [sp, #0]
 8003f12:	6022      	str	r2, [r4, #0]
 8003f14:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003f18:	4628      	mov	r0, r5
 8003f1a:	f7ff fecd 	bl	8003cb8 <__cvt>
 8003f1e:	9b06      	ldr	r3, [sp, #24]
 8003f20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003f22:	2b47      	cmp	r3, #71	; 0x47
 8003f24:	4680      	mov	r8, r0
 8003f26:	d108      	bne.n	8003f3a <_printf_float+0x142>
 8003f28:	1cc8      	adds	r0, r1, #3
 8003f2a:	db02      	blt.n	8003f32 <_printf_float+0x13a>
 8003f2c:	6863      	ldr	r3, [r4, #4]
 8003f2e:	4299      	cmp	r1, r3
 8003f30:	dd41      	ble.n	8003fb6 <_printf_float+0x1be>
 8003f32:	f1ab 0b02 	sub.w	fp, fp, #2
 8003f36:	fa5f fb8b 	uxtb.w	fp, fp
 8003f3a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003f3e:	d820      	bhi.n	8003f82 <_printf_float+0x18a>
 8003f40:	3901      	subs	r1, #1
 8003f42:	465a      	mov	r2, fp
 8003f44:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003f48:	9109      	str	r1, [sp, #36]	; 0x24
 8003f4a:	f7ff ff17 	bl	8003d7c <__exponent>
 8003f4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003f50:	1813      	adds	r3, r2, r0
 8003f52:	2a01      	cmp	r2, #1
 8003f54:	4681      	mov	r9, r0
 8003f56:	6123      	str	r3, [r4, #16]
 8003f58:	dc02      	bgt.n	8003f60 <_printf_float+0x168>
 8003f5a:	6822      	ldr	r2, [r4, #0]
 8003f5c:	07d2      	lsls	r2, r2, #31
 8003f5e:	d501      	bpl.n	8003f64 <_printf_float+0x16c>
 8003f60:	3301      	adds	r3, #1
 8003f62:	6123      	str	r3, [r4, #16]
 8003f64:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d09c      	beq.n	8003ea6 <_printf_float+0xae>
 8003f6c:	232d      	movs	r3, #45	; 0x2d
 8003f6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f72:	e798      	b.n	8003ea6 <_printf_float+0xae>
 8003f74:	9a06      	ldr	r2, [sp, #24]
 8003f76:	2a47      	cmp	r2, #71	; 0x47
 8003f78:	d1be      	bne.n	8003ef8 <_printf_float+0x100>
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1bc      	bne.n	8003ef8 <_printf_float+0x100>
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e7b9      	b.n	8003ef6 <_printf_float+0xfe>
 8003f82:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003f86:	d118      	bne.n	8003fba <_printf_float+0x1c2>
 8003f88:	2900      	cmp	r1, #0
 8003f8a:	6863      	ldr	r3, [r4, #4]
 8003f8c:	dd0b      	ble.n	8003fa6 <_printf_float+0x1ae>
 8003f8e:	6121      	str	r1, [r4, #16]
 8003f90:	b913      	cbnz	r3, 8003f98 <_printf_float+0x1a0>
 8003f92:	6822      	ldr	r2, [r4, #0]
 8003f94:	07d0      	lsls	r0, r2, #31
 8003f96:	d502      	bpl.n	8003f9e <_printf_float+0x1a6>
 8003f98:	3301      	adds	r3, #1
 8003f9a:	440b      	add	r3, r1
 8003f9c:	6123      	str	r3, [r4, #16]
 8003f9e:	65a1      	str	r1, [r4, #88]	; 0x58
 8003fa0:	f04f 0900 	mov.w	r9, #0
 8003fa4:	e7de      	b.n	8003f64 <_printf_float+0x16c>
 8003fa6:	b913      	cbnz	r3, 8003fae <_printf_float+0x1b6>
 8003fa8:	6822      	ldr	r2, [r4, #0]
 8003faa:	07d2      	lsls	r2, r2, #31
 8003fac:	d501      	bpl.n	8003fb2 <_printf_float+0x1ba>
 8003fae:	3302      	adds	r3, #2
 8003fb0:	e7f4      	b.n	8003f9c <_printf_float+0x1a4>
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e7f2      	b.n	8003f9c <_printf_float+0x1a4>
 8003fb6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003fba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003fbc:	4299      	cmp	r1, r3
 8003fbe:	db05      	blt.n	8003fcc <_printf_float+0x1d4>
 8003fc0:	6823      	ldr	r3, [r4, #0]
 8003fc2:	6121      	str	r1, [r4, #16]
 8003fc4:	07d8      	lsls	r0, r3, #31
 8003fc6:	d5ea      	bpl.n	8003f9e <_printf_float+0x1a6>
 8003fc8:	1c4b      	adds	r3, r1, #1
 8003fca:	e7e7      	b.n	8003f9c <_printf_float+0x1a4>
 8003fcc:	2900      	cmp	r1, #0
 8003fce:	bfd4      	ite	le
 8003fd0:	f1c1 0202 	rsble	r2, r1, #2
 8003fd4:	2201      	movgt	r2, #1
 8003fd6:	4413      	add	r3, r2
 8003fd8:	e7e0      	b.n	8003f9c <_printf_float+0x1a4>
 8003fda:	6823      	ldr	r3, [r4, #0]
 8003fdc:	055a      	lsls	r2, r3, #21
 8003fde:	d407      	bmi.n	8003ff0 <_printf_float+0x1f8>
 8003fe0:	6923      	ldr	r3, [r4, #16]
 8003fe2:	4642      	mov	r2, r8
 8003fe4:	4631      	mov	r1, r6
 8003fe6:	4628      	mov	r0, r5
 8003fe8:	47b8      	blx	r7
 8003fea:	3001      	adds	r0, #1
 8003fec:	d12c      	bne.n	8004048 <_printf_float+0x250>
 8003fee:	e764      	b.n	8003eba <_printf_float+0xc2>
 8003ff0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003ff4:	f240 80e0 	bls.w	80041b8 <_printf_float+0x3c0>
 8003ff8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	2300      	movs	r3, #0
 8004000:	f7fc fd6a 	bl	8000ad8 <__aeabi_dcmpeq>
 8004004:	2800      	cmp	r0, #0
 8004006:	d034      	beq.n	8004072 <_printf_float+0x27a>
 8004008:	4a37      	ldr	r2, [pc, #220]	; (80040e8 <_printf_float+0x2f0>)
 800400a:	2301      	movs	r3, #1
 800400c:	4631      	mov	r1, r6
 800400e:	4628      	mov	r0, r5
 8004010:	47b8      	blx	r7
 8004012:	3001      	adds	r0, #1
 8004014:	f43f af51 	beq.w	8003eba <_printf_float+0xc2>
 8004018:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800401c:	429a      	cmp	r2, r3
 800401e:	db02      	blt.n	8004026 <_printf_float+0x22e>
 8004020:	6823      	ldr	r3, [r4, #0]
 8004022:	07d8      	lsls	r0, r3, #31
 8004024:	d510      	bpl.n	8004048 <_printf_float+0x250>
 8004026:	ee18 3a10 	vmov	r3, s16
 800402a:	4652      	mov	r2, sl
 800402c:	4631      	mov	r1, r6
 800402e:	4628      	mov	r0, r5
 8004030:	47b8      	blx	r7
 8004032:	3001      	adds	r0, #1
 8004034:	f43f af41 	beq.w	8003eba <_printf_float+0xc2>
 8004038:	f04f 0800 	mov.w	r8, #0
 800403c:	f104 091a 	add.w	r9, r4, #26
 8004040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004042:	3b01      	subs	r3, #1
 8004044:	4543      	cmp	r3, r8
 8004046:	dc09      	bgt.n	800405c <_printf_float+0x264>
 8004048:	6823      	ldr	r3, [r4, #0]
 800404a:	079b      	lsls	r3, r3, #30
 800404c:	f100 8105 	bmi.w	800425a <_printf_float+0x462>
 8004050:	68e0      	ldr	r0, [r4, #12]
 8004052:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004054:	4298      	cmp	r0, r3
 8004056:	bfb8      	it	lt
 8004058:	4618      	movlt	r0, r3
 800405a:	e730      	b.n	8003ebe <_printf_float+0xc6>
 800405c:	2301      	movs	r3, #1
 800405e:	464a      	mov	r2, r9
 8004060:	4631      	mov	r1, r6
 8004062:	4628      	mov	r0, r5
 8004064:	47b8      	blx	r7
 8004066:	3001      	adds	r0, #1
 8004068:	f43f af27 	beq.w	8003eba <_printf_float+0xc2>
 800406c:	f108 0801 	add.w	r8, r8, #1
 8004070:	e7e6      	b.n	8004040 <_printf_float+0x248>
 8004072:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004074:	2b00      	cmp	r3, #0
 8004076:	dc39      	bgt.n	80040ec <_printf_float+0x2f4>
 8004078:	4a1b      	ldr	r2, [pc, #108]	; (80040e8 <_printf_float+0x2f0>)
 800407a:	2301      	movs	r3, #1
 800407c:	4631      	mov	r1, r6
 800407e:	4628      	mov	r0, r5
 8004080:	47b8      	blx	r7
 8004082:	3001      	adds	r0, #1
 8004084:	f43f af19 	beq.w	8003eba <_printf_float+0xc2>
 8004088:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800408c:	4313      	orrs	r3, r2
 800408e:	d102      	bne.n	8004096 <_printf_float+0x29e>
 8004090:	6823      	ldr	r3, [r4, #0]
 8004092:	07d9      	lsls	r1, r3, #31
 8004094:	d5d8      	bpl.n	8004048 <_printf_float+0x250>
 8004096:	ee18 3a10 	vmov	r3, s16
 800409a:	4652      	mov	r2, sl
 800409c:	4631      	mov	r1, r6
 800409e:	4628      	mov	r0, r5
 80040a0:	47b8      	blx	r7
 80040a2:	3001      	adds	r0, #1
 80040a4:	f43f af09 	beq.w	8003eba <_printf_float+0xc2>
 80040a8:	f04f 0900 	mov.w	r9, #0
 80040ac:	f104 0a1a 	add.w	sl, r4, #26
 80040b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040b2:	425b      	negs	r3, r3
 80040b4:	454b      	cmp	r3, r9
 80040b6:	dc01      	bgt.n	80040bc <_printf_float+0x2c4>
 80040b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040ba:	e792      	b.n	8003fe2 <_printf_float+0x1ea>
 80040bc:	2301      	movs	r3, #1
 80040be:	4652      	mov	r2, sl
 80040c0:	4631      	mov	r1, r6
 80040c2:	4628      	mov	r0, r5
 80040c4:	47b8      	blx	r7
 80040c6:	3001      	adds	r0, #1
 80040c8:	f43f aef7 	beq.w	8003eba <_printf_float+0xc2>
 80040cc:	f109 0901 	add.w	r9, r9, #1
 80040d0:	e7ee      	b.n	80040b0 <_printf_float+0x2b8>
 80040d2:	bf00      	nop
 80040d4:	7fefffff 	.word	0x7fefffff
 80040d8:	08006844 	.word	0x08006844
 80040dc:	08006848 	.word	0x08006848
 80040e0:	08006850 	.word	0x08006850
 80040e4:	0800684c 	.word	0x0800684c
 80040e8:	08006854 	.word	0x08006854
 80040ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80040ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80040f0:	429a      	cmp	r2, r3
 80040f2:	bfa8      	it	ge
 80040f4:	461a      	movge	r2, r3
 80040f6:	2a00      	cmp	r2, #0
 80040f8:	4691      	mov	r9, r2
 80040fa:	dc37      	bgt.n	800416c <_printf_float+0x374>
 80040fc:	f04f 0b00 	mov.w	fp, #0
 8004100:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004104:	f104 021a 	add.w	r2, r4, #26
 8004108:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800410a:	9305      	str	r3, [sp, #20]
 800410c:	eba3 0309 	sub.w	r3, r3, r9
 8004110:	455b      	cmp	r3, fp
 8004112:	dc33      	bgt.n	800417c <_printf_float+0x384>
 8004114:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004118:	429a      	cmp	r2, r3
 800411a:	db3b      	blt.n	8004194 <_printf_float+0x39c>
 800411c:	6823      	ldr	r3, [r4, #0]
 800411e:	07da      	lsls	r2, r3, #31
 8004120:	d438      	bmi.n	8004194 <_printf_float+0x39c>
 8004122:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004124:	9a05      	ldr	r2, [sp, #20]
 8004126:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004128:	1a9a      	subs	r2, r3, r2
 800412a:	eba3 0901 	sub.w	r9, r3, r1
 800412e:	4591      	cmp	r9, r2
 8004130:	bfa8      	it	ge
 8004132:	4691      	movge	r9, r2
 8004134:	f1b9 0f00 	cmp.w	r9, #0
 8004138:	dc35      	bgt.n	80041a6 <_printf_float+0x3ae>
 800413a:	f04f 0800 	mov.w	r8, #0
 800413e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004142:	f104 0a1a 	add.w	sl, r4, #26
 8004146:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800414a:	1a9b      	subs	r3, r3, r2
 800414c:	eba3 0309 	sub.w	r3, r3, r9
 8004150:	4543      	cmp	r3, r8
 8004152:	f77f af79 	ble.w	8004048 <_printf_float+0x250>
 8004156:	2301      	movs	r3, #1
 8004158:	4652      	mov	r2, sl
 800415a:	4631      	mov	r1, r6
 800415c:	4628      	mov	r0, r5
 800415e:	47b8      	blx	r7
 8004160:	3001      	adds	r0, #1
 8004162:	f43f aeaa 	beq.w	8003eba <_printf_float+0xc2>
 8004166:	f108 0801 	add.w	r8, r8, #1
 800416a:	e7ec      	b.n	8004146 <_printf_float+0x34e>
 800416c:	4613      	mov	r3, r2
 800416e:	4631      	mov	r1, r6
 8004170:	4642      	mov	r2, r8
 8004172:	4628      	mov	r0, r5
 8004174:	47b8      	blx	r7
 8004176:	3001      	adds	r0, #1
 8004178:	d1c0      	bne.n	80040fc <_printf_float+0x304>
 800417a:	e69e      	b.n	8003eba <_printf_float+0xc2>
 800417c:	2301      	movs	r3, #1
 800417e:	4631      	mov	r1, r6
 8004180:	4628      	mov	r0, r5
 8004182:	9205      	str	r2, [sp, #20]
 8004184:	47b8      	blx	r7
 8004186:	3001      	adds	r0, #1
 8004188:	f43f ae97 	beq.w	8003eba <_printf_float+0xc2>
 800418c:	9a05      	ldr	r2, [sp, #20]
 800418e:	f10b 0b01 	add.w	fp, fp, #1
 8004192:	e7b9      	b.n	8004108 <_printf_float+0x310>
 8004194:	ee18 3a10 	vmov	r3, s16
 8004198:	4652      	mov	r2, sl
 800419a:	4631      	mov	r1, r6
 800419c:	4628      	mov	r0, r5
 800419e:	47b8      	blx	r7
 80041a0:	3001      	adds	r0, #1
 80041a2:	d1be      	bne.n	8004122 <_printf_float+0x32a>
 80041a4:	e689      	b.n	8003eba <_printf_float+0xc2>
 80041a6:	9a05      	ldr	r2, [sp, #20]
 80041a8:	464b      	mov	r3, r9
 80041aa:	4442      	add	r2, r8
 80041ac:	4631      	mov	r1, r6
 80041ae:	4628      	mov	r0, r5
 80041b0:	47b8      	blx	r7
 80041b2:	3001      	adds	r0, #1
 80041b4:	d1c1      	bne.n	800413a <_printf_float+0x342>
 80041b6:	e680      	b.n	8003eba <_printf_float+0xc2>
 80041b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80041ba:	2a01      	cmp	r2, #1
 80041bc:	dc01      	bgt.n	80041c2 <_printf_float+0x3ca>
 80041be:	07db      	lsls	r3, r3, #31
 80041c0:	d538      	bpl.n	8004234 <_printf_float+0x43c>
 80041c2:	2301      	movs	r3, #1
 80041c4:	4642      	mov	r2, r8
 80041c6:	4631      	mov	r1, r6
 80041c8:	4628      	mov	r0, r5
 80041ca:	47b8      	blx	r7
 80041cc:	3001      	adds	r0, #1
 80041ce:	f43f ae74 	beq.w	8003eba <_printf_float+0xc2>
 80041d2:	ee18 3a10 	vmov	r3, s16
 80041d6:	4652      	mov	r2, sl
 80041d8:	4631      	mov	r1, r6
 80041da:	4628      	mov	r0, r5
 80041dc:	47b8      	blx	r7
 80041de:	3001      	adds	r0, #1
 80041e0:	f43f ae6b 	beq.w	8003eba <_printf_float+0xc2>
 80041e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80041e8:	2200      	movs	r2, #0
 80041ea:	2300      	movs	r3, #0
 80041ec:	f7fc fc74 	bl	8000ad8 <__aeabi_dcmpeq>
 80041f0:	b9d8      	cbnz	r0, 800422a <_printf_float+0x432>
 80041f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80041f4:	f108 0201 	add.w	r2, r8, #1
 80041f8:	3b01      	subs	r3, #1
 80041fa:	4631      	mov	r1, r6
 80041fc:	4628      	mov	r0, r5
 80041fe:	47b8      	blx	r7
 8004200:	3001      	adds	r0, #1
 8004202:	d10e      	bne.n	8004222 <_printf_float+0x42a>
 8004204:	e659      	b.n	8003eba <_printf_float+0xc2>
 8004206:	2301      	movs	r3, #1
 8004208:	4652      	mov	r2, sl
 800420a:	4631      	mov	r1, r6
 800420c:	4628      	mov	r0, r5
 800420e:	47b8      	blx	r7
 8004210:	3001      	adds	r0, #1
 8004212:	f43f ae52 	beq.w	8003eba <_printf_float+0xc2>
 8004216:	f108 0801 	add.w	r8, r8, #1
 800421a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800421c:	3b01      	subs	r3, #1
 800421e:	4543      	cmp	r3, r8
 8004220:	dcf1      	bgt.n	8004206 <_printf_float+0x40e>
 8004222:	464b      	mov	r3, r9
 8004224:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004228:	e6dc      	b.n	8003fe4 <_printf_float+0x1ec>
 800422a:	f04f 0800 	mov.w	r8, #0
 800422e:	f104 0a1a 	add.w	sl, r4, #26
 8004232:	e7f2      	b.n	800421a <_printf_float+0x422>
 8004234:	2301      	movs	r3, #1
 8004236:	4642      	mov	r2, r8
 8004238:	e7df      	b.n	80041fa <_printf_float+0x402>
 800423a:	2301      	movs	r3, #1
 800423c:	464a      	mov	r2, r9
 800423e:	4631      	mov	r1, r6
 8004240:	4628      	mov	r0, r5
 8004242:	47b8      	blx	r7
 8004244:	3001      	adds	r0, #1
 8004246:	f43f ae38 	beq.w	8003eba <_printf_float+0xc2>
 800424a:	f108 0801 	add.w	r8, r8, #1
 800424e:	68e3      	ldr	r3, [r4, #12]
 8004250:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004252:	1a5b      	subs	r3, r3, r1
 8004254:	4543      	cmp	r3, r8
 8004256:	dcf0      	bgt.n	800423a <_printf_float+0x442>
 8004258:	e6fa      	b.n	8004050 <_printf_float+0x258>
 800425a:	f04f 0800 	mov.w	r8, #0
 800425e:	f104 0919 	add.w	r9, r4, #25
 8004262:	e7f4      	b.n	800424e <_printf_float+0x456>

08004264 <_printf_common>:
 8004264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004268:	4616      	mov	r6, r2
 800426a:	4699      	mov	r9, r3
 800426c:	688a      	ldr	r2, [r1, #8]
 800426e:	690b      	ldr	r3, [r1, #16]
 8004270:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004274:	4293      	cmp	r3, r2
 8004276:	bfb8      	it	lt
 8004278:	4613      	movlt	r3, r2
 800427a:	6033      	str	r3, [r6, #0]
 800427c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004280:	4607      	mov	r7, r0
 8004282:	460c      	mov	r4, r1
 8004284:	b10a      	cbz	r2, 800428a <_printf_common+0x26>
 8004286:	3301      	adds	r3, #1
 8004288:	6033      	str	r3, [r6, #0]
 800428a:	6823      	ldr	r3, [r4, #0]
 800428c:	0699      	lsls	r1, r3, #26
 800428e:	bf42      	ittt	mi
 8004290:	6833      	ldrmi	r3, [r6, #0]
 8004292:	3302      	addmi	r3, #2
 8004294:	6033      	strmi	r3, [r6, #0]
 8004296:	6825      	ldr	r5, [r4, #0]
 8004298:	f015 0506 	ands.w	r5, r5, #6
 800429c:	d106      	bne.n	80042ac <_printf_common+0x48>
 800429e:	f104 0a19 	add.w	sl, r4, #25
 80042a2:	68e3      	ldr	r3, [r4, #12]
 80042a4:	6832      	ldr	r2, [r6, #0]
 80042a6:	1a9b      	subs	r3, r3, r2
 80042a8:	42ab      	cmp	r3, r5
 80042aa:	dc26      	bgt.n	80042fa <_printf_common+0x96>
 80042ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80042b0:	1e13      	subs	r3, r2, #0
 80042b2:	6822      	ldr	r2, [r4, #0]
 80042b4:	bf18      	it	ne
 80042b6:	2301      	movne	r3, #1
 80042b8:	0692      	lsls	r2, r2, #26
 80042ba:	d42b      	bmi.n	8004314 <_printf_common+0xb0>
 80042bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042c0:	4649      	mov	r1, r9
 80042c2:	4638      	mov	r0, r7
 80042c4:	47c0      	blx	r8
 80042c6:	3001      	adds	r0, #1
 80042c8:	d01e      	beq.n	8004308 <_printf_common+0xa4>
 80042ca:	6823      	ldr	r3, [r4, #0]
 80042cc:	68e5      	ldr	r5, [r4, #12]
 80042ce:	6832      	ldr	r2, [r6, #0]
 80042d0:	f003 0306 	and.w	r3, r3, #6
 80042d4:	2b04      	cmp	r3, #4
 80042d6:	bf08      	it	eq
 80042d8:	1aad      	subeq	r5, r5, r2
 80042da:	68a3      	ldr	r3, [r4, #8]
 80042dc:	6922      	ldr	r2, [r4, #16]
 80042de:	bf0c      	ite	eq
 80042e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042e4:	2500      	movne	r5, #0
 80042e6:	4293      	cmp	r3, r2
 80042e8:	bfc4      	itt	gt
 80042ea:	1a9b      	subgt	r3, r3, r2
 80042ec:	18ed      	addgt	r5, r5, r3
 80042ee:	2600      	movs	r6, #0
 80042f0:	341a      	adds	r4, #26
 80042f2:	42b5      	cmp	r5, r6
 80042f4:	d11a      	bne.n	800432c <_printf_common+0xc8>
 80042f6:	2000      	movs	r0, #0
 80042f8:	e008      	b.n	800430c <_printf_common+0xa8>
 80042fa:	2301      	movs	r3, #1
 80042fc:	4652      	mov	r2, sl
 80042fe:	4649      	mov	r1, r9
 8004300:	4638      	mov	r0, r7
 8004302:	47c0      	blx	r8
 8004304:	3001      	adds	r0, #1
 8004306:	d103      	bne.n	8004310 <_printf_common+0xac>
 8004308:	f04f 30ff 	mov.w	r0, #4294967295
 800430c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004310:	3501      	adds	r5, #1
 8004312:	e7c6      	b.n	80042a2 <_printf_common+0x3e>
 8004314:	18e1      	adds	r1, r4, r3
 8004316:	1c5a      	adds	r2, r3, #1
 8004318:	2030      	movs	r0, #48	; 0x30
 800431a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800431e:	4422      	add	r2, r4
 8004320:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004324:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004328:	3302      	adds	r3, #2
 800432a:	e7c7      	b.n	80042bc <_printf_common+0x58>
 800432c:	2301      	movs	r3, #1
 800432e:	4622      	mov	r2, r4
 8004330:	4649      	mov	r1, r9
 8004332:	4638      	mov	r0, r7
 8004334:	47c0      	blx	r8
 8004336:	3001      	adds	r0, #1
 8004338:	d0e6      	beq.n	8004308 <_printf_common+0xa4>
 800433a:	3601      	adds	r6, #1
 800433c:	e7d9      	b.n	80042f2 <_printf_common+0x8e>
	...

08004340 <_printf_i>:
 8004340:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004344:	7e0f      	ldrb	r7, [r1, #24]
 8004346:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004348:	2f78      	cmp	r7, #120	; 0x78
 800434a:	4691      	mov	r9, r2
 800434c:	4680      	mov	r8, r0
 800434e:	460c      	mov	r4, r1
 8004350:	469a      	mov	sl, r3
 8004352:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004356:	d807      	bhi.n	8004368 <_printf_i+0x28>
 8004358:	2f62      	cmp	r7, #98	; 0x62
 800435a:	d80a      	bhi.n	8004372 <_printf_i+0x32>
 800435c:	2f00      	cmp	r7, #0
 800435e:	f000 80d8 	beq.w	8004512 <_printf_i+0x1d2>
 8004362:	2f58      	cmp	r7, #88	; 0x58
 8004364:	f000 80a3 	beq.w	80044ae <_printf_i+0x16e>
 8004368:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800436c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004370:	e03a      	b.n	80043e8 <_printf_i+0xa8>
 8004372:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004376:	2b15      	cmp	r3, #21
 8004378:	d8f6      	bhi.n	8004368 <_printf_i+0x28>
 800437a:	a101      	add	r1, pc, #4	; (adr r1, 8004380 <_printf_i+0x40>)
 800437c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004380:	080043d9 	.word	0x080043d9
 8004384:	080043ed 	.word	0x080043ed
 8004388:	08004369 	.word	0x08004369
 800438c:	08004369 	.word	0x08004369
 8004390:	08004369 	.word	0x08004369
 8004394:	08004369 	.word	0x08004369
 8004398:	080043ed 	.word	0x080043ed
 800439c:	08004369 	.word	0x08004369
 80043a0:	08004369 	.word	0x08004369
 80043a4:	08004369 	.word	0x08004369
 80043a8:	08004369 	.word	0x08004369
 80043ac:	080044f9 	.word	0x080044f9
 80043b0:	0800441d 	.word	0x0800441d
 80043b4:	080044db 	.word	0x080044db
 80043b8:	08004369 	.word	0x08004369
 80043bc:	08004369 	.word	0x08004369
 80043c0:	0800451b 	.word	0x0800451b
 80043c4:	08004369 	.word	0x08004369
 80043c8:	0800441d 	.word	0x0800441d
 80043cc:	08004369 	.word	0x08004369
 80043d0:	08004369 	.word	0x08004369
 80043d4:	080044e3 	.word	0x080044e3
 80043d8:	682b      	ldr	r3, [r5, #0]
 80043da:	1d1a      	adds	r2, r3, #4
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	602a      	str	r2, [r5, #0]
 80043e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043e8:	2301      	movs	r3, #1
 80043ea:	e0a3      	b.n	8004534 <_printf_i+0x1f4>
 80043ec:	6820      	ldr	r0, [r4, #0]
 80043ee:	6829      	ldr	r1, [r5, #0]
 80043f0:	0606      	lsls	r6, r0, #24
 80043f2:	f101 0304 	add.w	r3, r1, #4
 80043f6:	d50a      	bpl.n	800440e <_printf_i+0xce>
 80043f8:	680e      	ldr	r6, [r1, #0]
 80043fa:	602b      	str	r3, [r5, #0]
 80043fc:	2e00      	cmp	r6, #0
 80043fe:	da03      	bge.n	8004408 <_printf_i+0xc8>
 8004400:	232d      	movs	r3, #45	; 0x2d
 8004402:	4276      	negs	r6, r6
 8004404:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004408:	485e      	ldr	r0, [pc, #376]	; (8004584 <_printf_i+0x244>)
 800440a:	230a      	movs	r3, #10
 800440c:	e019      	b.n	8004442 <_printf_i+0x102>
 800440e:	680e      	ldr	r6, [r1, #0]
 8004410:	602b      	str	r3, [r5, #0]
 8004412:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004416:	bf18      	it	ne
 8004418:	b236      	sxthne	r6, r6
 800441a:	e7ef      	b.n	80043fc <_printf_i+0xbc>
 800441c:	682b      	ldr	r3, [r5, #0]
 800441e:	6820      	ldr	r0, [r4, #0]
 8004420:	1d19      	adds	r1, r3, #4
 8004422:	6029      	str	r1, [r5, #0]
 8004424:	0601      	lsls	r1, r0, #24
 8004426:	d501      	bpl.n	800442c <_printf_i+0xec>
 8004428:	681e      	ldr	r6, [r3, #0]
 800442a:	e002      	b.n	8004432 <_printf_i+0xf2>
 800442c:	0646      	lsls	r6, r0, #25
 800442e:	d5fb      	bpl.n	8004428 <_printf_i+0xe8>
 8004430:	881e      	ldrh	r6, [r3, #0]
 8004432:	4854      	ldr	r0, [pc, #336]	; (8004584 <_printf_i+0x244>)
 8004434:	2f6f      	cmp	r7, #111	; 0x6f
 8004436:	bf0c      	ite	eq
 8004438:	2308      	moveq	r3, #8
 800443a:	230a      	movne	r3, #10
 800443c:	2100      	movs	r1, #0
 800443e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004442:	6865      	ldr	r5, [r4, #4]
 8004444:	60a5      	str	r5, [r4, #8]
 8004446:	2d00      	cmp	r5, #0
 8004448:	bfa2      	ittt	ge
 800444a:	6821      	ldrge	r1, [r4, #0]
 800444c:	f021 0104 	bicge.w	r1, r1, #4
 8004450:	6021      	strge	r1, [r4, #0]
 8004452:	b90e      	cbnz	r6, 8004458 <_printf_i+0x118>
 8004454:	2d00      	cmp	r5, #0
 8004456:	d04d      	beq.n	80044f4 <_printf_i+0x1b4>
 8004458:	4615      	mov	r5, r2
 800445a:	fbb6 f1f3 	udiv	r1, r6, r3
 800445e:	fb03 6711 	mls	r7, r3, r1, r6
 8004462:	5dc7      	ldrb	r7, [r0, r7]
 8004464:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004468:	4637      	mov	r7, r6
 800446a:	42bb      	cmp	r3, r7
 800446c:	460e      	mov	r6, r1
 800446e:	d9f4      	bls.n	800445a <_printf_i+0x11a>
 8004470:	2b08      	cmp	r3, #8
 8004472:	d10b      	bne.n	800448c <_printf_i+0x14c>
 8004474:	6823      	ldr	r3, [r4, #0]
 8004476:	07de      	lsls	r6, r3, #31
 8004478:	d508      	bpl.n	800448c <_printf_i+0x14c>
 800447a:	6923      	ldr	r3, [r4, #16]
 800447c:	6861      	ldr	r1, [r4, #4]
 800447e:	4299      	cmp	r1, r3
 8004480:	bfde      	ittt	le
 8004482:	2330      	movle	r3, #48	; 0x30
 8004484:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004488:	f105 35ff 	addle.w	r5, r5, #4294967295
 800448c:	1b52      	subs	r2, r2, r5
 800448e:	6122      	str	r2, [r4, #16]
 8004490:	f8cd a000 	str.w	sl, [sp]
 8004494:	464b      	mov	r3, r9
 8004496:	aa03      	add	r2, sp, #12
 8004498:	4621      	mov	r1, r4
 800449a:	4640      	mov	r0, r8
 800449c:	f7ff fee2 	bl	8004264 <_printf_common>
 80044a0:	3001      	adds	r0, #1
 80044a2:	d14c      	bne.n	800453e <_printf_i+0x1fe>
 80044a4:	f04f 30ff 	mov.w	r0, #4294967295
 80044a8:	b004      	add	sp, #16
 80044aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044ae:	4835      	ldr	r0, [pc, #212]	; (8004584 <_printf_i+0x244>)
 80044b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80044b4:	6829      	ldr	r1, [r5, #0]
 80044b6:	6823      	ldr	r3, [r4, #0]
 80044b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80044bc:	6029      	str	r1, [r5, #0]
 80044be:	061d      	lsls	r5, r3, #24
 80044c0:	d514      	bpl.n	80044ec <_printf_i+0x1ac>
 80044c2:	07df      	lsls	r7, r3, #31
 80044c4:	bf44      	itt	mi
 80044c6:	f043 0320 	orrmi.w	r3, r3, #32
 80044ca:	6023      	strmi	r3, [r4, #0]
 80044cc:	b91e      	cbnz	r6, 80044d6 <_printf_i+0x196>
 80044ce:	6823      	ldr	r3, [r4, #0]
 80044d0:	f023 0320 	bic.w	r3, r3, #32
 80044d4:	6023      	str	r3, [r4, #0]
 80044d6:	2310      	movs	r3, #16
 80044d8:	e7b0      	b.n	800443c <_printf_i+0xfc>
 80044da:	6823      	ldr	r3, [r4, #0]
 80044dc:	f043 0320 	orr.w	r3, r3, #32
 80044e0:	6023      	str	r3, [r4, #0]
 80044e2:	2378      	movs	r3, #120	; 0x78
 80044e4:	4828      	ldr	r0, [pc, #160]	; (8004588 <_printf_i+0x248>)
 80044e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80044ea:	e7e3      	b.n	80044b4 <_printf_i+0x174>
 80044ec:	0659      	lsls	r1, r3, #25
 80044ee:	bf48      	it	mi
 80044f0:	b2b6      	uxthmi	r6, r6
 80044f2:	e7e6      	b.n	80044c2 <_printf_i+0x182>
 80044f4:	4615      	mov	r5, r2
 80044f6:	e7bb      	b.n	8004470 <_printf_i+0x130>
 80044f8:	682b      	ldr	r3, [r5, #0]
 80044fa:	6826      	ldr	r6, [r4, #0]
 80044fc:	6961      	ldr	r1, [r4, #20]
 80044fe:	1d18      	adds	r0, r3, #4
 8004500:	6028      	str	r0, [r5, #0]
 8004502:	0635      	lsls	r5, r6, #24
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	d501      	bpl.n	800450c <_printf_i+0x1cc>
 8004508:	6019      	str	r1, [r3, #0]
 800450a:	e002      	b.n	8004512 <_printf_i+0x1d2>
 800450c:	0670      	lsls	r0, r6, #25
 800450e:	d5fb      	bpl.n	8004508 <_printf_i+0x1c8>
 8004510:	8019      	strh	r1, [r3, #0]
 8004512:	2300      	movs	r3, #0
 8004514:	6123      	str	r3, [r4, #16]
 8004516:	4615      	mov	r5, r2
 8004518:	e7ba      	b.n	8004490 <_printf_i+0x150>
 800451a:	682b      	ldr	r3, [r5, #0]
 800451c:	1d1a      	adds	r2, r3, #4
 800451e:	602a      	str	r2, [r5, #0]
 8004520:	681d      	ldr	r5, [r3, #0]
 8004522:	6862      	ldr	r2, [r4, #4]
 8004524:	2100      	movs	r1, #0
 8004526:	4628      	mov	r0, r5
 8004528:	f7fb fe62 	bl	80001f0 <memchr>
 800452c:	b108      	cbz	r0, 8004532 <_printf_i+0x1f2>
 800452e:	1b40      	subs	r0, r0, r5
 8004530:	6060      	str	r0, [r4, #4]
 8004532:	6863      	ldr	r3, [r4, #4]
 8004534:	6123      	str	r3, [r4, #16]
 8004536:	2300      	movs	r3, #0
 8004538:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800453c:	e7a8      	b.n	8004490 <_printf_i+0x150>
 800453e:	6923      	ldr	r3, [r4, #16]
 8004540:	462a      	mov	r2, r5
 8004542:	4649      	mov	r1, r9
 8004544:	4640      	mov	r0, r8
 8004546:	47d0      	blx	sl
 8004548:	3001      	adds	r0, #1
 800454a:	d0ab      	beq.n	80044a4 <_printf_i+0x164>
 800454c:	6823      	ldr	r3, [r4, #0]
 800454e:	079b      	lsls	r3, r3, #30
 8004550:	d413      	bmi.n	800457a <_printf_i+0x23a>
 8004552:	68e0      	ldr	r0, [r4, #12]
 8004554:	9b03      	ldr	r3, [sp, #12]
 8004556:	4298      	cmp	r0, r3
 8004558:	bfb8      	it	lt
 800455a:	4618      	movlt	r0, r3
 800455c:	e7a4      	b.n	80044a8 <_printf_i+0x168>
 800455e:	2301      	movs	r3, #1
 8004560:	4632      	mov	r2, r6
 8004562:	4649      	mov	r1, r9
 8004564:	4640      	mov	r0, r8
 8004566:	47d0      	blx	sl
 8004568:	3001      	adds	r0, #1
 800456a:	d09b      	beq.n	80044a4 <_printf_i+0x164>
 800456c:	3501      	adds	r5, #1
 800456e:	68e3      	ldr	r3, [r4, #12]
 8004570:	9903      	ldr	r1, [sp, #12]
 8004572:	1a5b      	subs	r3, r3, r1
 8004574:	42ab      	cmp	r3, r5
 8004576:	dcf2      	bgt.n	800455e <_printf_i+0x21e>
 8004578:	e7eb      	b.n	8004552 <_printf_i+0x212>
 800457a:	2500      	movs	r5, #0
 800457c:	f104 0619 	add.w	r6, r4, #25
 8004580:	e7f5      	b.n	800456e <_printf_i+0x22e>
 8004582:	bf00      	nop
 8004584:	08006856 	.word	0x08006856
 8004588:	08006867 	.word	0x08006867

0800458c <iprintf>:
 800458c:	b40f      	push	{r0, r1, r2, r3}
 800458e:	4b0a      	ldr	r3, [pc, #40]	; (80045b8 <iprintf+0x2c>)
 8004590:	b513      	push	{r0, r1, r4, lr}
 8004592:	681c      	ldr	r4, [r3, #0]
 8004594:	b124      	cbz	r4, 80045a0 <iprintf+0x14>
 8004596:	69a3      	ldr	r3, [r4, #24]
 8004598:	b913      	cbnz	r3, 80045a0 <iprintf+0x14>
 800459a:	4620      	mov	r0, r4
 800459c:	f001 f8d8 	bl	8005750 <__sinit>
 80045a0:	ab05      	add	r3, sp, #20
 80045a2:	9a04      	ldr	r2, [sp, #16]
 80045a4:	68a1      	ldr	r1, [r4, #8]
 80045a6:	9301      	str	r3, [sp, #4]
 80045a8:	4620      	mov	r0, r4
 80045aa:	f001 fe95 	bl	80062d8 <_vfiprintf_r>
 80045ae:	b002      	add	sp, #8
 80045b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045b4:	b004      	add	sp, #16
 80045b6:	4770      	bx	lr
 80045b8:	2000000c 	.word	0x2000000c

080045bc <_puts_r>:
 80045bc:	b570      	push	{r4, r5, r6, lr}
 80045be:	460e      	mov	r6, r1
 80045c0:	4605      	mov	r5, r0
 80045c2:	b118      	cbz	r0, 80045cc <_puts_r+0x10>
 80045c4:	6983      	ldr	r3, [r0, #24]
 80045c6:	b90b      	cbnz	r3, 80045cc <_puts_r+0x10>
 80045c8:	f001 f8c2 	bl	8005750 <__sinit>
 80045cc:	69ab      	ldr	r3, [r5, #24]
 80045ce:	68ac      	ldr	r4, [r5, #8]
 80045d0:	b913      	cbnz	r3, 80045d8 <_puts_r+0x1c>
 80045d2:	4628      	mov	r0, r5
 80045d4:	f001 f8bc 	bl	8005750 <__sinit>
 80045d8:	4b2c      	ldr	r3, [pc, #176]	; (800468c <_puts_r+0xd0>)
 80045da:	429c      	cmp	r4, r3
 80045dc:	d120      	bne.n	8004620 <_puts_r+0x64>
 80045de:	686c      	ldr	r4, [r5, #4]
 80045e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80045e2:	07db      	lsls	r3, r3, #31
 80045e4:	d405      	bmi.n	80045f2 <_puts_r+0x36>
 80045e6:	89a3      	ldrh	r3, [r4, #12]
 80045e8:	0598      	lsls	r0, r3, #22
 80045ea:	d402      	bmi.n	80045f2 <_puts_r+0x36>
 80045ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045ee:	f001 f952 	bl	8005896 <__retarget_lock_acquire_recursive>
 80045f2:	89a3      	ldrh	r3, [r4, #12]
 80045f4:	0719      	lsls	r1, r3, #28
 80045f6:	d51d      	bpl.n	8004634 <_puts_r+0x78>
 80045f8:	6923      	ldr	r3, [r4, #16]
 80045fa:	b1db      	cbz	r3, 8004634 <_puts_r+0x78>
 80045fc:	3e01      	subs	r6, #1
 80045fe:	68a3      	ldr	r3, [r4, #8]
 8004600:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004604:	3b01      	subs	r3, #1
 8004606:	60a3      	str	r3, [r4, #8]
 8004608:	bb39      	cbnz	r1, 800465a <_puts_r+0x9e>
 800460a:	2b00      	cmp	r3, #0
 800460c:	da38      	bge.n	8004680 <_puts_r+0xc4>
 800460e:	4622      	mov	r2, r4
 8004610:	210a      	movs	r1, #10
 8004612:	4628      	mov	r0, r5
 8004614:	f000 f848 	bl	80046a8 <__swbuf_r>
 8004618:	3001      	adds	r0, #1
 800461a:	d011      	beq.n	8004640 <_puts_r+0x84>
 800461c:	250a      	movs	r5, #10
 800461e:	e011      	b.n	8004644 <_puts_r+0x88>
 8004620:	4b1b      	ldr	r3, [pc, #108]	; (8004690 <_puts_r+0xd4>)
 8004622:	429c      	cmp	r4, r3
 8004624:	d101      	bne.n	800462a <_puts_r+0x6e>
 8004626:	68ac      	ldr	r4, [r5, #8]
 8004628:	e7da      	b.n	80045e0 <_puts_r+0x24>
 800462a:	4b1a      	ldr	r3, [pc, #104]	; (8004694 <_puts_r+0xd8>)
 800462c:	429c      	cmp	r4, r3
 800462e:	bf08      	it	eq
 8004630:	68ec      	ldreq	r4, [r5, #12]
 8004632:	e7d5      	b.n	80045e0 <_puts_r+0x24>
 8004634:	4621      	mov	r1, r4
 8004636:	4628      	mov	r0, r5
 8004638:	f000 f888 	bl	800474c <__swsetup_r>
 800463c:	2800      	cmp	r0, #0
 800463e:	d0dd      	beq.n	80045fc <_puts_r+0x40>
 8004640:	f04f 35ff 	mov.w	r5, #4294967295
 8004644:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004646:	07da      	lsls	r2, r3, #31
 8004648:	d405      	bmi.n	8004656 <_puts_r+0x9a>
 800464a:	89a3      	ldrh	r3, [r4, #12]
 800464c:	059b      	lsls	r3, r3, #22
 800464e:	d402      	bmi.n	8004656 <_puts_r+0x9a>
 8004650:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004652:	f001 f921 	bl	8005898 <__retarget_lock_release_recursive>
 8004656:	4628      	mov	r0, r5
 8004658:	bd70      	pop	{r4, r5, r6, pc}
 800465a:	2b00      	cmp	r3, #0
 800465c:	da04      	bge.n	8004668 <_puts_r+0xac>
 800465e:	69a2      	ldr	r2, [r4, #24]
 8004660:	429a      	cmp	r2, r3
 8004662:	dc06      	bgt.n	8004672 <_puts_r+0xb6>
 8004664:	290a      	cmp	r1, #10
 8004666:	d004      	beq.n	8004672 <_puts_r+0xb6>
 8004668:	6823      	ldr	r3, [r4, #0]
 800466a:	1c5a      	adds	r2, r3, #1
 800466c:	6022      	str	r2, [r4, #0]
 800466e:	7019      	strb	r1, [r3, #0]
 8004670:	e7c5      	b.n	80045fe <_puts_r+0x42>
 8004672:	4622      	mov	r2, r4
 8004674:	4628      	mov	r0, r5
 8004676:	f000 f817 	bl	80046a8 <__swbuf_r>
 800467a:	3001      	adds	r0, #1
 800467c:	d1bf      	bne.n	80045fe <_puts_r+0x42>
 800467e:	e7df      	b.n	8004640 <_puts_r+0x84>
 8004680:	6823      	ldr	r3, [r4, #0]
 8004682:	250a      	movs	r5, #10
 8004684:	1c5a      	adds	r2, r3, #1
 8004686:	6022      	str	r2, [r4, #0]
 8004688:	701d      	strb	r5, [r3, #0]
 800468a:	e7db      	b.n	8004644 <_puts_r+0x88>
 800468c:	08006928 	.word	0x08006928
 8004690:	08006948 	.word	0x08006948
 8004694:	08006908 	.word	0x08006908

08004698 <puts>:
 8004698:	4b02      	ldr	r3, [pc, #8]	; (80046a4 <puts+0xc>)
 800469a:	4601      	mov	r1, r0
 800469c:	6818      	ldr	r0, [r3, #0]
 800469e:	f7ff bf8d 	b.w	80045bc <_puts_r>
 80046a2:	bf00      	nop
 80046a4:	2000000c 	.word	0x2000000c

080046a8 <__swbuf_r>:
 80046a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046aa:	460e      	mov	r6, r1
 80046ac:	4614      	mov	r4, r2
 80046ae:	4605      	mov	r5, r0
 80046b0:	b118      	cbz	r0, 80046ba <__swbuf_r+0x12>
 80046b2:	6983      	ldr	r3, [r0, #24]
 80046b4:	b90b      	cbnz	r3, 80046ba <__swbuf_r+0x12>
 80046b6:	f001 f84b 	bl	8005750 <__sinit>
 80046ba:	4b21      	ldr	r3, [pc, #132]	; (8004740 <__swbuf_r+0x98>)
 80046bc:	429c      	cmp	r4, r3
 80046be:	d12b      	bne.n	8004718 <__swbuf_r+0x70>
 80046c0:	686c      	ldr	r4, [r5, #4]
 80046c2:	69a3      	ldr	r3, [r4, #24]
 80046c4:	60a3      	str	r3, [r4, #8]
 80046c6:	89a3      	ldrh	r3, [r4, #12]
 80046c8:	071a      	lsls	r2, r3, #28
 80046ca:	d52f      	bpl.n	800472c <__swbuf_r+0x84>
 80046cc:	6923      	ldr	r3, [r4, #16]
 80046ce:	b36b      	cbz	r3, 800472c <__swbuf_r+0x84>
 80046d0:	6923      	ldr	r3, [r4, #16]
 80046d2:	6820      	ldr	r0, [r4, #0]
 80046d4:	1ac0      	subs	r0, r0, r3
 80046d6:	6963      	ldr	r3, [r4, #20]
 80046d8:	b2f6      	uxtb	r6, r6
 80046da:	4283      	cmp	r3, r0
 80046dc:	4637      	mov	r7, r6
 80046de:	dc04      	bgt.n	80046ea <__swbuf_r+0x42>
 80046e0:	4621      	mov	r1, r4
 80046e2:	4628      	mov	r0, r5
 80046e4:	f000 ffa0 	bl	8005628 <_fflush_r>
 80046e8:	bb30      	cbnz	r0, 8004738 <__swbuf_r+0x90>
 80046ea:	68a3      	ldr	r3, [r4, #8]
 80046ec:	3b01      	subs	r3, #1
 80046ee:	60a3      	str	r3, [r4, #8]
 80046f0:	6823      	ldr	r3, [r4, #0]
 80046f2:	1c5a      	adds	r2, r3, #1
 80046f4:	6022      	str	r2, [r4, #0]
 80046f6:	701e      	strb	r6, [r3, #0]
 80046f8:	6963      	ldr	r3, [r4, #20]
 80046fa:	3001      	adds	r0, #1
 80046fc:	4283      	cmp	r3, r0
 80046fe:	d004      	beq.n	800470a <__swbuf_r+0x62>
 8004700:	89a3      	ldrh	r3, [r4, #12]
 8004702:	07db      	lsls	r3, r3, #31
 8004704:	d506      	bpl.n	8004714 <__swbuf_r+0x6c>
 8004706:	2e0a      	cmp	r6, #10
 8004708:	d104      	bne.n	8004714 <__swbuf_r+0x6c>
 800470a:	4621      	mov	r1, r4
 800470c:	4628      	mov	r0, r5
 800470e:	f000 ff8b 	bl	8005628 <_fflush_r>
 8004712:	b988      	cbnz	r0, 8004738 <__swbuf_r+0x90>
 8004714:	4638      	mov	r0, r7
 8004716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004718:	4b0a      	ldr	r3, [pc, #40]	; (8004744 <__swbuf_r+0x9c>)
 800471a:	429c      	cmp	r4, r3
 800471c:	d101      	bne.n	8004722 <__swbuf_r+0x7a>
 800471e:	68ac      	ldr	r4, [r5, #8]
 8004720:	e7cf      	b.n	80046c2 <__swbuf_r+0x1a>
 8004722:	4b09      	ldr	r3, [pc, #36]	; (8004748 <__swbuf_r+0xa0>)
 8004724:	429c      	cmp	r4, r3
 8004726:	bf08      	it	eq
 8004728:	68ec      	ldreq	r4, [r5, #12]
 800472a:	e7ca      	b.n	80046c2 <__swbuf_r+0x1a>
 800472c:	4621      	mov	r1, r4
 800472e:	4628      	mov	r0, r5
 8004730:	f000 f80c 	bl	800474c <__swsetup_r>
 8004734:	2800      	cmp	r0, #0
 8004736:	d0cb      	beq.n	80046d0 <__swbuf_r+0x28>
 8004738:	f04f 37ff 	mov.w	r7, #4294967295
 800473c:	e7ea      	b.n	8004714 <__swbuf_r+0x6c>
 800473e:	bf00      	nop
 8004740:	08006928 	.word	0x08006928
 8004744:	08006948 	.word	0x08006948
 8004748:	08006908 	.word	0x08006908

0800474c <__swsetup_r>:
 800474c:	4b32      	ldr	r3, [pc, #200]	; (8004818 <__swsetup_r+0xcc>)
 800474e:	b570      	push	{r4, r5, r6, lr}
 8004750:	681d      	ldr	r5, [r3, #0]
 8004752:	4606      	mov	r6, r0
 8004754:	460c      	mov	r4, r1
 8004756:	b125      	cbz	r5, 8004762 <__swsetup_r+0x16>
 8004758:	69ab      	ldr	r3, [r5, #24]
 800475a:	b913      	cbnz	r3, 8004762 <__swsetup_r+0x16>
 800475c:	4628      	mov	r0, r5
 800475e:	f000 fff7 	bl	8005750 <__sinit>
 8004762:	4b2e      	ldr	r3, [pc, #184]	; (800481c <__swsetup_r+0xd0>)
 8004764:	429c      	cmp	r4, r3
 8004766:	d10f      	bne.n	8004788 <__swsetup_r+0x3c>
 8004768:	686c      	ldr	r4, [r5, #4]
 800476a:	89a3      	ldrh	r3, [r4, #12]
 800476c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004770:	0719      	lsls	r1, r3, #28
 8004772:	d42c      	bmi.n	80047ce <__swsetup_r+0x82>
 8004774:	06dd      	lsls	r5, r3, #27
 8004776:	d411      	bmi.n	800479c <__swsetup_r+0x50>
 8004778:	2309      	movs	r3, #9
 800477a:	6033      	str	r3, [r6, #0]
 800477c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004780:	81a3      	strh	r3, [r4, #12]
 8004782:	f04f 30ff 	mov.w	r0, #4294967295
 8004786:	e03e      	b.n	8004806 <__swsetup_r+0xba>
 8004788:	4b25      	ldr	r3, [pc, #148]	; (8004820 <__swsetup_r+0xd4>)
 800478a:	429c      	cmp	r4, r3
 800478c:	d101      	bne.n	8004792 <__swsetup_r+0x46>
 800478e:	68ac      	ldr	r4, [r5, #8]
 8004790:	e7eb      	b.n	800476a <__swsetup_r+0x1e>
 8004792:	4b24      	ldr	r3, [pc, #144]	; (8004824 <__swsetup_r+0xd8>)
 8004794:	429c      	cmp	r4, r3
 8004796:	bf08      	it	eq
 8004798:	68ec      	ldreq	r4, [r5, #12]
 800479a:	e7e6      	b.n	800476a <__swsetup_r+0x1e>
 800479c:	0758      	lsls	r0, r3, #29
 800479e:	d512      	bpl.n	80047c6 <__swsetup_r+0x7a>
 80047a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047a2:	b141      	cbz	r1, 80047b6 <__swsetup_r+0x6a>
 80047a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80047a8:	4299      	cmp	r1, r3
 80047aa:	d002      	beq.n	80047b2 <__swsetup_r+0x66>
 80047ac:	4630      	mov	r0, r6
 80047ae:	f001 fc89 	bl	80060c4 <_free_r>
 80047b2:	2300      	movs	r3, #0
 80047b4:	6363      	str	r3, [r4, #52]	; 0x34
 80047b6:	89a3      	ldrh	r3, [r4, #12]
 80047b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80047bc:	81a3      	strh	r3, [r4, #12]
 80047be:	2300      	movs	r3, #0
 80047c0:	6063      	str	r3, [r4, #4]
 80047c2:	6923      	ldr	r3, [r4, #16]
 80047c4:	6023      	str	r3, [r4, #0]
 80047c6:	89a3      	ldrh	r3, [r4, #12]
 80047c8:	f043 0308 	orr.w	r3, r3, #8
 80047cc:	81a3      	strh	r3, [r4, #12]
 80047ce:	6923      	ldr	r3, [r4, #16]
 80047d0:	b94b      	cbnz	r3, 80047e6 <__swsetup_r+0x9a>
 80047d2:	89a3      	ldrh	r3, [r4, #12]
 80047d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80047d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047dc:	d003      	beq.n	80047e6 <__swsetup_r+0x9a>
 80047de:	4621      	mov	r1, r4
 80047e0:	4630      	mov	r0, r6
 80047e2:	f001 f87f 	bl	80058e4 <__smakebuf_r>
 80047e6:	89a0      	ldrh	r0, [r4, #12]
 80047e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80047ec:	f010 0301 	ands.w	r3, r0, #1
 80047f0:	d00a      	beq.n	8004808 <__swsetup_r+0xbc>
 80047f2:	2300      	movs	r3, #0
 80047f4:	60a3      	str	r3, [r4, #8]
 80047f6:	6963      	ldr	r3, [r4, #20]
 80047f8:	425b      	negs	r3, r3
 80047fa:	61a3      	str	r3, [r4, #24]
 80047fc:	6923      	ldr	r3, [r4, #16]
 80047fe:	b943      	cbnz	r3, 8004812 <__swsetup_r+0xc6>
 8004800:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004804:	d1ba      	bne.n	800477c <__swsetup_r+0x30>
 8004806:	bd70      	pop	{r4, r5, r6, pc}
 8004808:	0781      	lsls	r1, r0, #30
 800480a:	bf58      	it	pl
 800480c:	6963      	ldrpl	r3, [r4, #20]
 800480e:	60a3      	str	r3, [r4, #8]
 8004810:	e7f4      	b.n	80047fc <__swsetup_r+0xb0>
 8004812:	2000      	movs	r0, #0
 8004814:	e7f7      	b.n	8004806 <__swsetup_r+0xba>
 8004816:	bf00      	nop
 8004818:	2000000c 	.word	0x2000000c
 800481c:	08006928 	.word	0x08006928
 8004820:	08006948 	.word	0x08006948
 8004824:	08006908 	.word	0x08006908

08004828 <quorem>:
 8004828:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800482c:	6903      	ldr	r3, [r0, #16]
 800482e:	690c      	ldr	r4, [r1, #16]
 8004830:	42a3      	cmp	r3, r4
 8004832:	4607      	mov	r7, r0
 8004834:	f2c0 8081 	blt.w	800493a <quorem+0x112>
 8004838:	3c01      	subs	r4, #1
 800483a:	f101 0814 	add.w	r8, r1, #20
 800483e:	f100 0514 	add.w	r5, r0, #20
 8004842:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004846:	9301      	str	r3, [sp, #4]
 8004848:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800484c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004850:	3301      	adds	r3, #1
 8004852:	429a      	cmp	r2, r3
 8004854:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004858:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800485c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004860:	d331      	bcc.n	80048c6 <quorem+0x9e>
 8004862:	f04f 0e00 	mov.w	lr, #0
 8004866:	4640      	mov	r0, r8
 8004868:	46ac      	mov	ip, r5
 800486a:	46f2      	mov	sl, lr
 800486c:	f850 2b04 	ldr.w	r2, [r0], #4
 8004870:	b293      	uxth	r3, r2
 8004872:	fb06 e303 	mla	r3, r6, r3, lr
 8004876:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800487a:	b29b      	uxth	r3, r3
 800487c:	ebaa 0303 	sub.w	r3, sl, r3
 8004880:	f8dc a000 	ldr.w	sl, [ip]
 8004884:	0c12      	lsrs	r2, r2, #16
 8004886:	fa13 f38a 	uxtah	r3, r3, sl
 800488a:	fb06 e202 	mla	r2, r6, r2, lr
 800488e:	9300      	str	r3, [sp, #0]
 8004890:	9b00      	ldr	r3, [sp, #0]
 8004892:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004896:	b292      	uxth	r2, r2
 8004898:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800489c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80048a0:	f8bd 3000 	ldrh.w	r3, [sp]
 80048a4:	4581      	cmp	r9, r0
 80048a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80048aa:	f84c 3b04 	str.w	r3, [ip], #4
 80048ae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80048b2:	d2db      	bcs.n	800486c <quorem+0x44>
 80048b4:	f855 300b 	ldr.w	r3, [r5, fp]
 80048b8:	b92b      	cbnz	r3, 80048c6 <quorem+0x9e>
 80048ba:	9b01      	ldr	r3, [sp, #4]
 80048bc:	3b04      	subs	r3, #4
 80048be:	429d      	cmp	r5, r3
 80048c0:	461a      	mov	r2, r3
 80048c2:	d32e      	bcc.n	8004922 <quorem+0xfa>
 80048c4:	613c      	str	r4, [r7, #16]
 80048c6:	4638      	mov	r0, r7
 80048c8:	f001 fae4 	bl	8005e94 <__mcmp>
 80048cc:	2800      	cmp	r0, #0
 80048ce:	db24      	blt.n	800491a <quorem+0xf2>
 80048d0:	3601      	adds	r6, #1
 80048d2:	4628      	mov	r0, r5
 80048d4:	f04f 0c00 	mov.w	ip, #0
 80048d8:	f858 2b04 	ldr.w	r2, [r8], #4
 80048dc:	f8d0 e000 	ldr.w	lr, [r0]
 80048e0:	b293      	uxth	r3, r2
 80048e2:	ebac 0303 	sub.w	r3, ip, r3
 80048e6:	0c12      	lsrs	r2, r2, #16
 80048e8:	fa13 f38e 	uxtah	r3, r3, lr
 80048ec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80048f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80048fa:	45c1      	cmp	r9, r8
 80048fc:	f840 3b04 	str.w	r3, [r0], #4
 8004900:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004904:	d2e8      	bcs.n	80048d8 <quorem+0xb0>
 8004906:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800490a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800490e:	b922      	cbnz	r2, 800491a <quorem+0xf2>
 8004910:	3b04      	subs	r3, #4
 8004912:	429d      	cmp	r5, r3
 8004914:	461a      	mov	r2, r3
 8004916:	d30a      	bcc.n	800492e <quorem+0x106>
 8004918:	613c      	str	r4, [r7, #16]
 800491a:	4630      	mov	r0, r6
 800491c:	b003      	add	sp, #12
 800491e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004922:	6812      	ldr	r2, [r2, #0]
 8004924:	3b04      	subs	r3, #4
 8004926:	2a00      	cmp	r2, #0
 8004928:	d1cc      	bne.n	80048c4 <quorem+0x9c>
 800492a:	3c01      	subs	r4, #1
 800492c:	e7c7      	b.n	80048be <quorem+0x96>
 800492e:	6812      	ldr	r2, [r2, #0]
 8004930:	3b04      	subs	r3, #4
 8004932:	2a00      	cmp	r2, #0
 8004934:	d1f0      	bne.n	8004918 <quorem+0xf0>
 8004936:	3c01      	subs	r4, #1
 8004938:	e7eb      	b.n	8004912 <quorem+0xea>
 800493a:	2000      	movs	r0, #0
 800493c:	e7ee      	b.n	800491c <quorem+0xf4>
	...

08004940 <_dtoa_r>:
 8004940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004944:	ed2d 8b04 	vpush	{d8-d9}
 8004948:	ec57 6b10 	vmov	r6, r7, d0
 800494c:	b093      	sub	sp, #76	; 0x4c
 800494e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004950:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004954:	9106      	str	r1, [sp, #24]
 8004956:	ee10 aa10 	vmov	sl, s0
 800495a:	4604      	mov	r4, r0
 800495c:	9209      	str	r2, [sp, #36]	; 0x24
 800495e:	930c      	str	r3, [sp, #48]	; 0x30
 8004960:	46bb      	mov	fp, r7
 8004962:	b975      	cbnz	r5, 8004982 <_dtoa_r+0x42>
 8004964:	2010      	movs	r0, #16
 8004966:	f000 fffd 	bl	8005964 <malloc>
 800496a:	4602      	mov	r2, r0
 800496c:	6260      	str	r0, [r4, #36]	; 0x24
 800496e:	b920      	cbnz	r0, 800497a <_dtoa_r+0x3a>
 8004970:	4ba7      	ldr	r3, [pc, #668]	; (8004c10 <_dtoa_r+0x2d0>)
 8004972:	21ea      	movs	r1, #234	; 0xea
 8004974:	48a7      	ldr	r0, [pc, #668]	; (8004c14 <_dtoa_r+0x2d4>)
 8004976:	f001 fe45 	bl	8006604 <__assert_func>
 800497a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800497e:	6005      	str	r5, [r0, #0]
 8004980:	60c5      	str	r5, [r0, #12]
 8004982:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004984:	6819      	ldr	r1, [r3, #0]
 8004986:	b151      	cbz	r1, 800499e <_dtoa_r+0x5e>
 8004988:	685a      	ldr	r2, [r3, #4]
 800498a:	604a      	str	r2, [r1, #4]
 800498c:	2301      	movs	r3, #1
 800498e:	4093      	lsls	r3, r2
 8004990:	608b      	str	r3, [r1, #8]
 8004992:	4620      	mov	r0, r4
 8004994:	f001 f83c 	bl	8005a10 <_Bfree>
 8004998:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800499a:	2200      	movs	r2, #0
 800499c:	601a      	str	r2, [r3, #0]
 800499e:	1e3b      	subs	r3, r7, #0
 80049a0:	bfaa      	itet	ge
 80049a2:	2300      	movge	r3, #0
 80049a4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80049a8:	f8c8 3000 	strge.w	r3, [r8]
 80049ac:	4b9a      	ldr	r3, [pc, #616]	; (8004c18 <_dtoa_r+0x2d8>)
 80049ae:	bfbc      	itt	lt
 80049b0:	2201      	movlt	r2, #1
 80049b2:	f8c8 2000 	strlt.w	r2, [r8]
 80049b6:	ea33 030b 	bics.w	r3, r3, fp
 80049ba:	d11b      	bne.n	80049f4 <_dtoa_r+0xb4>
 80049bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80049be:	f242 730f 	movw	r3, #9999	; 0x270f
 80049c2:	6013      	str	r3, [r2, #0]
 80049c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80049c8:	4333      	orrs	r3, r6
 80049ca:	f000 8592 	beq.w	80054f2 <_dtoa_r+0xbb2>
 80049ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80049d0:	b963      	cbnz	r3, 80049ec <_dtoa_r+0xac>
 80049d2:	4b92      	ldr	r3, [pc, #584]	; (8004c1c <_dtoa_r+0x2dc>)
 80049d4:	e022      	b.n	8004a1c <_dtoa_r+0xdc>
 80049d6:	4b92      	ldr	r3, [pc, #584]	; (8004c20 <_dtoa_r+0x2e0>)
 80049d8:	9301      	str	r3, [sp, #4]
 80049da:	3308      	adds	r3, #8
 80049dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80049de:	6013      	str	r3, [r2, #0]
 80049e0:	9801      	ldr	r0, [sp, #4]
 80049e2:	b013      	add	sp, #76	; 0x4c
 80049e4:	ecbd 8b04 	vpop	{d8-d9}
 80049e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049ec:	4b8b      	ldr	r3, [pc, #556]	; (8004c1c <_dtoa_r+0x2dc>)
 80049ee:	9301      	str	r3, [sp, #4]
 80049f0:	3303      	adds	r3, #3
 80049f2:	e7f3      	b.n	80049dc <_dtoa_r+0x9c>
 80049f4:	2200      	movs	r2, #0
 80049f6:	2300      	movs	r3, #0
 80049f8:	4650      	mov	r0, sl
 80049fa:	4659      	mov	r1, fp
 80049fc:	f7fc f86c 	bl	8000ad8 <__aeabi_dcmpeq>
 8004a00:	ec4b ab19 	vmov	d9, sl, fp
 8004a04:	4680      	mov	r8, r0
 8004a06:	b158      	cbz	r0, 8004a20 <_dtoa_r+0xe0>
 8004a08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	6013      	str	r3, [r2, #0]
 8004a0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f000 856b 	beq.w	80054ec <_dtoa_r+0xbac>
 8004a16:	4883      	ldr	r0, [pc, #524]	; (8004c24 <_dtoa_r+0x2e4>)
 8004a18:	6018      	str	r0, [r3, #0]
 8004a1a:	1e43      	subs	r3, r0, #1
 8004a1c:	9301      	str	r3, [sp, #4]
 8004a1e:	e7df      	b.n	80049e0 <_dtoa_r+0xa0>
 8004a20:	ec4b ab10 	vmov	d0, sl, fp
 8004a24:	aa10      	add	r2, sp, #64	; 0x40
 8004a26:	a911      	add	r1, sp, #68	; 0x44
 8004a28:	4620      	mov	r0, r4
 8004a2a:	f001 fad9 	bl	8005fe0 <__d2b>
 8004a2e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8004a32:	ee08 0a10 	vmov	s16, r0
 8004a36:	2d00      	cmp	r5, #0
 8004a38:	f000 8084 	beq.w	8004b44 <_dtoa_r+0x204>
 8004a3c:	ee19 3a90 	vmov	r3, s19
 8004a40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a44:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004a48:	4656      	mov	r6, sl
 8004a4a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004a4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004a52:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8004a56:	4b74      	ldr	r3, [pc, #464]	; (8004c28 <_dtoa_r+0x2e8>)
 8004a58:	2200      	movs	r2, #0
 8004a5a:	4630      	mov	r0, r6
 8004a5c:	4639      	mov	r1, r7
 8004a5e:	f7fb fc1b 	bl	8000298 <__aeabi_dsub>
 8004a62:	a365      	add	r3, pc, #404	; (adr r3, 8004bf8 <_dtoa_r+0x2b8>)
 8004a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a68:	f7fb fdce 	bl	8000608 <__aeabi_dmul>
 8004a6c:	a364      	add	r3, pc, #400	; (adr r3, 8004c00 <_dtoa_r+0x2c0>)
 8004a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a72:	f7fb fc13 	bl	800029c <__adddf3>
 8004a76:	4606      	mov	r6, r0
 8004a78:	4628      	mov	r0, r5
 8004a7a:	460f      	mov	r7, r1
 8004a7c:	f7fb fd5a 	bl	8000534 <__aeabi_i2d>
 8004a80:	a361      	add	r3, pc, #388	; (adr r3, 8004c08 <_dtoa_r+0x2c8>)
 8004a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a86:	f7fb fdbf 	bl	8000608 <__aeabi_dmul>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	4630      	mov	r0, r6
 8004a90:	4639      	mov	r1, r7
 8004a92:	f7fb fc03 	bl	800029c <__adddf3>
 8004a96:	4606      	mov	r6, r0
 8004a98:	460f      	mov	r7, r1
 8004a9a:	f7fc f865 	bl	8000b68 <__aeabi_d2iz>
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	9000      	str	r0, [sp, #0]
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	4630      	mov	r0, r6
 8004aa6:	4639      	mov	r1, r7
 8004aa8:	f7fc f820 	bl	8000aec <__aeabi_dcmplt>
 8004aac:	b150      	cbz	r0, 8004ac4 <_dtoa_r+0x184>
 8004aae:	9800      	ldr	r0, [sp, #0]
 8004ab0:	f7fb fd40 	bl	8000534 <__aeabi_i2d>
 8004ab4:	4632      	mov	r2, r6
 8004ab6:	463b      	mov	r3, r7
 8004ab8:	f7fc f80e 	bl	8000ad8 <__aeabi_dcmpeq>
 8004abc:	b910      	cbnz	r0, 8004ac4 <_dtoa_r+0x184>
 8004abe:	9b00      	ldr	r3, [sp, #0]
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	9b00      	ldr	r3, [sp, #0]
 8004ac6:	2b16      	cmp	r3, #22
 8004ac8:	d85a      	bhi.n	8004b80 <_dtoa_r+0x240>
 8004aca:	9a00      	ldr	r2, [sp, #0]
 8004acc:	4b57      	ldr	r3, [pc, #348]	; (8004c2c <_dtoa_r+0x2ec>)
 8004ace:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad6:	ec51 0b19 	vmov	r0, r1, d9
 8004ada:	f7fc f807 	bl	8000aec <__aeabi_dcmplt>
 8004ade:	2800      	cmp	r0, #0
 8004ae0:	d050      	beq.n	8004b84 <_dtoa_r+0x244>
 8004ae2:	9b00      	ldr	r3, [sp, #0]
 8004ae4:	3b01      	subs	r3, #1
 8004ae6:	9300      	str	r3, [sp, #0]
 8004ae8:	2300      	movs	r3, #0
 8004aea:	930b      	str	r3, [sp, #44]	; 0x2c
 8004aec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004aee:	1b5d      	subs	r5, r3, r5
 8004af0:	1e6b      	subs	r3, r5, #1
 8004af2:	9305      	str	r3, [sp, #20]
 8004af4:	bf45      	ittet	mi
 8004af6:	f1c5 0301 	rsbmi	r3, r5, #1
 8004afa:	9304      	strmi	r3, [sp, #16]
 8004afc:	2300      	movpl	r3, #0
 8004afe:	2300      	movmi	r3, #0
 8004b00:	bf4c      	ite	mi
 8004b02:	9305      	strmi	r3, [sp, #20]
 8004b04:	9304      	strpl	r3, [sp, #16]
 8004b06:	9b00      	ldr	r3, [sp, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	db3d      	blt.n	8004b88 <_dtoa_r+0x248>
 8004b0c:	9b05      	ldr	r3, [sp, #20]
 8004b0e:	9a00      	ldr	r2, [sp, #0]
 8004b10:	920a      	str	r2, [sp, #40]	; 0x28
 8004b12:	4413      	add	r3, r2
 8004b14:	9305      	str	r3, [sp, #20]
 8004b16:	2300      	movs	r3, #0
 8004b18:	9307      	str	r3, [sp, #28]
 8004b1a:	9b06      	ldr	r3, [sp, #24]
 8004b1c:	2b09      	cmp	r3, #9
 8004b1e:	f200 8089 	bhi.w	8004c34 <_dtoa_r+0x2f4>
 8004b22:	2b05      	cmp	r3, #5
 8004b24:	bfc4      	itt	gt
 8004b26:	3b04      	subgt	r3, #4
 8004b28:	9306      	strgt	r3, [sp, #24]
 8004b2a:	9b06      	ldr	r3, [sp, #24]
 8004b2c:	f1a3 0302 	sub.w	r3, r3, #2
 8004b30:	bfcc      	ite	gt
 8004b32:	2500      	movgt	r5, #0
 8004b34:	2501      	movle	r5, #1
 8004b36:	2b03      	cmp	r3, #3
 8004b38:	f200 8087 	bhi.w	8004c4a <_dtoa_r+0x30a>
 8004b3c:	e8df f003 	tbb	[pc, r3]
 8004b40:	59383a2d 	.word	0x59383a2d
 8004b44:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004b48:	441d      	add	r5, r3
 8004b4a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004b4e:	2b20      	cmp	r3, #32
 8004b50:	bfc1      	itttt	gt
 8004b52:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004b56:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004b5a:	fa0b f303 	lslgt.w	r3, fp, r3
 8004b5e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004b62:	bfda      	itte	le
 8004b64:	f1c3 0320 	rsble	r3, r3, #32
 8004b68:	fa06 f003 	lslle.w	r0, r6, r3
 8004b6c:	4318      	orrgt	r0, r3
 8004b6e:	f7fb fcd1 	bl	8000514 <__aeabi_ui2d>
 8004b72:	2301      	movs	r3, #1
 8004b74:	4606      	mov	r6, r0
 8004b76:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004b7a:	3d01      	subs	r5, #1
 8004b7c:	930e      	str	r3, [sp, #56]	; 0x38
 8004b7e:	e76a      	b.n	8004a56 <_dtoa_r+0x116>
 8004b80:	2301      	movs	r3, #1
 8004b82:	e7b2      	b.n	8004aea <_dtoa_r+0x1aa>
 8004b84:	900b      	str	r0, [sp, #44]	; 0x2c
 8004b86:	e7b1      	b.n	8004aec <_dtoa_r+0x1ac>
 8004b88:	9b04      	ldr	r3, [sp, #16]
 8004b8a:	9a00      	ldr	r2, [sp, #0]
 8004b8c:	1a9b      	subs	r3, r3, r2
 8004b8e:	9304      	str	r3, [sp, #16]
 8004b90:	4253      	negs	r3, r2
 8004b92:	9307      	str	r3, [sp, #28]
 8004b94:	2300      	movs	r3, #0
 8004b96:	930a      	str	r3, [sp, #40]	; 0x28
 8004b98:	e7bf      	b.n	8004b1a <_dtoa_r+0x1da>
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	9308      	str	r3, [sp, #32]
 8004b9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	dc55      	bgt.n	8004c50 <_dtoa_r+0x310>
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004baa:	461a      	mov	r2, r3
 8004bac:	9209      	str	r2, [sp, #36]	; 0x24
 8004bae:	e00c      	b.n	8004bca <_dtoa_r+0x28a>
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e7f3      	b.n	8004b9c <_dtoa_r+0x25c>
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004bb8:	9308      	str	r3, [sp, #32]
 8004bba:	9b00      	ldr	r3, [sp, #0]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	9302      	str	r3, [sp, #8]
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	9303      	str	r3, [sp, #12]
 8004bc6:	bfb8      	it	lt
 8004bc8:	2301      	movlt	r3, #1
 8004bca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004bcc:	2200      	movs	r2, #0
 8004bce:	6042      	str	r2, [r0, #4]
 8004bd0:	2204      	movs	r2, #4
 8004bd2:	f102 0614 	add.w	r6, r2, #20
 8004bd6:	429e      	cmp	r6, r3
 8004bd8:	6841      	ldr	r1, [r0, #4]
 8004bda:	d93d      	bls.n	8004c58 <_dtoa_r+0x318>
 8004bdc:	4620      	mov	r0, r4
 8004bde:	f000 fed7 	bl	8005990 <_Balloc>
 8004be2:	9001      	str	r0, [sp, #4]
 8004be4:	2800      	cmp	r0, #0
 8004be6:	d13b      	bne.n	8004c60 <_dtoa_r+0x320>
 8004be8:	4b11      	ldr	r3, [pc, #68]	; (8004c30 <_dtoa_r+0x2f0>)
 8004bea:	4602      	mov	r2, r0
 8004bec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004bf0:	e6c0      	b.n	8004974 <_dtoa_r+0x34>
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e7df      	b.n	8004bb6 <_dtoa_r+0x276>
 8004bf6:	bf00      	nop
 8004bf8:	636f4361 	.word	0x636f4361
 8004bfc:	3fd287a7 	.word	0x3fd287a7
 8004c00:	8b60c8b3 	.word	0x8b60c8b3
 8004c04:	3fc68a28 	.word	0x3fc68a28
 8004c08:	509f79fb 	.word	0x509f79fb
 8004c0c:	3fd34413 	.word	0x3fd34413
 8004c10:	08006885 	.word	0x08006885
 8004c14:	0800689c 	.word	0x0800689c
 8004c18:	7ff00000 	.word	0x7ff00000
 8004c1c:	08006881 	.word	0x08006881
 8004c20:	08006878 	.word	0x08006878
 8004c24:	08006855 	.word	0x08006855
 8004c28:	3ff80000 	.word	0x3ff80000
 8004c2c:	080069f0 	.word	0x080069f0
 8004c30:	080068f7 	.word	0x080068f7
 8004c34:	2501      	movs	r5, #1
 8004c36:	2300      	movs	r3, #0
 8004c38:	9306      	str	r3, [sp, #24]
 8004c3a:	9508      	str	r5, [sp, #32]
 8004c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c40:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004c44:	2200      	movs	r2, #0
 8004c46:	2312      	movs	r3, #18
 8004c48:	e7b0      	b.n	8004bac <_dtoa_r+0x26c>
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	9308      	str	r3, [sp, #32]
 8004c4e:	e7f5      	b.n	8004c3c <_dtoa_r+0x2fc>
 8004c50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c52:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004c56:	e7b8      	b.n	8004bca <_dtoa_r+0x28a>
 8004c58:	3101      	adds	r1, #1
 8004c5a:	6041      	str	r1, [r0, #4]
 8004c5c:	0052      	lsls	r2, r2, #1
 8004c5e:	e7b8      	b.n	8004bd2 <_dtoa_r+0x292>
 8004c60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c62:	9a01      	ldr	r2, [sp, #4]
 8004c64:	601a      	str	r2, [r3, #0]
 8004c66:	9b03      	ldr	r3, [sp, #12]
 8004c68:	2b0e      	cmp	r3, #14
 8004c6a:	f200 809d 	bhi.w	8004da8 <_dtoa_r+0x468>
 8004c6e:	2d00      	cmp	r5, #0
 8004c70:	f000 809a 	beq.w	8004da8 <_dtoa_r+0x468>
 8004c74:	9b00      	ldr	r3, [sp, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	dd32      	ble.n	8004ce0 <_dtoa_r+0x3a0>
 8004c7a:	4ab7      	ldr	r2, [pc, #732]	; (8004f58 <_dtoa_r+0x618>)
 8004c7c:	f003 030f 	and.w	r3, r3, #15
 8004c80:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004c84:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004c88:	9b00      	ldr	r3, [sp, #0]
 8004c8a:	05d8      	lsls	r0, r3, #23
 8004c8c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004c90:	d516      	bpl.n	8004cc0 <_dtoa_r+0x380>
 8004c92:	4bb2      	ldr	r3, [pc, #712]	; (8004f5c <_dtoa_r+0x61c>)
 8004c94:	ec51 0b19 	vmov	r0, r1, d9
 8004c98:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004c9c:	f7fb fdde 	bl	800085c <__aeabi_ddiv>
 8004ca0:	f007 070f 	and.w	r7, r7, #15
 8004ca4:	4682      	mov	sl, r0
 8004ca6:	468b      	mov	fp, r1
 8004ca8:	2503      	movs	r5, #3
 8004caa:	4eac      	ldr	r6, [pc, #688]	; (8004f5c <_dtoa_r+0x61c>)
 8004cac:	b957      	cbnz	r7, 8004cc4 <_dtoa_r+0x384>
 8004cae:	4642      	mov	r2, r8
 8004cb0:	464b      	mov	r3, r9
 8004cb2:	4650      	mov	r0, sl
 8004cb4:	4659      	mov	r1, fp
 8004cb6:	f7fb fdd1 	bl	800085c <__aeabi_ddiv>
 8004cba:	4682      	mov	sl, r0
 8004cbc:	468b      	mov	fp, r1
 8004cbe:	e028      	b.n	8004d12 <_dtoa_r+0x3d2>
 8004cc0:	2502      	movs	r5, #2
 8004cc2:	e7f2      	b.n	8004caa <_dtoa_r+0x36a>
 8004cc4:	07f9      	lsls	r1, r7, #31
 8004cc6:	d508      	bpl.n	8004cda <_dtoa_r+0x39a>
 8004cc8:	4640      	mov	r0, r8
 8004cca:	4649      	mov	r1, r9
 8004ccc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004cd0:	f7fb fc9a 	bl	8000608 <__aeabi_dmul>
 8004cd4:	3501      	adds	r5, #1
 8004cd6:	4680      	mov	r8, r0
 8004cd8:	4689      	mov	r9, r1
 8004cda:	107f      	asrs	r7, r7, #1
 8004cdc:	3608      	adds	r6, #8
 8004cde:	e7e5      	b.n	8004cac <_dtoa_r+0x36c>
 8004ce0:	f000 809b 	beq.w	8004e1a <_dtoa_r+0x4da>
 8004ce4:	9b00      	ldr	r3, [sp, #0]
 8004ce6:	4f9d      	ldr	r7, [pc, #628]	; (8004f5c <_dtoa_r+0x61c>)
 8004ce8:	425e      	negs	r6, r3
 8004cea:	4b9b      	ldr	r3, [pc, #620]	; (8004f58 <_dtoa_r+0x618>)
 8004cec:	f006 020f 	and.w	r2, r6, #15
 8004cf0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf8:	ec51 0b19 	vmov	r0, r1, d9
 8004cfc:	f7fb fc84 	bl	8000608 <__aeabi_dmul>
 8004d00:	1136      	asrs	r6, r6, #4
 8004d02:	4682      	mov	sl, r0
 8004d04:	468b      	mov	fp, r1
 8004d06:	2300      	movs	r3, #0
 8004d08:	2502      	movs	r5, #2
 8004d0a:	2e00      	cmp	r6, #0
 8004d0c:	d17a      	bne.n	8004e04 <_dtoa_r+0x4c4>
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1d3      	bne.n	8004cba <_dtoa_r+0x37a>
 8004d12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f000 8082 	beq.w	8004e1e <_dtoa_r+0x4de>
 8004d1a:	4b91      	ldr	r3, [pc, #580]	; (8004f60 <_dtoa_r+0x620>)
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	4650      	mov	r0, sl
 8004d20:	4659      	mov	r1, fp
 8004d22:	f7fb fee3 	bl	8000aec <__aeabi_dcmplt>
 8004d26:	2800      	cmp	r0, #0
 8004d28:	d079      	beq.n	8004e1e <_dtoa_r+0x4de>
 8004d2a:	9b03      	ldr	r3, [sp, #12]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d076      	beq.n	8004e1e <_dtoa_r+0x4de>
 8004d30:	9b02      	ldr	r3, [sp, #8]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	dd36      	ble.n	8004da4 <_dtoa_r+0x464>
 8004d36:	9b00      	ldr	r3, [sp, #0]
 8004d38:	4650      	mov	r0, sl
 8004d3a:	4659      	mov	r1, fp
 8004d3c:	1e5f      	subs	r7, r3, #1
 8004d3e:	2200      	movs	r2, #0
 8004d40:	4b88      	ldr	r3, [pc, #544]	; (8004f64 <_dtoa_r+0x624>)
 8004d42:	f7fb fc61 	bl	8000608 <__aeabi_dmul>
 8004d46:	9e02      	ldr	r6, [sp, #8]
 8004d48:	4682      	mov	sl, r0
 8004d4a:	468b      	mov	fp, r1
 8004d4c:	3501      	adds	r5, #1
 8004d4e:	4628      	mov	r0, r5
 8004d50:	f7fb fbf0 	bl	8000534 <__aeabi_i2d>
 8004d54:	4652      	mov	r2, sl
 8004d56:	465b      	mov	r3, fp
 8004d58:	f7fb fc56 	bl	8000608 <__aeabi_dmul>
 8004d5c:	4b82      	ldr	r3, [pc, #520]	; (8004f68 <_dtoa_r+0x628>)
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f7fb fa9c 	bl	800029c <__adddf3>
 8004d64:	46d0      	mov	r8, sl
 8004d66:	46d9      	mov	r9, fp
 8004d68:	4682      	mov	sl, r0
 8004d6a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8004d6e:	2e00      	cmp	r6, #0
 8004d70:	d158      	bne.n	8004e24 <_dtoa_r+0x4e4>
 8004d72:	4b7e      	ldr	r3, [pc, #504]	; (8004f6c <_dtoa_r+0x62c>)
 8004d74:	2200      	movs	r2, #0
 8004d76:	4640      	mov	r0, r8
 8004d78:	4649      	mov	r1, r9
 8004d7a:	f7fb fa8d 	bl	8000298 <__aeabi_dsub>
 8004d7e:	4652      	mov	r2, sl
 8004d80:	465b      	mov	r3, fp
 8004d82:	4680      	mov	r8, r0
 8004d84:	4689      	mov	r9, r1
 8004d86:	f7fb fecf 	bl	8000b28 <__aeabi_dcmpgt>
 8004d8a:	2800      	cmp	r0, #0
 8004d8c:	f040 8295 	bne.w	80052ba <_dtoa_r+0x97a>
 8004d90:	4652      	mov	r2, sl
 8004d92:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004d96:	4640      	mov	r0, r8
 8004d98:	4649      	mov	r1, r9
 8004d9a:	f7fb fea7 	bl	8000aec <__aeabi_dcmplt>
 8004d9e:	2800      	cmp	r0, #0
 8004da0:	f040 8289 	bne.w	80052b6 <_dtoa_r+0x976>
 8004da4:	ec5b ab19 	vmov	sl, fp, d9
 8004da8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	f2c0 8148 	blt.w	8005040 <_dtoa_r+0x700>
 8004db0:	9a00      	ldr	r2, [sp, #0]
 8004db2:	2a0e      	cmp	r2, #14
 8004db4:	f300 8144 	bgt.w	8005040 <_dtoa_r+0x700>
 8004db8:	4b67      	ldr	r3, [pc, #412]	; (8004f58 <_dtoa_r+0x618>)
 8004dba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004dbe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004dc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f280 80d5 	bge.w	8004f74 <_dtoa_r+0x634>
 8004dca:	9b03      	ldr	r3, [sp, #12]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f300 80d1 	bgt.w	8004f74 <_dtoa_r+0x634>
 8004dd2:	f040 826f 	bne.w	80052b4 <_dtoa_r+0x974>
 8004dd6:	4b65      	ldr	r3, [pc, #404]	; (8004f6c <_dtoa_r+0x62c>)
 8004dd8:	2200      	movs	r2, #0
 8004dda:	4640      	mov	r0, r8
 8004ddc:	4649      	mov	r1, r9
 8004dde:	f7fb fc13 	bl	8000608 <__aeabi_dmul>
 8004de2:	4652      	mov	r2, sl
 8004de4:	465b      	mov	r3, fp
 8004de6:	f7fb fe95 	bl	8000b14 <__aeabi_dcmpge>
 8004dea:	9e03      	ldr	r6, [sp, #12]
 8004dec:	4637      	mov	r7, r6
 8004dee:	2800      	cmp	r0, #0
 8004df0:	f040 8245 	bne.w	800527e <_dtoa_r+0x93e>
 8004df4:	9d01      	ldr	r5, [sp, #4]
 8004df6:	2331      	movs	r3, #49	; 0x31
 8004df8:	f805 3b01 	strb.w	r3, [r5], #1
 8004dfc:	9b00      	ldr	r3, [sp, #0]
 8004dfe:	3301      	adds	r3, #1
 8004e00:	9300      	str	r3, [sp, #0]
 8004e02:	e240      	b.n	8005286 <_dtoa_r+0x946>
 8004e04:	07f2      	lsls	r2, r6, #31
 8004e06:	d505      	bpl.n	8004e14 <_dtoa_r+0x4d4>
 8004e08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e0c:	f7fb fbfc 	bl	8000608 <__aeabi_dmul>
 8004e10:	3501      	adds	r5, #1
 8004e12:	2301      	movs	r3, #1
 8004e14:	1076      	asrs	r6, r6, #1
 8004e16:	3708      	adds	r7, #8
 8004e18:	e777      	b.n	8004d0a <_dtoa_r+0x3ca>
 8004e1a:	2502      	movs	r5, #2
 8004e1c:	e779      	b.n	8004d12 <_dtoa_r+0x3d2>
 8004e1e:	9f00      	ldr	r7, [sp, #0]
 8004e20:	9e03      	ldr	r6, [sp, #12]
 8004e22:	e794      	b.n	8004d4e <_dtoa_r+0x40e>
 8004e24:	9901      	ldr	r1, [sp, #4]
 8004e26:	4b4c      	ldr	r3, [pc, #304]	; (8004f58 <_dtoa_r+0x618>)
 8004e28:	4431      	add	r1, r6
 8004e2a:	910d      	str	r1, [sp, #52]	; 0x34
 8004e2c:	9908      	ldr	r1, [sp, #32]
 8004e2e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004e32:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004e36:	2900      	cmp	r1, #0
 8004e38:	d043      	beq.n	8004ec2 <_dtoa_r+0x582>
 8004e3a:	494d      	ldr	r1, [pc, #308]	; (8004f70 <_dtoa_r+0x630>)
 8004e3c:	2000      	movs	r0, #0
 8004e3e:	f7fb fd0d 	bl	800085c <__aeabi_ddiv>
 8004e42:	4652      	mov	r2, sl
 8004e44:	465b      	mov	r3, fp
 8004e46:	f7fb fa27 	bl	8000298 <__aeabi_dsub>
 8004e4a:	9d01      	ldr	r5, [sp, #4]
 8004e4c:	4682      	mov	sl, r0
 8004e4e:	468b      	mov	fp, r1
 8004e50:	4649      	mov	r1, r9
 8004e52:	4640      	mov	r0, r8
 8004e54:	f7fb fe88 	bl	8000b68 <__aeabi_d2iz>
 8004e58:	4606      	mov	r6, r0
 8004e5a:	f7fb fb6b 	bl	8000534 <__aeabi_i2d>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	460b      	mov	r3, r1
 8004e62:	4640      	mov	r0, r8
 8004e64:	4649      	mov	r1, r9
 8004e66:	f7fb fa17 	bl	8000298 <__aeabi_dsub>
 8004e6a:	3630      	adds	r6, #48	; 0x30
 8004e6c:	f805 6b01 	strb.w	r6, [r5], #1
 8004e70:	4652      	mov	r2, sl
 8004e72:	465b      	mov	r3, fp
 8004e74:	4680      	mov	r8, r0
 8004e76:	4689      	mov	r9, r1
 8004e78:	f7fb fe38 	bl	8000aec <__aeabi_dcmplt>
 8004e7c:	2800      	cmp	r0, #0
 8004e7e:	d163      	bne.n	8004f48 <_dtoa_r+0x608>
 8004e80:	4642      	mov	r2, r8
 8004e82:	464b      	mov	r3, r9
 8004e84:	4936      	ldr	r1, [pc, #216]	; (8004f60 <_dtoa_r+0x620>)
 8004e86:	2000      	movs	r0, #0
 8004e88:	f7fb fa06 	bl	8000298 <__aeabi_dsub>
 8004e8c:	4652      	mov	r2, sl
 8004e8e:	465b      	mov	r3, fp
 8004e90:	f7fb fe2c 	bl	8000aec <__aeabi_dcmplt>
 8004e94:	2800      	cmp	r0, #0
 8004e96:	f040 80b5 	bne.w	8005004 <_dtoa_r+0x6c4>
 8004e9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e9c:	429d      	cmp	r5, r3
 8004e9e:	d081      	beq.n	8004da4 <_dtoa_r+0x464>
 8004ea0:	4b30      	ldr	r3, [pc, #192]	; (8004f64 <_dtoa_r+0x624>)
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	4650      	mov	r0, sl
 8004ea6:	4659      	mov	r1, fp
 8004ea8:	f7fb fbae 	bl	8000608 <__aeabi_dmul>
 8004eac:	4b2d      	ldr	r3, [pc, #180]	; (8004f64 <_dtoa_r+0x624>)
 8004eae:	4682      	mov	sl, r0
 8004eb0:	468b      	mov	fp, r1
 8004eb2:	4640      	mov	r0, r8
 8004eb4:	4649      	mov	r1, r9
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f7fb fba6 	bl	8000608 <__aeabi_dmul>
 8004ebc:	4680      	mov	r8, r0
 8004ebe:	4689      	mov	r9, r1
 8004ec0:	e7c6      	b.n	8004e50 <_dtoa_r+0x510>
 8004ec2:	4650      	mov	r0, sl
 8004ec4:	4659      	mov	r1, fp
 8004ec6:	f7fb fb9f 	bl	8000608 <__aeabi_dmul>
 8004eca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ecc:	9d01      	ldr	r5, [sp, #4]
 8004ece:	930f      	str	r3, [sp, #60]	; 0x3c
 8004ed0:	4682      	mov	sl, r0
 8004ed2:	468b      	mov	fp, r1
 8004ed4:	4649      	mov	r1, r9
 8004ed6:	4640      	mov	r0, r8
 8004ed8:	f7fb fe46 	bl	8000b68 <__aeabi_d2iz>
 8004edc:	4606      	mov	r6, r0
 8004ede:	f7fb fb29 	bl	8000534 <__aeabi_i2d>
 8004ee2:	3630      	adds	r6, #48	; 0x30
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	4640      	mov	r0, r8
 8004eea:	4649      	mov	r1, r9
 8004eec:	f7fb f9d4 	bl	8000298 <__aeabi_dsub>
 8004ef0:	f805 6b01 	strb.w	r6, [r5], #1
 8004ef4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ef6:	429d      	cmp	r5, r3
 8004ef8:	4680      	mov	r8, r0
 8004efa:	4689      	mov	r9, r1
 8004efc:	f04f 0200 	mov.w	r2, #0
 8004f00:	d124      	bne.n	8004f4c <_dtoa_r+0x60c>
 8004f02:	4b1b      	ldr	r3, [pc, #108]	; (8004f70 <_dtoa_r+0x630>)
 8004f04:	4650      	mov	r0, sl
 8004f06:	4659      	mov	r1, fp
 8004f08:	f7fb f9c8 	bl	800029c <__adddf3>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	460b      	mov	r3, r1
 8004f10:	4640      	mov	r0, r8
 8004f12:	4649      	mov	r1, r9
 8004f14:	f7fb fe08 	bl	8000b28 <__aeabi_dcmpgt>
 8004f18:	2800      	cmp	r0, #0
 8004f1a:	d173      	bne.n	8005004 <_dtoa_r+0x6c4>
 8004f1c:	4652      	mov	r2, sl
 8004f1e:	465b      	mov	r3, fp
 8004f20:	4913      	ldr	r1, [pc, #76]	; (8004f70 <_dtoa_r+0x630>)
 8004f22:	2000      	movs	r0, #0
 8004f24:	f7fb f9b8 	bl	8000298 <__aeabi_dsub>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	4640      	mov	r0, r8
 8004f2e:	4649      	mov	r1, r9
 8004f30:	f7fb fddc 	bl	8000aec <__aeabi_dcmplt>
 8004f34:	2800      	cmp	r0, #0
 8004f36:	f43f af35 	beq.w	8004da4 <_dtoa_r+0x464>
 8004f3a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004f3c:	1e6b      	subs	r3, r5, #1
 8004f3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004f40:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004f44:	2b30      	cmp	r3, #48	; 0x30
 8004f46:	d0f8      	beq.n	8004f3a <_dtoa_r+0x5fa>
 8004f48:	9700      	str	r7, [sp, #0]
 8004f4a:	e049      	b.n	8004fe0 <_dtoa_r+0x6a0>
 8004f4c:	4b05      	ldr	r3, [pc, #20]	; (8004f64 <_dtoa_r+0x624>)
 8004f4e:	f7fb fb5b 	bl	8000608 <__aeabi_dmul>
 8004f52:	4680      	mov	r8, r0
 8004f54:	4689      	mov	r9, r1
 8004f56:	e7bd      	b.n	8004ed4 <_dtoa_r+0x594>
 8004f58:	080069f0 	.word	0x080069f0
 8004f5c:	080069c8 	.word	0x080069c8
 8004f60:	3ff00000 	.word	0x3ff00000
 8004f64:	40240000 	.word	0x40240000
 8004f68:	401c0000 	.word	0x401c0000
 8004f6c:	40140000 	.word	0x40140000
 8004f70:	3fe00000 	.word	0x3fe00000
 8004f74:	9d01      	ldr	r5, [sp, #4]
 8004f76:	4656      	mov	r6, sl
 8004f78:	465f      	mov	r7, fp
 8004f7a:	4642      	mov	r2, r8
 8004f7c:	464b      	mov	r3, r9
 8004f7e:	4630      	mov	r0, r6
 8004f80:	4639      	mov	r1, r7
 8004f82:	f7fb fc6b 	bl	800085c <__aeabi_ddiv>
 8004f86:	f7fb fdef 	bl	8000b68 <__aeabi_d2iz>
 8004f8a:	4682      	mov	sl, r0
 8004f8c:	f7fb fad2 	bl	8000534 <__aeabi_i2d>
 8004f90:	4642      	mov	r2, r8
 8004f92:	464b      	mov	r3, r9
 8004f94:	f7fb fb38 	bl	8000608 <__aeabi_dmul>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	4630      	mov	r0, r6
 8004f9e:	4639      	mov	r1, r7
 8004fa0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8004fa4:	f7fb f978 	bl	8000298 <__aeabi_dsub>
 8004fa8:	f805 6b01 	strb.w	r6, [r5], #1
 8004fac:	9e01      	ldr	r6, [sp, #4]
 8004fae:	9f03      	ldr	r7, [sp, #12]
 8004fb0:	1bae      	subs	r6, r5, r6
 8004fb2:	42b7      	cmp	r7, r6
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	d135      	bne.n	8005026 <_dtoa_r+0x6e6>
 8004fba:	f7fb f96f 	bl	800029c <__adddf3>
 8004fbe:	4642      	mov	r2, r8
 8004fc0:	464b      	mov	r3, r9
 8004fc2:	4606      	mov	r6, r0
 8004fc4:	460f      	mov	r7, r1
 8004fc6:	f7fb fdaf 	bl	8000b28 <__aeabi_dcmpgt>
 8004fca:	b9d0      	cbnz	r0, 8005002 <_dtoa_r+0x6c2>
 8004fcc:	4642      	mov	r2, r8
 8004fce:	464b      	mov	r3, r9
 8004fd0:	4630      	mov	r0, r6
 8004fd2:	4639      	mov	r1, r7
 8004fd4:	f7fb fd80 	bl	8000ad8 <__aeabi_dcmpeq>
 8004fd8:	b110      	cbz	r0, 8004fe0 <_dtoa_r+0x6a0>
 8004fda:	f01a 0f01 	tst.w	sl, #1
 8004fde:	d110      	bne.n	8005002 <_dtoa_r+0x6c2>
 8004fe0:	4620      	mov	r0, r4
 8004fe2:	ee18 1a10 	vmov	r1, s16
 8004fe6:	f000 fd13 	bl	8005a10 <_Bfree>
 8004fea:	2300      	movs	r3, #0
 8004fec:	9800      	ldr	r0, [sp, #0]
 8004fee:	702b      	strb	r3, [r5, #0]
 8004ff0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004ff2:	3001      	adds	r0, #1
 8004ff4:	6018      	str	r0, [r3, #0]
 8004ff6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f43f acf1 	beq.w	80049e0 <_dtoa_r+0xa0>
 8004ffe:	601d      	str	r5, [r3, #0]
 8005000:	e4ee      	b.n	80049e0 <_dtoa_r+0xa0>
 8005002:	9f00      	ldr	r7, [sp, #0]
 8005004:	462b      	mov	r3, r5
 8005006:	461d      	mov	r5, r3
 8005008:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800500c:	2a39      	cmp	r2, #57	; 0x39
 800500e:	d106      	bne.n	800501e <_dtoa_r+0x6de>
 8005010:	9a01      	ldr	r2, [sp, #4]
 8005012:	429a      	cmp	r2, r3
 8005014:	d1f7      	bne.n	8005006 <_dtoa_r+0x6c6>
 8005016:	9901      	ldr	r1, [sp, #4]
 8005018:	2230      	movs	r2, #48	; 0x30
 800501a:	3701      	adds	r7, #1
 800501c:	700a      	strb	r2, [r1, #0]
 800501e:	781a      	ldrb	r2, [r3, #0]
 8005020:	3201      	adds	r2, #1
 8005022:	701a      	strb	r2, [r3, #0]
 8005024:	e790      	b.n	8004f48 <_dtoa_r+0x608>
 8005026:	4ba6      	ldr	r3, [pc, #664]	; (80052c0 <_dtoa_r+0x980>)
 8005028:	2200      	movs	r2, #0
 800502a:	f7fb faed 	bl	8000608 <__aeabi_dmul>
 800502e:	2200      	movs	r2, #0
 8005030:	2300      	movs	r3, #0
 8005032:	4606      	mov	r6, r0
 8005034:	460f      	mov	r7, r1
 8005036:	f7fb fd4f 	bl	8000ad8 <__aeabi_dcmpeq>
 800503a:	2800      	cmp	r0, #0
 800503c:	d09d      	beq.n	8004f7a <_dtoa_r+0x63a>
 800503e:	e7cf      	b.n	8004fe0 <_dtoa_r+0x6a0>
 8005040:	9a08      	ldr	r2, [sp, #32]
 8005042:	2a00      	cmp	r2, #0
 8005044:	f000 80d7 	beq.w	80051f6 <_dtoa_r+0x8b6>
 8005048:	9a06      	ldr	r2, [sp, #24]
 800504a:	2a01      	cmp	r2, #1
 800504c:	f300 80ba 	bgt.w	80051c4 <_dtoa_r+0x884>
 8005050:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005052:	2a00      	cmp	r2, #0
 8005054:	f000 80b2 	beq.w	80051bc <_dtoa_r+0x87c>
 8005058:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800505c:	9e07      	ldr	r6, [sp, #28]
 800505e:	9d04      	ldr	r5, [sp, #16]
 8005060:	9a04      	ldr	r2, [sp, #16]
 8005062:	441a      	add	r2, r3
 8005064:	9204      	str	r2, [sp, #16]
 8005066:	9a05      	ldr	r2, [sp, #20]
 8005068:	2101      	movs	r1, #1
 800506a:	441a      	add	r2, r3
 800506c:	4620      	mov	r0, r4
 800506e:	9205      	str	r2, [sp, #20]
 8005070:	f000 fd86 	bl	8005b80 <__i2b>
 8005074:	4607      	mov	r7, r0
 8005076:	2d00      	cmp	r5, #0
 8005078:	dd0c      	ble.n	8005094 <_dtoa_r+0x754>
 800507a:	9b05      	ldr	r3, [sp, #20]
 800507c:	2b00      	cmp	r3, #0
 800507e:	dd09      	ble.n	8005094 <_dtoa_r+0x754>
 8005080:	42ab      	cmp	r3, r5
 8005082:	9a04      	ldr	r2, [sp, #16]
 8005084:	bfa8      	it	ge
 8005086:	462b      	movge	r3, r5
 8005088:	1ad2      	subs	r2, r2, r3
 800508a:	9204      	str	r2, [sp, #16]
 800508c:	9a05      	ldr	r2, [sp, #20]
 800508e:	1aed      	subs	r5, r5, r3
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	9305      	str	r3, [sp, #20]
 8005094:	9b07      	ldr	r3, [sp, #28]
 8005096:	b31b      	cbz	r3, 80050e0 <_dtoa_r+0x7a0>
 8005098:	9b08      	ldr	r3, [sp, #32]
 800509a:	2b00      	cmp	r3, #0
 800509c:	f000 80af 	beq.w	80051fe <_dtoa_r+0x8be>
 80050a0:	2e00      	cmp	r6, #0
 80050a2:	dd13      	ble.n	80050cc <_dtoa_r+0x78c>
 80050a4:	4639      	mov	r1, r7
 80050a6:	4632      	mov	r2, r6
 80050a8:	4620      	mov	r0, r4
 80050aa:	f000 fe29 	bl	8005d00 <__pow5mult>
 80050ae:	ee18 2a10 	vmov	r2, s16
 80050b2:	4601      	mov	r1, r0
 80050b4:	4607      	mov	r7, r0
 80050b6:	4620      	mov	r0, r4
 80050b8:	f000 fd78 	bl	8005bac <__multiply>
 80050bc:	ee18 1a10 	vmov	r1, s16
 80050c0:	4680      	mov	r8, r0
 80050c2:	4620      	mov	r0, r4
 80050c4:	f000 fca4 	bl	8005a10 <_Bfree>
 80050c8:	ee08 8a10 	vmov	s16, r8
 80050cc:	9b07      	ldr	r3, [sp, #28]
 80050ce:	1b9a      	subs	r2, r3, r6
 80050d0:	d006      	beq.n	80050e0 <_dtoa_r+0x7a0>
 80050d2:	ee18 1a10 	vmov	r1, s16
 80050d6:	4620      	mov	r0, r4
 80050d8:	f000 fe12 	bl	8005d00 <__pow5mult>
 80050dc:	ee08 0a10 	vmov	s16, r0
 80050e0:	2101      	movs	r1, #1
 80050e2:	4620      	mov	r0, r4
 80050e4:	f000 fd4c 	bl	8005b80 <__i2b>
 80050e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	4606      	mov	r6, r0
 80050ee:	f340 8088 	ble.w	8005202 <_dtoa_r+0x8c2>
 80050f2:	461a      	mov	r2, r3
 80050f4:	4601      	mov	r1, r0
 80050f6:	4620      	mov	r0, r4
 80050f8:	f000 fe02 	bl	8005d00 <__pow5mult>
 80050fc:	9b06      	ldr	r3, [sp, #24]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	4606      	mov	r6, r0
 8005102:	f340 8081 	ble.w	8005208 <_dtoa_r+0x8c8>
 8005106:	f04f 0800 	mov.w	r8, #0
 800510a:	6933      	ldr	r3, [r6, #16]
 800510c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005110:	6918      	ldr	r0, [r3, #16]
 8005112:	f000 fce5 	bl	8005ae0 <__hi0bits>
 8005116:	f1c0 0020 	rsb	r0, r0, #32
 800511a:	9b05      	ldr	r3, [sp, #20]
 800511c:	4418      	add	r0, r3
 800511e:	f010 001f 	ands.w	r0, r0, #31
 8005122:	f000 8092 	beq.w	800524a <_dtoa_r+0x90a>
 8005126:	f1c0 0320 	rsb	r3, r0, #32
 800512a:	2b04      	cmp	r3, #4
 800512c:	f340 808a 	ble.w	8005244 <_dtoa_r+0x904>
 8005130:	f1c0 001c 	rsb	r0, r0, #28
 8005134:	9b04      	ldr	r3, [sp, #16]
 8005136:	4403      	add	r3, r0
 8005138:	9304      	str	r3, [sp, #16]
 800513a:	9b05      	ldr	r3, [sp, #20]
 800513c:	4403      	add	r3, r0
 800513e:	4405      	add	r5, r0
 8005140:	9305      	str	r3, [sp, #20]
 8005142:	9b04      	ldr	r3, [sp, #16]
 8005144:	2b00      	cmp	r3, #0
 8005146:	dd07      	ble.n	8005158 <_dtoa_r+0x818>
 8005148:	ee18 1a10 	vmov	r1, s16
 800514c:	461a      	mov	r2, r3
 800514e:	4620      	mov	r0, r4
 8005150:	f000 fe30 	bl	8005db4 <__lshift>
 8005154:	ee08 0a10 	vmov	s16, r0
 8005158:	9b05      	ldr	r3, [sp, #20]
 800515a:	2b00      	cmp	r3, #0
 800515c:	dd05      	ble.n	800516a <_dtoa_r+0x82a>
 800515e:	4631      	mov	r1, r6
 8005160:	461a      	mov	r2, r3
 8005162:	4620      	mov	r0, r4
 8005164:	f000 fe26 	bl	8005db4 <__lshift>
 8005168:	4606      	mov	r6, r0
 800516a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800516c:	2b00      	cmp	r3, #0
 800516e:	d06e      	beq.n	800524e <_dtoa_r+0x90e>
 8005170:	ee18 0a10 	vmov	r0, s16
 8005174:	4631      	mov	r1, r6
 8005176:	f000 fe8d 	bl	8005e94 <__mcmp>
 800517a:	2800      	cmp	r0, #0
 800517c:	da67      	bge.n	800524e <_dtoa_r+0x90e>
 800517e:	9b00      	ldr	r3, [sp, #0]
 8005180:	3b01      	subs	r3, #1
 8005182:	ee18 1a10 	vmov	r1, s16
 8005186:	9300      	str	r3, [sp, #0]
 8005188:	220a      	movs	r2, #10
 800518a:	2300      	movs	r3, #0
 800518c:	4620      	mov	r0, r4
 800518e:	f000 fc61 	bl	8005a54 <__multadd>
 8005192:	9b08      	ldr	r3, [sp, #32]
 8005194:	ee08 0a10 	vmov	s16, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	f000 81b1 	beq.w	8005500 <_dtoa_r+0xbc0>
 800519e:	2300      	movs	r3, #0
 80051a0:	4639      	mov	r1, r7
 80051a2:	220a      	movs	r2, #10
 80051a4:	4620      	mov	r0, r4
 80051a6:	f000 fc55 	bl	8005a54 <__multadd>
 80051aa:	9b02      	ldr	r3, [sp, #8]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	4607      	mov	r7, r0
 80051b0:	f300 808e 	bgt.w	80052d0 <_dtoa_r+0x990>
 80051b4:	9b06      	ldr	r3, [sp, #24]
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	dc51      	bgt.n	800525e <_dtoa_r+0x91e>
 80051ba:	e089      	b.n	80052d0 <_dtoa_r+0x990>
 80051bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80051be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80051c2:	e74b      	b.n	800505c <_dtoa_r+0x71c>
 80051c4:	9b03      	ldr	r3, [sp, #12]
 80051c6:	1e5e      	subs	r6, r3, #1
 80051c8:	9b07      	ldr	r3, [sp, #28]
 80051ca:	42b3      	cmp	r3, r6
 80051cc:	bfbf      	itttt	lt
 80051ce:	9b07      	ldrlt	r3, [sp, #28]
 80051d0:	9607      	strlt	r6, [sp, #28]
 80051d2:	1af2      	sublt	r2, r6, r3
 80051d4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80051d6:	bfb6      	itet	lt
 80051d8:	189b      	addlt	r3, r3, r2
 80051da:	1b9e      	subge	r6, r3, r6
 80051dc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80051de:	9b03      	ldr	r3, [sp, #12]
 80051e0:	bfb8      	it	lt
 80051e2:	2600      	movlt	r6, #0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	bfb7      	itett	lt
 80051e8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80051ec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80051f0:	1a9d      	sublt	r5, r3, r2
 80051f2:	2300      	movlt	r3, #0
 80051f4:	e734      	b.n	8005060 <_dtoa_r+0x720>
 80051f6:	9e07      	ldr	r6, [sp, #28]
 80051f8:	9d04      	ldr	r5, [sp, #16]
 80051fa:	9f08      	ldr	r7, [sp, #32]
 80051fc:	e73b      	b.n	8005076 <_dtoa_r+0x736>
 80051fe:	9a07      	ldr	r2, [sp, #28]
 8005200:	e767      	b.n	80050d2 <_dtoa_r+0x792>
 8005202:	9b06      	ldr	r3, [sp, #24]
 8005204:	2b01      	cmp	r3, #1
 8005206:	dc18      	bgt.n	800523a <_dtoa_r+0x8fa>
 8005208:	f1ba 0f00 	cmp.w	sl, #0
 800520c:	d115      	bne.n	800523a <_dtoa_r+0x8fa>
 800520e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005212:	b993      	cbnz	r3, 800523a <_dtoa_r+0x8fa>
 8005214:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005218:	0d1b      	lsrs	r3, r3, #20
 800521a:	051b      	lsls	r3, r3, #20
 800521c:	b183      	cbz	r3, 8005240 <_dtoa_r+0x900>
 800521e:	9b04      	ldr	r3, [sp, #16]
 8005220:	3301      	adds	r3, #1
 8005222:	9304      	str	r3, [sp, #16]
 8005224:	9b05      	ldr	r3, [sp, #20]
 8005226:	3301      	adds	r3, #1
 8005228:	9305      	str	r3, [sp, #20]
 800522a:	f04f 0801 	mov.w	r8, #1
 800522e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005230:	2b00      	cmp	r3, #0
 8005232:	f47f af6a 	bne.w	800510a <_dtoa_r+0x7ca>
 8005236:	2001      	movs	r0, #1
 8005238:	e76f      	b.n	800511a <_dtoa_r+0x7da>
 800523a:	f04f 0800 	mov.w	r8, #0
 800523e:	e7f6      	b.n	800522e <_dtoa_r+0x8ee>
 8005240:	4698      	mov	r8, r3
 8005242:	e7f4      	b.n	800522e <_dtoa_r+0x8ee>
 8005244:	f43f af7d 	beq.w	8005142 <_dtoa_r+0x802>
 8005248:	4618      	mov	r0, r3
 800524a:	301c      	adds	r0, #28
 800524c:	e772      	b.n	8005134 <_dtoa_r+0x7f4>
 800524e:	9b03      	ldr	r3, [sp, #12]
 8005250:	2b00      	cmp	r3, #0
 8005252:	dc37      	bgt.n	80052c4 <_dtoa_r+0x984>
 8005254:	9b06      	ldr	r3, [sp, #24]
 8005256:	2b02      	cmp	r3, #2
 8005258:	dd34      	ble.n	80052c4 <_dtoa_r+0x984>
 800525a:	9b03      	ldr	r3, [sp, #12]
 800525c:	9302      	str	r3, [sp, #8]
 800525e:	9b02      	ldr	r3, [sp, #8]
 8005260:	b96b      	cbnz	r3, 800527e <_dtoa_r+0x93e>
 8005262:	4631      	mov	r1, r6
 8005264:	2205      	movs	r2, #5
 8005266:	4620      	mov	r0, r4
 8005268:	f000 fbf4 	bl	8005a54 <__multadd>
 800526c:	4601      	mov	r1, r0
 800526e:	4606      	mov	r6, r0
 8005270:	ee18 0a10 	vmov	r0, s16
 8005274:	f000 fe0e 	bl	8005e94 <__mcmp>
 8005278:	2800      	cmp	r0, #0
 800527a:	f73f adbb 	bgt.w	8004df4 <_dtoa_r+0x4b4>
 800527e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005280:	9d01      	ldr	r5, [sp, #4]
 8005282:	43db      	mvns	r3, r3
 8005284:	9300      	str	r3, [sp, #0]
 8005286:	f04f 0800 	mov.w	r8, #0
 800528a:	4631      	mov	r1, r6
 800528c:	4620      	mov	r0, r4
 800528e:	f000 fbbf 	bl	8005a10 <_Bfree>
 8005292:	2f00      	cmp	r7, #0
 8005294:	f43f aea4 	beq.w	8004fe0 <_dtoa_r+0x6a0>
 8005298:	f1b8 0f00 	cmp.w	r8, #0
 800529c:	d005      	beq.n	80052aa <_dtoa_r+0x96a>
 800529e:	45b8      	cmp	r8, r7
 80052a0:	d003      	beq.n	80052aa <_dtoa_r+0x96a>
 80052a2:	4641      	mov	r1, r8
 80052a4:	4620      	mov	r0, r4
 80052a6:	f000 fbb3 	bl	8005a10 <_Bfree>
 80052aa:	4639      	mov	r1, r7
 80052ac:	4620      	mov	r0, r4
 80052ae:	f000 fbaf 	bl	8005a10 <_Bfree>
 80052b2:	e695      	b.n	8004fe0 <_dtoa_r+0x6a0>
 80052b4:	2600      	movs	r6, #0
 80052b6:	4637      	mov	r7, r6
 80052b8:	e7e1      	b.n	800527e <_dtoa_r+0x93e>
 80052ba:	9700      	str	r7, [sp, #0]
 80052bc:	4637      	mov	r7, r6
 80052be:	e599      	b.n	8004df4 <_dtoa_r+0x4b4>
 80052c0:	40240000 	.word	0x40240000
 80052c4:	9b08      	ldr	r3, [sp, #32]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	f000 80ca 	beq.w	8005460 <_dtoa_r+0xb20>
 80052cc:	9b03      	ldr	r3, [sp, #12]
 80052ce:	9302      	str	r3, [sp, #8]
 80052d0:	2d00      	cmp	r5, #0
 80052d2:	dd05      	ble.n	80052e0 <_dtoa_r+0x9a0>
 80052d4:	4639      	mov	r1, r7
 80052d6:	462a      	mov	r2, r5
 80052d8:	4620      	mov	r0, r4
 80052da:	f000 fd6b 	bl	8005db4 <__lshift>
 80052de:	4607      	mov	r7, r0
 80052e0:	f1b8 0f00 	cmp.w	r8, #0
 80052e4:	d05b      	beq.n	800539e <_dtoa_r+0xa5e>
 80052e6:	6879      	ldr	r1, [r7, #4]
 80052e8:	4620      	mov	r0, r4
 80052ea:	f000 fb51 	bl	8005990 <_Balloc>
 80052ee:	4605      	mov	r5, r0
 80052f0:	b928      	cbnz	r0, 80052fe <_dtoa_r+0x9be>
 80052f2:	4b87      	ldr	r3, [pc, #540]	; (8005510 <_dtoa_r+0xbd0>)
 80052f4:	4602      	mov	r2, r0
 80052f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80052fa:	f7ff bb3b 	b.w	8004974 <_dtoa_r+0x34>
 80052fe:	693a      	ldr	r2, [r7, #16]
 8005300:	3202      	adds	r2, #2
 8005302:	0092      	lsls	r2, r2, #2
 8005304:	f107 010c 	add.w	r1, r7, #12
 8005308:	300c      	adds	r0, #12
 800530a:	f000 fb33 	bl	8005974 <memcpy>
 800530e:	2201      	movs	r2, #1
 8005310:	4629      	mov	r1, r5
 8005312:	4620      	mov	r0, r4
 8005314:	f000 fd4e 	bl	8005db4 <__lshift>
 8005318:	9b01      	ldr	r3, [sp, #4]
 800531a:	f103 0901 	add.w	r9, r3, #1
 800531e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005322:	4413      	add	r3, r2
 8005324:	9305      	str	r3, [sp, #20]
 8005326:	f00a 0301 	and.w	r3, sl, #1
 800532a:	46b8      	mov	r8, r7
 800532c:	9304      	str	r3, [sp, #16]
 800532e:	4607      	mov	r7, r0
 8005330:	4631      	mov	r1, r6
 8005332:	ee18 0a10 	vmov	r0, s16
 8005336:	f7ff fa77 	bl	8004828 <quorem>
 800533a:	4641      	mov	r1, r8
 800533c:	9002      	str	r0, [sp, #8]
 800533e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005342:	ee18 0a10 	vmov	r0, s16
 8005346:	f000 fda5 	bl	8005e94 <__mcmp>
 800534a:	463a      	mov	r2, r7
 800534c:	9003      	str	r0, [sp, #12]
 800534e:	4631      	mov	r1, r6
 8005350:	4620      	mov	r0, r4
 8005352:	f000 fdbb 	bl	8005ecc <__mdiff>
 8005356:	68c2      	ldr	r2, [r0, #12]
 8005358:	f109 3bff 	add.w	fp, r9, #4294967295
 800535c:	4605      	mov	r5, r0
 800535e:	bb02      	cbnz	r2, 80053a2 <_dtoa_r+0xa62>
 8005360:	4601      	mov	r1, r0
 8005362:	ee18 0a10 	vmov	r0, s16
 8005366:	f000 fd95 	bl	8005e94 <__mcmp>
 800536a:	4602      	mov	r2, r0
 800536c:	4629      	mov	r1, r5
 800536e:	4620      	mov	r0, r4
 8005370:	9207      	str	r2, [sp, #28]
 8005372:	f000 fb4d 	bl	8005a10 <_Bfree>
 8005376:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800537a:	ea43 0102 	orr.w	r1, r3, r2
 800537e:	9b04      	ldr	r3, [sp, #16]
 8005380:	430b      	orrs	r3, r1
 8005382:	464d      	mov	r5, r9
 8005384:	d10f      	bne.n	80053a6 <_dtoa_r+0xa66>
 8005386:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800538a:	d02a      	beq.n	80053e2 <_dtoa_r+0xaa2>
 800538c:	9b03      	ldr	r3, [sp, #12]
 800538e:	2b00      	cmp	r3, #0
 8005390:	dd02      	ble.n	8005398 <_dtoa_r+0xa58>
 8005392:	9b02      	ldr	r3, [sp, #8]
 8005394:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005398:	f88b a000 	strb.w	sl, [fp]
 800539c:	e775      	b.n	800528a <_dtoa_r+0x94a>
 800539e:	4638      	mov	r0, r7
 80053a0:	e7ba      	b.n	8005318 <_dtoa_r+0x9d8>
 80053a2:	2201      	movs	r2, #1
 80053a4:	e7e2      	b.n	800536c <_dtoa_r+0xa2c>
 80053a6:	9b03      	ldr	r3, [sp, #12]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	db04      	blt.n	80053b6 <_dtoa_r+0xa76>
 80053ac:	9906      	ldr	r1, [sp, #24]
 80053ae:	430b      	orrs	r3, r1
 80053b0:	9904      	ldr	r1, [sp, #16]
 80053b2:	430b      	orrs	r3, r1
 80053b4:	d122      	bne.n	80053fc <_dtoa_r+0xabc>
 80053b6:	2a00      	cmp	r2, #0
 80053b8:	ddee      	ble.n	8005398 <_dtoa_r+0xa58>
 80053ba:	ee18 1a10 	vmov	r1, s16
 80053be:	2201      	movs	r2, #1
 80053c0:	4620      	mov	r0, r4
 80053c2:	f000 fcf7 	bl	8005db4 <__lshift>
 80053c6:	4631      	mov	r1, r6
 80053c8:	ee08 0a10 	vmov	s16, r0
 80053cc:	f000 fd62 	bl	8005e94 <__mcmp>
 80053d0:	2800      	cmp	r0, #0
 80053d2:	dc03      	bgt.n	80053dc <_dtoa_r+0xa9c>
 80053d4:	d1e0      	bne.n	8005398 <_dtoa_r+0xa58>
 80053d6:	f01a 0f01 	tst.w	sl, #1
 80053da:	d0dd      	beq.n	8005398 <_dtoa_r+0xa58>
 80053dc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80053e0:	d1d7      	bne.n	8005392 <_dtoa_r+0xa52>
 80053e2:	2339      	movs	r3, #57	; 0x39
 80053e4:	f88b 3000 	strb.w	r3, [fp]
 80053e8:	462b      	mov	r3, r5
 80053ea:	461d      	mov	r5, r3
 80053ec:	3b01      	subs	r3, #1
 80053ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80053f2:	2a39      	cmp	r2, #57	; 0x39
 80053f4:	d071      	beq.n	80054da <_dtoa_r+0xb9a>
 80053f6:	3201      	adds	r2, #1
 80053f8:	701a      	strb	r2, [r3, #0]
 80053fa:	e746      	b.n	800528a <_dtoa_r+0x94a>
 80053fc:	2a00      	cmp	r2, #0
 80053fe:	dd07      	ble.n	8005410 <_dtoa_r+0xad0>
 8005400:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005404:	d0ed      	beq.n	80053e2 <_dtoa_r+0xaa2>
 8005406:	f10a 0301 	add.w	r3, sl, #1
 800540a:	f88b 3000 	strb.w	r3, [fp]
 800540e:	e73c      	b.n	800528a <_dtoa_r+0x94a>
 8005410:	9b05      	ldr	r3, [sp, #20]
 8005412:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005416:	4599      	cmp	r9, r3
 8005418:	d047      	beq.n	80054aa <_dtoa_r+0xb6a>
 800541a:	ee18 1a10 	vmov	r1, s16
 800541e:	2300      	movs	r3, #0
 8005420:	220a      	movs	r2, #10
 8005422:	4620      	mov	r0, r4
 8005424:	f000 fb16 	bl	8005a54 <__multadd>
 8005428:	45b8      	cmp	r8, r7
 800542a:	ee08 0a10 	vmov	s16, r0
 800542e:	f04f 0300 	mov.w	r3, #0
 8005432:	f04f 020a 	mov.w	r2, #10
 8005436:	4641      	mov	r1, r8
 8005438:	4620      	mov	r0, r4
 800543a:	d106      	bne.n	800544a <_dtoa_r+0xb0a>
 800543c:	f000 fb0a 	bl	8005a54 <__multadd>
 8005440:	4680      	mov	r8, r0
 8005442:	4607      	mov	r7, r0
 8005444:	f109 0901 	add.w	r9, r9, #1
 8005448:	e772      	b.n	8005330 <_dtoa_r+0x9f0>
 800544a:	f000 fb03 	bl	8005a54 <__multadd>
 800544e:	4639      	mov	r1, r7
 8005450:	4680      	mov	r8, r0
 8005452:	2300      	movs	r3, #0
 8005454:	220a      	movs	r2, #10
 8005456:	4620      	mov	r0, r4
 8005458:	f000 fafc 	bl	8005a54 <__multadd>
 800545c:	4607      	mov	r7, r0
 800545e:	e7f1      	b.n	8005444 <_dtoa_r+0xb04>
 8005460:	9b03      	ldr	r3, [sp, #12]
 8005462:	9302      	str	r3, [sp, #8]
 8005464:	9d01      	ldr	r5, [sp, #4]
 8005466:	ee18 0a10 	vmov	r0, s16
 800546a:	4631      	mov	r1, r6
 800546c:	f7ff f9dc 	bl	8004828 <quorem>
 8005470:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005474:	9b01      	ldr	r3, [sp, #4]
 8005476:	f805 ab01 	strb.w	sl, [r5], #1
 800547a:	1aea      	subs	r2, r5, r3
 800547c:	9b02      	ldr	r3, [sp, #8]
 800547e:	4293      	cmp	r3, r2
 8005480:	dd09      	ble.n	8005496 <_dtoa_r+0xb56>
 8005482:	ee18 1a10 	vmov	r1, s16
 8005486:	2300      	movs	r3, #0
 8005488:	220a      	movs	r2, #10
 800548a:	4620      	mov	r0, r4
 800548c:	f000 fae2 	bl	8005a54 <__multadd>
 8005490:	ee08 0a10 	vmov	s16, r0
 8005494:	e7e7      	b.n	8005466 <_dtoa_r+0xb26>
 8005496:	9b02      	ldr	r3, [sp, #8]
 8005498:	2b00      	cmp	r3, #0
 800549a:	bfc8      	it	gt
 800549c:	461d      	movgt	r5, r3
 800549e:	9b01      	ldr	r3, [sp, #4]
 80054a0:	bfd8      	it	le
 80054a2:	2501      	movle	r5, #1
 80054a4:	441d      	add	r5, r3
 80054a6:	f04f 0800 	mov.w	r8, #0
 80054aa:	ee18 1a10 	vmov	r1, s16
 80054ae:	2201      	movs	r2, #1
 80054b0:	4620      	mov	r0, r4
 80054b2:	f000 fc7f 	bl	8005db4 <__lshift>
 80054b6:	4631      	mov	r1, r6
 80054b8:	ee08 0a10 	vmov	s16, r0
 80054bc:	f000 fcea 	bl	8005e94 <__mcmp>
 80054c0:	2800      	cmp	r0, #0
 80054c2:	dc91      	bgt.n	80053e8 <_dtoa_r+0xaa8>
 80054c4:	d102      	bne.n	80054cc <_dtoa_r+0xb8c>
 80054c6:	f01a 0f01 	tst.w	sl, #1
 80054ca:	d18d      	bne.n	80053e8 <_dtoa_r+0xaa8>
 80054cc:	462b      	mov	r3, r5
 80054ce:	461d      	mov	r5, r3
 80054d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80054d4:	2a30      	cmp	r2, #48	; 0x30
 80054d6:	d0fa      	beq.n	80054ce <_dtoa_r+0xb8e>
 80054d8:	e6d7      	b.n	800528a <_dtoa_r+0x94a>
 80054da:	9a01      	ldr	r2, [sp, #4]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d184      	bne.n	80053ea <_dtoa_r+0xaaa>
 80054e0:	9b00      	ldr	r3, [sp, #0]
 80054e2:	3301      	adds	r3, #1
 80054e4:	9300      	str	r3, [sp, #0]
 80054e6:	2331      	movs	r3, #49	; 0x31
 80054e8:	7013      	strb	r3, [r2, #0]
 80054ea:	e6ce      	b.n	800528a <_dtoa_r+0x94a>
 80054ec:	4b09      	ldr	r3, [pc, #36]	; (8005514 <_dtoa_r+0xbd4>)
 80054ee:	f7ff ba95 	b.w	8004a1c <_dtoa_r+0xdc>
 80054f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	f47f aa6e 	bne.w	80049d6 <_dtoa_r+0x96>
 80054fa:	4b07      	ldr	r3, [pc, #28]	; (8005518 <_dtoa_r+0xbd8>)
 80054fc:	f7ff ba8e 	b.w	8004a1c <_dtoa_r+0xdc>
 8005500:	9b02      	ldr	r3, [sp, #8]
 8005502:	2b00      	cmp	r3, #0
 8005504:	dcae      	bgt.n	8005464 <_dtoa_r+0xb24>
 8005506:	9b06      	ldr	r3, [sp, #24]
 8005508:	2b02      	cmp	r3, #2
 800550a:	f73f aea8 	bgt.w	800525e <_dtoa_r+0x91e>
 800550e:	e7a9      	b.n	8005464 <_dtoa_r+0xb24>
 8005510:	080068f7 	.word	0x080068f7
 8005514:	08006854 	.word	0x08006854
 8005518:	08006878 	.word	0x08006878

0800551c <__sflush_r>:
 800551c:	898a      	ldrh	r2, [r1, #12]
 800551e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005522:	4605      	mov	r5, r0
 8005524:	0710      	lsls	r0, r2, #28
 8005526:	460c      	mov	r4, r1
 8005528:	d458      	bmi.n	80055dc <__sflush_r+0xc0>
 800552a:	684b      	ldr	r3, [r1, #4]
 800552c:	2b00      	cmp	r3, #0
 800552e:	dc05      	bgt.n	800553c <__sflush_r+0x20>
 8005530:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005532:	2b00      	cmp	r3, #0
 8005534:	dc02      	bgt.n	800553c <__sflush_r+0x20>
 8005536:	2000      	movs	r0, #0
 8005538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800553c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800553e:	2e00      	cmp	r6, #0
 8005540:	d0f9      	beq.n	8005536 <__sflush_r+0x1a>
 8005542:	2300      	movs	r3, #0
 8005544:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005548:	682f      	ldr	r7, [r5, #0]
 800554a:	602b      	str	r3, [r5, #0]
 800554c:	d032      	beq.n	80055b4 <__sflush_r+0x98>
 800554e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005550:	89a3      	ldrh	r3, [r4, #12]
 8005552:	075a      	lsls	r2, r3, #29
 8005554:	d505      	bpl.n	8005562 <__sflush_r+0x46>
 8005556:	6863      	ldr	r3, [r4, #4]
 8005558:	1ac0      	subs	r0, r0, r3
 800555a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800555c:	b10b      	cbz	r3, 8005562 <__sflush_r+0x46>
 800555e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005560:	1ac0      	subs	r0, r0, r3
 8005562:	2300      	movs	r3, #0
 8005564:	4602      	mov	r2, r0
 8005566:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005568:	6a21      	ldr	r1, [r4, #32]
 800556a:	4628      	mov	r0, r5
 800556c:	47b0      	blx	r6
 800556e:	1c43      	adds	r3, r0, #1
 8005570:	89a3      	ldrh	r3, [r4, #12]
 8005572:	d106      	bne.n	8005582 <__sflush_r+0x66>
 8005574:	6829      	ldr	r1, [r5, #0]
 8005576:	291d      	cmp	r1, #29
 8005578:	d82c      	bhi.n	80055d4 <__sflush_r+0xb8>
 800557a:	4a2a      	ldr	r2, [pc, #168]	; (8005624 <__sflush_r+0x108>)
 800557c:	40ca      	lsrs	r2, r1
 800557e:	07d6      	lsls	r6, r2, #31
 8005580:	d528      	bpl.n	80055d4 <__sflush_r+0xb8>
 8005582:	2200      	movs	r2, #0
 8005584:	6062      	str	r2, [r4, #4]
 8005586:	04d9      	lsls	r1, r3, #19
 8005588:	6922      	ldr	r2, [r4, #16]
 800558a:	6022      	str	r2, [r4, #0]
 800558c:	d504      	bpl.n	8005598 <__sflush_r+0x7c>
 800558e:	1c42      	adds	r2, r0, #1
 8005590:	d101      	bne.n	8005596 <__sflush_r+0x7a>
 8005592:	682b      	ldr	r3, [r5, #0]
 8005594:	b903      	cbnz	r3, 8005598 <__sflush_r+0x7c>
 8005596:	6560      	str	r0, [r4, #84]	; 0x54
 8005598:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800559a:	602f      	str	r7, [r5, #0]
 800559c:	2900      	cmp	r1, #0
 800559e:	d0ca      	beq.n	8005536 <__sflush_r+0x1a>
 80055a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055a4:	4299      	cmp	r1, r3
 80055a6:	d002      	beq.n	80055ae <__sflush_r+0x92>
 80055a8:	4628      	mov	r0, r5
 80055aa:	f000 fd8b 	bl	80060c4 <_free_r>
 80055ae:	2000      	movs	r0, #0
 80055b0:	6360      	str	r0, [r4, #52]	; 0x34
 80055b2:	e7c1      	b.n	8005538 <__sflush_r+0x1c>
 80055b4:	6a21      	ldr	r1, [r4, #32]
 80055b6:	2301      	movs	r3, #1
 80055b8:	4628      	mov	r0, r5
 80055ba:	47b0      	blx	r6
 80055bc:	1c41      	adds	r1, r0, #1
 80055be:	d1c7      	bne.n	8005550 <__sflush_r+0x34>
 80055c0:	682b      	ldr	r3, [r5, #0]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d0c4      	beq.n	8005550 <__sflush_r+0x34>
 80055c6:	2b1d      	cmp	r3, #29
 80055c8:	d001      	beq.n	80055ce <__sflush_r+0xb2>
 80055ca:	2b16      	cmp	r3, #22
 80055cc:	d101      	bne.n	80055d2 <__sflush_r+0xb6>
 80055ce:	602f      	str	r7, [r5, #0]
 80055d0:	e7b1      	b.n	8005536 <__sflush_r+0x1a>
 80055d2:	89a3      	ldrh	r3, [r4, #12]
 80055d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055d8:	81a3      	strh	r3, [r4, #12]
 80055da:	e7ad      	b.n	8005538 <__sflush_r+0x1c>
 80055dc:	690f      	ldr	r7, [r1, #16]
 80055de:	2f00      	cmp	r7, #0
 80055e0:	d0a9      	beq.n	8005536 <__sflush_r+0x1a>
 80055e2:	0793      	lsls	r3, r2, #30
 80055e4:	680e      	ldr	r6, [r1, #0]
 80055e6:	bf08      	it	eq
 80055e8:	694b      	ldreq	r3, [r1, #20]
 80055ea:	600f      	str	r7, [r1, #0]
 80055ec:	bf18      	it	ne
 80055ee:	2300      	movne	r3, #0
 80055f0:	eba6 0807 	sub.w	r8, r6, r7
 80055f4:	608b      	str	r3, [r1, #8]
 80055f6:	f1b8 0f00 	cmp.w	r8, #0
 80055fa:	dd9c      	ble.n	8005536 <__sflush_r+0x1a>
 80055fc:	6a21      	ldr	r1, [r4, #32]
 80055fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005600:	4643      	mov	r3, r8
 8005602:	463a      	mov	r2, r7
 8005604:	4628      	mov	r0, r5
 8005606:	47b0      	blx	r6
 8005608:	2800      	cmp	r0, #0
 800560a:	dc06      	bgt.n	800561a <__sflush_r+0xfe>
 800560c:	89a3      	ldrh	r3, [r4, #12]
 800560e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005612:	81a3      	strh	r3, [r4, #12]
 8005614:	f04f 30ff 	mov.w	r0, #4294967295
 8005618:	e78e      	b.n	8005538 <__sflush_r+0x1c>
 800561a:	4407      	add	r7, r0
 800561c:	eba8 0800 	sub.w	r8, r8, r0
 8005620:	e7e9      	b.n	80055f6 <__sflush_r+0xda>
 8005622:	bf00      	nop
 8005624:	20400001 	.word	0x20400001

08005628 <_fflush_r>:
 8005628:	b538      	push	{r3, r4, r5, lr}
 800562a:	690b      	ldr	r3, [r1, #16]
 800562c:	4605      	mov	r5, r0
 800562e:	460c      	mov	r4, r1
 8005630:	b913      	cbnz	r3, 8005638 <_fflush_r+0x10>
 8005632:	2500      	movs	r5, #0
 8005634:	4628      	mov	r0, r5
 8005636:	bd38      	pop	{r3, r4, r5, pc}
 8005638:	b118      	cbz	r0, 8005642 <_fflush_r+0x1a>
 800563a:	6983      	ldr	r3, [r0, #24]
 800563c:	b90b      	cbnz	r3, 8005642 <_fflush_r+0x1a>
 800563e:	f000 f887 	bl	8005750 <__sinit>
 8005642:	4b14      	ldr	r3, [pc, #80]	; (8005694 <_fflush_r+0x6c>)
 8005644:	429c      	cmp	r4, r3
 8005646:	d11b      	bne.n	8005680 <_fflush_r+0x58>
 8005648:	686c      	ldr	r4, [r5, #4]
 800564a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d0ef      	beq.n	8005632 <_fflush_r+0xa>
 8005652:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005654:	07d0      	lsls	r0, r2, #31
 8005656:	d404      	bmi.n	8005662 <_fflush_r+0x3a>
 8005658:	0599      	lsls	r1, r3, #22
 800565a:	d402      	bmi.n	8005662 <_fflush_r+0x3a>
 800565c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800565e:	f000 f91a 	bl	8005896 <__retarget_lock_acquire_recursive>
 8005662:	4628      	mov	r0, r5
 8005664:	4621      	mov	r1, r4
 8005666:	f7ff ff59 	bl	800551c <__sflush_r>
 800566a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800566c:	07da      	lsls	r2, r3, #31
 800566e:	4605      	mov	r5, r0
 8005670:	d4e0      	bmi.n	8005634 <_fflush_r+0xc>
 8005672:	89a3      	ldrh	r3, [r4, #12]
 8005674:	059b      	lsls	r3, r3, #22
 8005676:	d4dd      	bmi.n	8005634 <_fflush_r+0xc>
 8005678:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800567a:	f000 f90d 	bl	8005898 <__retarget_lock_release_recursive>
 800567e:	e7d9      	b.n	8005634 <_fflush_r+0xc>
 8005680:	4b05      	ldr	r3, [pc, #20]	; (8005698 <_fflush_r+0x70>)
 8005682:	429c      	cmp	r4, r3
 8005684:	d101      	bne.n	800568a <_fflush_r+0x62>
 8005686:	68ac      	ldr	r4, [r5, #8]
 8005688:	e7df      	b.n	800564a <_fflush_r+0x22>
 800568a:	4b04      	ldr	r3, [pc, #16]	; (800569c <_fflush_r+0x74>)
 800568c:	429c      	cmp	r4, r3
 800568e:	bf08      	it	eq
 8005690:	68ec      	ldreq	r4, [r5, #12]
 8005692:	e7da      	b.n	800564a <_fflush_r+0x22>
 8005694:	08006928 	.word	0x08006928
 8005698:	08006948 	.word	0x08006948
 800569c:	08006908 	.word	0x08006908

080056a0 <std>:
 80056a0:	2300      	movs	r3, #0
 80056a2:	b510      	push	{r4, lr}
 80056a4:	4604      	mov	r4, r0
 80056a6:	e9c0 3300 	strd	r3, r3, [r0]
 80056aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80056ae:	6083      	str	r3, [r0, #8]
 80056b0:	8181      	strh	r1, [r0, #12]
 80056b2:	6643      	str	r3, [r0, #100]	; 0x64
 80056b4:	81c2      	strh	r2, [r0, #14]
 80056b6:	6183      	str	r3, [r0, #24]
 80056b8:	4619      	mov	r1, r3
 80056ba:	2208      	movs	r2, #8
 80056bc:	305c      	adds	r0, #92	; 0x5c
 80056be:	f7fe faf3 	bl	8003ca8 <memset>
 80056c2:	4b05      	ldr	r3, [pc, #20]	; (80056d8 <std+0x38>)
 80056c4:	6263      	str	r3, [r4, #36]	; 0x24
 80056c6:	4b05      	ldr	r3, [pc, #20]	; (80056dc <std+0x3c>)
 80056c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80056ca:	4b05      	ldr	r3, [pc, #20]	; (80056e0 <std+0x40>)
 80056cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80056ce:	4b05      	ldr	r3, [pc, #20]	; (80056e4 <std+0x44>)
 80056d0:	6224      	str	r4, [r4, #32]
 80056d2:	6323      	str	r3, [r4, #48]	; 0x30
 80056d4:	bd10      	pop	{r4, pc}
 80056d6:	bf00      	nop
 80056d8:	08006559 	.word	0x08006559
 80056dc:	0800657b 	.word	0x0800657b
 80056e0:	080065b3 	.word	0x080065b3
 80056e4:	080065d7 	.word	0x080065d7

080056e8 <_cleanup_r>:
 80056e8:	4901      	ldr	r1, [pc, #4]	; (80056f0 <_cleanup_r+0x8>)
 80056ea:	f000 b8af 	b.w	800584c <_fwalk_reent>
 80056ee:	bf00      	nop
 80056f0:	08005629 	.word	0x08005629

080056f4 <__sfmoreglue>:
 80056f4:	b570      	push	{r4, r5, r6, lr}
 80056f6:	2268      	movs	r2, #104	; 0x68
 80056f8:	1e4d      	subs	r5, r1, #1
 80056fa:	4355      	muls	r5, r2
 80056fc:	460e      	mov	r6, r1
 80056fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005702:	f000 fd4b 	bl	800619c <_malloc_r>
 8005706:	4604      	mov	r4, r0
 8005708:	b140      	cbz	r0, 800571c <__sfmoreglue+0x28>
 800570a:	2100      	movs	r1, #0
 800570c:	e9c0 1600 	strd	r1, r6, [r0]
 8005710:	300c      	adds	r0, #12
 8005712:	60a0      	str	r0, [r4, #8]
 8005714:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005718:	f7fe fac6 	bl	8003ca8 <memset>
 800571c:	4620      	mov	r0, r4
 800571e:	bd70      	pop	{r4, r5, r6, pc}

08005720 <__sfp_lock_acquire>:
 8005720:	4801      	ldr	r0, [pc, #4]	; (8005728 <__sfp_lock_acquire+0x8>)
 8005722:	f000 b8b8 	b.w	8005896 <__retarget_lock_acquire_recursive>
 8005726:	bf00      	nop
 8005728:	200002bd 	.word	0x200002bd

0800572c <__sfp_lock_release>:
 800572c:	4801      	ldr	r0, [pc, #4]	; (8005734 <__sfp_lock_release+0x8>)
 800572e:	f000 b8b3 	b.w	8005898 <__retarget_lock_release_recursive>
 8005732:	bf00      	nop
 8005734:	200002bd 	.word	0x200002bd

08005738 <__sinit_lock_acquire>:
 8005738:	4801      	ldr	r0, [pc, #4]	; (8005740 <__sinit_lock_acquire+0x8>)
 800573a:	f000 b8ac 	b.w	8005896 <__retarget_lock_acquire_recursive>
 800573e:	bf00      	nop
 8005740:	200002be 	.word	0x200002be

08005744 <__sinit_lock_release>:
 8005744:	4801      	ldr	r0, [pc, #4]	; (800574c <__sinit_lock_release+0x8>)
 8005746:	f000 b8a7 	b.w	8005898 <__retarget_lock_release_recursive>
 800574a:	bf00      	nop
 800574c:	200002be 	.word	0x200002be

08005750 <__sinit>:
 8005750:	b510      	push	{r4, lr}
 8005752:	4604      	mov	r4, r0
 8005754:	f7ff fff0 	bl	8005738 <__sinit_lock_acquire>
 8005758:	69a3      	ldr	r3, [r4, #24]
 800575a:	b11b      	cbz	r3, 8005764 <__sinit+0x14>
 800575c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005760:	f7ff bff0 	b.w	8005744 <__sinit_lock_release>
 8005764:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005768:	6523      	str	r3, [r4, #80]	; 0x50
 800576a:	4b13      	ldr	r3, [pc, #76]	; (80057b8 <__sinit+0x68>)
 800576c:	4a13      	ldr	r2, [pc, #76]	; (80057bc <__sinit+0x6c>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	62a2      	str	r2, [r4, #40]	; 0x28
 8005772:	42a3      	cmp	r3, r4
 8005774:	bf04      	itt	eq
 8005776:	2301      	moveq	r3, #1
 8005778:	61a3      	streq	r3, [r4, #24]
 800577a:	4620      	mov	r0, r4
 800577c:	f000 f820 	bl	80057c0 <__sfp>
 8005780:	6060      	str	r0, [r4, #4]
 8005782:	4620      	mov	r0, r4
 8005784:	f000 f81c 	bl	80057c0 <__sfp>
 8005788:	60a0      	str	r0, [r4, #8]
 800578a:	4620      	mov	r0, r4
 800578c:	f000 f818 	bl	80057c0 <__sfp>
 8005790:	2200      	movs	r2, #0
 8005792:	60e0      	str	r0, [r4, #12]
 8005794:	2104      	movs	r1, #4
 8005796:	6860      	ldr	r0, [r4, #4]
 8005798:	f7ff ff82 	bl	80056a0 <std>
 800579c:	68a0      	ldr	r0, [r4, #8]
 800579e:	2201      	movs	r2, #1
 80057a0:	2109      	movs	r1, #9
 80057a2:	f7ff ff7d 	bl	80056a0 <std>
 80057a6:	68e0      	ldr	r0, [r4, #12]
 80057a8:	2202      	movs	r2, #2
 80057aa:	2112      	movs	r1, #18
 80057ac:	f7ff ff78 	bl	80056a0 <std>
 80057b0:	2301      	movs	r3, #1
 80057b2:	61a3      	str	r3, [r4, #24]
 80057b4:	e7d2      	b.n	800575c <__sinit+0xc>
 80057b6:	bf00      	nop
 80057b8:	08006840 	.word	0x08006840
 80057bc:	080056e9 	.word	0x080056e9

080057c0 <__sfp>:
 80057c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057c2:	4607      	mov	r7, r0
 80057c4:	f7ff ffac 	bl	8005720 <__sfp_lock_acquire>
 80057c8:	4b1e      	ldr	r3, [pc, #120]	; (8005844 <__sfp+0x84>)
 80057ca:	681e      	ldr	r6, [r3, #0]
 80057cc:	69b3      	ldr	r3, [r6, #24]
 80057ce:	b913      	cbnz	r3, 80057d6 <__sfp+0x16>
 80057d0:	4630      	mov	r0, r6
 80057d2:	f7ff ffbd 	bl	8005750 <__sinit>
 80057d6:	3648      	adds	r6, #72	; 0x48
 80057d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80057dc:	3b01      	subs	r3, #1
 80057de:	d503      	bpl.n	80057e8 <__sfp+0x28>
 80057e0:	6833      	ldr	r3, [r6, #0]
 80057e2:	b30b      	cbz	r3, 8005828 <__sfp+0x68>
 80057e4:	6836      	ldr	r6, [r6, #0]
 80057e6:	e7f7      	b.n	80057d8 <__sfp+0x18>
 80057e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80057ec:	b9d5      	cbnz	r5, 8005824 <__sfp+0x64>
 80057ee:	4b16      	ldr	r3, [pc, #88]	; (8005848 <__sfp+0x88>)
 80057f0:	60e3      	str	r3, [r4, #12]
 80057f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80057f6:	6665      	str	r5, [r4, #100]	; 0x64
 80057f8:	f000 f84c 	bl	8005894 <__retarget_lock_init_recursive>
 80057fc:	f7ff ff96 	bl	800572c <__sfp_lock_release>
 8005800:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005804:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005808:	6025      	str	r5, [r4, #0]
 800580a:	61a5      	str	r5, [r4, #24]
 800580c:	2208      	movs	r2, #8
 800580e:	4629      	mov	r1, r5
 8005810:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005814:	f7fe fa48 	bl	8003ca8 <memset>
 8005818:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800581c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005820:	4620      	mov	r0, r4
 8005822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005824:	3468      	adds	r4, #104	; 0x68
 8005826:	e7d9      	b.n	80057dc <__sfp+0x1c>
 8005828:	2104      	movs	r1, #4
 800582a:	4638      	mov	r0, r7
 800582c:	f7ff ff62 	bl	80056f4 <__sfmoreglue>
 8005830:	4604      	mov	r4, r0
 8005832:	6030      	str	r0, [r6, #0]
 8005834:	2800      	cmp	r0, #0
 8005836:	d1d5      	bne.n	80057e4 <__sfp+0x24>
 8005838:	f7ff ff78 	bl	800572c <__sfp_lock_release>
 800583c:	230c      	movs	r3, #12
 800583e:	603b      	str	r3, [r7, #0]
 8005840:	e7ee      	b.n	8005820 <__sfp+0x60>
 8005842:	bf00      	nop
 8005844:	08006840 	.word	0x08006840
 8005848:	ffff0001 	.word	0xffff0001

0800584c <_fwalk_reent>:
 800584c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005850:	4606      	mov	r6, r0
 8005852:	4688      	mov	r8, r1
 8005854:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005858:	2700      	movs	r7, #0
 800585a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800585e:	f1b9 0901 	subs.w	r9, r9, #1
 8005862:	d505      	bpl.n	8005870 <_fwalk_reent+0x24>
 8005864:	6824      	ldr	r4, [r4, #0]
 8005866:	2c00      	cmp	r4, #0
 8005868:	d1f7      	bne.n	800585a <_fwalk_reent+0xe>
 800586a:	4638      	mov	r0, r7
 800586c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005870:	89ab      	ldrh	r3, [r5, #12]
 8005872:	2b01      	cmp	r3, #1
 8005874:	d907      	bls.n	8005886 <_fwalk_reent+0x3a>
 8005876:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800587a:	3301      	adds	r3, #1
 800587c:	d003      	beq.n	8005886 <_fwalk_reent+0x3a>
 800587e:	4629      	mov	r1, r5
 8005880:	4630      	mov	r0, r6
 8005882:	47c0      	blx	r8
 8005884:	4307      	orrs	r7, r0
 8005886:	3568      	adds	r5, #104	; 0x68
 8005888:	e7e9      	b.n	800585e <_fwalk_reent+0x12>
	...

0800588c <_localeconv_r>:
 800588c:	4800      	ldr	r0, [pc, #0]	; (8005890 <_localeconv_r+0x4>)
 800588e:	4770      	bx	lr
 8005890:	20000160 	.word	0x20000160

08005894 <__retarget_lock_init_recursive>:
 8005894:	4770      	bx	lr

08005896 <__retarget_lock_acquire_recursive>:
 8005896:	4770      	bx	lr

08005898 <__retarget_lock_release_recursive>:
 8005898:	4770      	bx	lr

0800589a <__swhatbuf_r>:
 800589a:	b570      	push	{r4, r5, r6, lr}
 800589c:	460e      	mov	r6, r1
 800589e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058a2:	2900      	cmp	r1, #0
 80058a4:	b096      	sub	sp, #88	; 0x58
 80058a6:	4614      	mov	r4, r2
 80058a8:	461d      	mov	r5, r3
 80058aa:	da08      	bge.n	80058be <__swhatbuf_r+0x24>
 80058ac:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	602a      	str	r2, [r5, #0]
 80058b4:	061a      	lsls	r2, r3, #24
 80058b6:	d410      	bmi.n	80058da <__swhatbuf_r+0x40>
 80058b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058bc:	e00e      	b.n	80058dc <__swhatbuf_r+0x42>
 80058be:	466a      	mov	r2, sp
 80058c0:	f000 fee0 	bl	8006684 <_fstat_r>
 80058c4:	2800      	cmp	r0, #0
 80058c6:	dbf1      	blt.n	80058ac <__swhatbuf_r+0x12>
 80058c8:	9a01      	ldr	r2, [sp, #4]
 80058ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80058ce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80058d2:	425a      	negs	r2, r3
 80058d4:	415a      	adcs	r2, r3
 80058d6:	602a      	str	r2, [r5, #0]
 80058d8:	e7ee      	b.n	80058b8 <__swhatbuf_r+0x1e>
 80058da:	2340      	movs	r3, #64	; 0x40
 80058dc:	2000      	movs	r0, #0
 80058de:	6023      	str	r3, [r4, #0]
 80058e0:	b016      	add	sp, #88	; 0x58
 80058e2:	bd70      	pop	{r4, r5, r6, pc}

080058e4 <__smakebuf_r>:
 80058e4:	898b      	ldrh	r3, [r1, #12]
 80058e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80058e8:	079d      	lsls	r5, r3, #30
 80058ea:	4606      	mov	r6, r0
 80058ec:	460c      	mov	r4, r1
 80058ee:	d507      	bpl.n	8005900 <__smakebuf_r+0x1c>
 80058f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80058f4:	6023      	str	r3, [r4, #0]
 80058f6:	6123      	str	r3, [r4, #16]
 80058f8:	2301      	movs	r3, #1
 80058fa:	6163      	str	r3, [r4, #20]
 80058fc:	b002      	add	sp, #8
 80058fe:	bd70      	pop	{r4, r5, r6, pc}
 8005900:	ab01      	add	r3, sp, #4
 8005902:	466a      	mov	r2, sp
 8005904:	f7ff ffc9 	bl	800589a <__swhatbuf_r>
 8005908:	9900      	ldr	r1, [sp, #0]
 800590a:	4605      	mov	r5, r0
 800590c:	4630      	mov	r0, r6
 800590e:	f000 fc45 	bl	800619c <_malloc_r>
 8005912:	b948      	cbnz	r0, 8005928 <__smakebuf_r+0x44>
 8005914:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005918:	059a      	lsls	r2, r3, #22
 800591a:	d4ef      	bmi.n	80058fc <__smakebuf_r+0x18>
 800591c:	f023 0303 	bic.w	r3, r3, #3
 8005920:	f043 0302 	orr.w	r3, r3, #2
 8005924:	81a3      	strh	r3, [r4, #12]
 8005926:	e7e3      	b.n	80058f0 <__smakebuf_r+0xc>
 8005928:	4b0d      	ldr	r3, [pc, #52]	; (8005960 <__smakebuf_r+0x7c>)
 800592a:	62b3      	str	r3, [r6, #40]	; 0x28
 800592c:	89a3      	ldrh	r3, [r4, #12]
 800592e:	6020      	str	r0, [r4, #0]
 8005930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005934:	81a3      	strh	r3, [r4, #12]
 8005936:	9b00      	ldr	r3, [sp, #0]
 8005938:	6163      	str	r3, [r4, #20]
 800593a:	9b01      	ldr	r3, [sp, #4]
 800593c:	6120      	str	r0, [r4, #16]
 800593e:	b15b      	cbz	r3, 8005958 <__smakebuf_r+0x74>
 8005940:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005944:	4630      	mov	r0, r6
 8005946:	f000 feaf 	bl	80066a8 <_isatty_r>
 800594a:	b128      	cbz	r0, 8005958 <__smakebuf_r+0x74>
 800594c:	89a3      	ldrh	r3, [r4, #12]
 800594e:	f023 0303 	bic.w	r3, r3, #3
 8005952:	f043 0301 	orr.w	r3, r3, #1
 8005956:	81a3      	strh	r3, [r4, #12]
 8005958:	89a0      	ldrh	r0, [r4, #12]
 800595a:	4305      	orrs	r5, r0
 800595c:	81a5      	strh	r5, [r4, #12]
 800595e:	e7cd      	b.n	80058fc <__smakebuf_r+0x18>
 8005960:	080056e9 	.word	0x080056e9

08005964 <malloc>:
 8005964:	4b02      	ldr	r3, [pc, #8]	; (8005970 <malloc+0xc>)
 8005966:	4601      	mov	r1, r0
 8005968:	6818      	ldr	r0, [r3, #0]
 800596a:	f000 bc17 	b.w	800619c <_malloc_r>
 800596e:	bf00      	nop
 8005970:	2000000c 	.word	0x2000000c

08005974 <memcpy>:
 8005974:	440a      	add	r2, r1
 8005976:	4291      	cmp	r1, r2
 8005978:	f100 33ff 	add.w	r3, r0, #4294967295
 800597c:	d100      	bne.n	8005980 <memcpy+0xc>
 800597e:	4770      	bx	lr
 8005980:	b510      	push	{r4, lr}
 8005982:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005986:	f803 4f01 	strb.w	r4, [r3, #1]!
 800598a:	4291      	cmp	r1, r2
 800598c:	d1f9      	bne.n	8005982 <memcpy+0xe>
 800598e:	bd10      	pop	{r4, pc}

08005990 <_Balloc>:
 8005990:	b570      	push	{r4, r5, r6, lr}
 8005992:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005994:	4604      	mov	r4, r0
 8005996:	460d      	mov	r5, r1
 8005998:	b976      	cbnz	r6, 80059b8 <_Balloc+0x28>
 800599a:	2010      	movs	r0, #16
 800599c:	f7ff ffe2 	bl	8005964 <malloc>
 80059a0:	4602      	mov	r2, r0
 80059a2:	6260      	str	r0, [r4, #36]	; 0x24
 80059a4:	b920      	cbnz	r0, 80059b0 <_Balloc+0x20>
 80059a6:	4b18      	ldr	r3, [pc, #96]	; (8005a08 <_Balloc+0x78>)
 80059a8:	4818      	ldr	r0, [pc, #96]	; (8005a0c <_Balloc+0x7c>)
 80059aa:	2166      	movs	r1, #102	; 0x66
 80059ac:	f000 fe2a 	bl	8006604 <__assert_func>
 80059b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80059b4:	6006      	str	r6, [r0, #0]
 80059b6:	60c6      	str	r6, [r0, #12]
 80059b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80059ba:	68f3      	ldr	r3, [r6, #12]
 80059bc:	b183      	cbz	r3, 80059e0 <_Balloc+0x50>
 80059be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80059c6:	b9b8      	cbnz	r0, 80059f8 <_Balloc+0x68>
 80059c8:	2101      	movs	r1, #1
 80059ca:	fa01 f605 	lsl.w	r6, r1, r5
 80059ce:	1d72      	adds	r2, r6, #5
 80059d0:	0092      	lsls	r2, r2, #2
 80059d2:	4620      	mov	r0, r4
 80059d4:	f000 fb60 	bl	8006098 <_calloc_r>
 80059d8:	b160      	cbz	r0, 80059f4 <_Balloc+0x64>
 80059da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80059de:	e00e      	b.n	80059fe <_Balloc+0x6e>
 80059e0:	2221      	movs	r2, #33	; 0x21
 80059e2:	2104      	movs	r1, #4
 80059e4:	4620      	mov	r0, r4
 80059e6:	f000 fb57 	bl	8006098 <_calloc_r>
 80059ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059ec:	60f0      	str	r0, [r6, #12]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d1e4      	bne.n	80059be <_Balloc+0x2e>
 80059f4:	2000      	movs	r0, #0
 80059f6:	bd70      	pop	{r4, r5, r6, pc}
 80059f8:	6802      	ldr	r2, [r0, #0]
 80059fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80059fe:	2300      	movs	r3, #0
 8005a00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005a04:	e7f7      	b.n	80059f6 <_Balloc+0x66>
 8005a06:	bf00      	nop
 8005a08:	08006885 	.word	0x08006885
 8005a0c:	08006968 	.word	0x08006968

08005a10 <_Bfree>:
 8005a10:	b570      	push	{r4, r5, r6, lr}
 8005a12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005a14:	4605      	mov	r5, r0
 8005a16:	460c      	mov	r4, r1
 8005a18:	b976      	cbnz	r6, 8005a38 <_Bfree+0x28>
 8005a1a:	2010      	movs	r0, #16
 8005a1c:	f7ff ffa2 	bl	8005964 <malloc>
 8005a20:	4602      	mov	r2, r0
 8005a22:	6268      	str	r0, [r5, #36]	; 0x24
 8005a24:	b920      	cbnz	r0, 8005a30 <_Bfree+0x20>
 8005a26:	4b09      	ldr	r3, [pc, #36]	; (8005a4c <_Bfree+0x3c>)
 8005a28:	4809      	ldr	r0, [pc, #36]	; (8005a50 <_Bfree+0x40>)
 8005a2a:	218a      	movs	r1, #138	; 0x8a
 8005a2c:	f000 fdea 	bl	8006604 <__assert_func>
 8005a30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005a34:	6006      	str	r6, [r0, #0]
 8005a36:	60c6      	str	r6, [r0, #12]
 8005a38:	b13c      	cbz	r4, 8005a4a <_Bfree+0x3a>
 8005a3a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005a3c:	6862      	ldr	r2, [r4, #4]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005a44:	6021      	str	r1, [r4, #0]
 8005a46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005a4a:	bd70      	pop	{r4, r5, r6, pc}
 8005a4c:	08006885 	.word	0x08006885
 8005a50:	08006968 	.word	0x08006968

08005a54 <__multadd>:
 8005a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a58:	690d      	ldr	r5, [r1, #16]
 8005a5a:	4607      	mov	r7, r0
 8005a5c:	460c      	mov	r4, r1
 8005a5e:	461e      	mov	r6, r3
 8005a60:	f101 0c14 	add.w	ip, r1, #20
 8005a64:	2000      	movs	r0, #0
 8005a66:	f8dc 3000 	ldr.w	r3, [ip]
 8005a6a:	b299      	uxth	r1, r3
 8005a6c:	fb02 6101 	mla	r1, r2, r1, r6
 8005a70:	0c1e      	lsrs	r6, r3, #16
 8005a72:	0c0b      	lsrs	r3, r1, #16
 8005a74:	fb02 3306 	mla	r3, r2, r6, r3
 8005a78:	b289      	uxth	r1, r1
 8005a7a:	3001      	adds	r0, #1
 8005a7c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005a80:	4285      	cmp	r5, r0
 8005a82:	f84c 1b04 	str.w	r1, [ip], #4
 8005a86:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005a8a:	dcec      	bgt.n	8005a66 <__multadd+0x12>
 8005a8c:	b30e      	cbz	r6, 8005ad2 <__multadd+0x7e>
 8005a8e:	68a3      	ldr	r3, [r4, #8]
 8005a90:	42ab      	cmp	r3, r5
 8005a92:	dc19      	bgt.n	8005ac8 <__multadd+0x74>
 8005a94:	6861      	ldr	r1, [r4, #4]
 8005a96:	4638      	mov	r0, r7
 8005a98:	3101      	adds	r1, #1
 8005a9a:	f7ff ff79 	bl	8005990 <_Balloc>
 8005a9e:	4680      	mov	r8, r0
 8005aa0:	b928      	cbnz	r0, 8005aae <__multadd+0x5a>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	4b0c      	ldr	r3, [pc, #48]	; (8005ad8 <__multadd+0x84>)
 8005aa6:	480d      	ldr	r0, [pc, #52]	; (8005adc <__multadd+0x88>)
 8005aa8:	21b5      	movs	r1, #181	; 0xb5
 8005aaa:	f000 fdab 	bl	8006604 <__assert_func>
 8005aae:	6922      	ldr	r2, [r4, #16]
 8005ab0:	3202      	adds	r2, #2
 8005ab2:	f104 010c 	add.w	r1, r4, #12
 8005ab6:	0092      	lsls	r2, r2, #2
 8005ab8:	300c      	adds	r0, #12
 8005aba:	f7ff ff5b 	bl	8005974 <memcpy>
 8005abe:	4621      	mov	r1, r4
 8005ac0:	4638      	mov	r0, r7
 8005ac2:	f7ff ffa5 	bl	8005a10 <_Bfree>
 8005ac6:	4644      	mov	r4, r8
 8005ac8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005acc:	3501      	adds	r5, #1
 8005ace:	615e      	str	r6, [r3, #20]
 8005ad0:	6125      	str	r5, [r4, #16]
 8005ad2:	4620      	mov	r0, r4
 8005ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ad8:	080068f7 	.word	0x080068f7
 8005adc:	08006968 	.word	0x08006968

08005ae0 <__hi0bits>:
 8005ae0:	0c03      	lsrs	r3, r0, #16
 8005ae2:	041b      	lsls	r3, r3, #16
 8005ae4:	b9d3      	cbnz	r3, 8005b1c <__hi0bits+0x3c>
 8005ae6:	0400      	lsls	r0, r0, #16
 8005ae8:	2310      	movs	r3, #16
 8005aea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005aee:	bf04      	itt	eq
 8005af0:	0200      	lsleq	r0, r0, #8
 8005af2:	3308      	addeq	r3, #8
 8005af4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005af8:	bf04      	itt	eq
 8005afa:	0100      	lsleq	r0, r0, #4
 8005afc:	3304      	addeq	r3, #4
 8005afe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005b02:	bf04      	itt	eq
 8005b04:	0080      	lsleq	r0, r0, #2
 8005b06:	3302      	addeq	r3, #2
 8005b08:	2800      	cmp	r0, #0
 8005b0a:	db05      	blt.n	8005b18 <__hi0bits+0x38>
 8005b0c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005b10:	f103 0301 	add.w	r3, r3, #1
 8005b14:	bf08      	it	eq
 8005b16:	2320      	moveq	r3, #32
 8005b18:	4618      	mov	r0, r3
 8005b1a:	4770      	bx	lr
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	e7e4      	b.n	8005aea <__hi0bits+0xa>

08005b20 <__lo0bits>:
 8005b20:	6803      	ldr	r3, [r0, #0]
 8005b22:	f013 0207 	ands.w	r2, r3, #7
 8005b26:	4601      	mov	r1, r0
 8005b28:	d00b      	beq.n	8005b42 <__lo0bits+0x22>
 8005b2a:	07da      	lsls	r2, r3, #31
 8005b2c:	d423      	bmi.n	8005b76 <__lo0bits+0x56>
 8005b2e:	0798      	lsls	r0, r3, #30
 8005b30:	bf49      	itett	mi
 8005b32:	085b      	lsrmi	r3, r3, #1
 8005b34:	089b      	lsrpl	r3, r3, #2
 8005b36:	2001      	movmi	r0, #1
 8005b38:	600b      	strmi	r3, [r1, #0]
 8005b3a:	bf5c      	itt	pl
 8005b3c:	600b      	strpl	r3, [r1, #0]
 8005b3e:	2002      	movpl	r0, #2
 8005b40:	4770      	bx	lr
 8005b42:	b298      	uxth	r0, r3
 8005b44:	b9a8      	cbnz	r0, 8005b72 <__lo0bits+0x52>
 8005b46:	0c1b      	lsrs	r3, r3, #16
 8005b48:	2010      	movs	r0, #16
 8005b4a:	b2da      	uxtb	r2, r3
 8005b4c:	b90a      	cbnz	r2, 8005b52 <__lo0bits+0x32>
 8005b4e:	3008      	adds	r0, #8
 8005b50:	0a1b      	lsrs	r3, r3, #8
 8005b52:	071a      	lsls	r2, r3, #28
 8005b54:	bf04      	itt	eq
 8005b56:	091b      	lsreq	r3, r3, #4
 8005b58:	3004      	addeq	r0, #4
 8005b5a:	079a      	lsls	r2, r3, #30
 8005b5c:	bf04      	itt	eq
 8005b5e:	089b      	lsreq	r3, r3, #2
 8005b60:	3002      	addeq	r0, #2
 8005b62:	07da      	lsls	r2, r3, #31
 8005b64:	d403      	bmi.n	8005b6e <__lo0bits+0x4e>
 8005b66:	085b      	lsrs	r3, r3, #1
 8005b68:	f100 0001 	add.w	r0, r0, #1
 8005b6c:	d005      	beq.n	8005b7a <__lo0bits+0x5a>
 8005b6e:	600b      	str	r3, [r1, #0]
 8005b70:	4770      	bx	lr
 8005b72:	4610      	mov	r0, r2
 8005b74:	e7e9      	b.n	8005b4a <__lo0bits+0x2a>
 8005b76:	2000      	movs	r0, #0
 8005b78:	4770      	bx	lr
 8005b7a:	2020      	movs	r0, #32
 8005b7c:	4770      	bx	lr
	...

08005b80 <__i2b>:
 8005b80:	b510      	push	{r4, lr}
 8005b82:	460c      	mov	r4, r1
 8005b84:	2101      	movs	r1, #1
 8005b86:	f7ff ff03 	bl	8005990 <_Balloc>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	b928      	cbnz	r0, 8005b9a <__i2b+0x1a>
 8005b8e:	4b05      	ldr	r3, [pc, #20]	; (8005ba4 <__i2b+0x24>)
 8005b90:	4805      	ldr	r0, [pc, #20]	; (8005ba8 <__i2b+0x28>)
 8005b92:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005b96:	f000 fd35 	bl	8006604 <__assert_func>
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	6144      	str	r4, [r0, #20]
 8005b9e:	6103      	str	r3, [r0, #16]
 8005ba0:	bd10      	pop	{r4, pc}
 8005ba2:	bf00      	nop
 8005ba4:	080068f7 	.word	0x080068f7
 8005ba8:	08006968 	.word	0x08006968

08005bac <__multiply>:
 8005bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bb0:	4691      	mov	r9, r2
 8005bb2:	690a      	ldr	r2, [r1, #16]
 8005bb4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	bfb8      	it	lt
 8005bbc:	460b      	movlt	r3, r1
 8005bbe:	460c      	mov	r4, r1
 8005bc0:	bfbc      	itt	lt
 8005bc2:	464c      	movlt	r4, r9
 8005bc4:	4699      	movlt	r9, r3
 8005bc6:	6927      	ldr	r7, [r4, #16]
 8005bc8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005bcc:	68a3      	ldr	r3, [r4, #8]
 8005bce:	6861      	ldr	r1, [r4, #4]
 8005bd0:	eb07 060a 	add.w	r6, r7, sl
 8005bd4:	42b3      	cmp	r3, r6
 8005bd6:	b085      	sub	sp, #20
 8005bd8:	bfb8      	it	lt
 8005bda:	3101      	addlt	r1, #1
 8005bdc:	f7ff fed8 	bl	8005990 <_Balloc>
 8005be0:	b930      	cbnz	r0, 8005bf0 <__multiply+0x44>
 8005be2:	4602      	mov	r2, r0
 8005be4:	4b44      	ldr	r3, [pc, #272]	; (8005cf8 <__multiply+0x14c>)
 8005be6:	4845      	ldr	r0, [pc, #276]	; (8005cfc <__multiply+0x150>)
 8005be8:	f240 115d 	movw	r1, #349	; 0x15d
 8005bec:	f000 fd0a 	bl	8006604 <__assert_func>
 8005bf0:	f100 0514 	add.w	r5, r0, #20
 8005bf4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005bf8:	462b      	mov	r3, r5
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	4543      	cmp	r3, r8
 8005bfe:	d321      	bcc.n	8005c44 <__multiply+0x98>
 8005c00:	f104 0314 	add.w	r3, r4, #20
 8005c04:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005c08:	f109 0314 	add.w	r3, r9, #20
 8005c0c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005c10:	9202      	str	r2, [sp, #8]
 8005c12:	1b3a      	subs	r2, r7, r4
 8005c14:	3a15      	subs	r2, #21
 8005c16:	f022 0203 	bic.w	r2, r2, #3
 8005c1a:	3204      	adds	r2, #4
 8005c1c:	f104 0115 	add.w	r1, r4, #21
 8005c20:	428f      	cmp	r7, r1
 8005c22:	bf38      	it	cc
 8005c24:	2204      	movcc	r2, #4
 8005c26:	9201      	str	r2, [sp, #4]
 8005c28:	9a02      	ldr	r2, [sp, #8]
 8005c2a:	9303      	str	r3, [sp, #12]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d80c      	bhi.n	8005c4a <__multiply+0x9e>
 8005c30:	2e00      	cmp	r6, #0
 8005c32:	dd03      	ble.n	8005c3c <__multiply+0x90>
 8005c34:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d05a      	beq.n	8005cf2 <__multiply+0x146>
 8005c3c:	6106      	str	r6, [r0, #16]
 8005c3e:	b005      	add	sp, #20
 8005c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c44:	f843 2b04 	str.w	r2, [r3], #4
 8005c48:	e7d8      	b.n	8005bfc <__multiply+0x50>
 8005c4a:	f8b3 a000 	ldrh.w	sl, [r3]
 8005c4e:	f1ba 0f00 	cmp.w	sl, #0
 8005c52:	d024      	beq.n	8005c9e <__multiply+0xf2>
 8005c54:	f104 0e14 	add.w	lr, r4, #20
 8005c58:	46a9      	mov	r9, r5
 8005c5a:	f04f 0c00 	mov.w	ip, #0
 8005c5e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005c62:	f8d9 1000 	ldr.w	r1, [r9]
 8005c66:	fa1f fb82 	uxth.w	fp, r2
 8005c6a:	b289      	uxth	r1, r1
 8005c6c:	fb0a 110b 	mla	r1, sl, fp, r1
 8005c70:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005c74:	f8d9 2000 	ldr.w	r2, [r9]
 8005c78:	4461      	add	r1, ip
 8005c7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005c7e:	fb0a c20b 	mla	r2, sl, fp, ip
 8005c82:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005c86:	b289      	uxth	r1, r1
 8005c88:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005c8c:	4577      	cmp	r7, lr
 8005c8e:	f849 1b04 	str.w	r1, [r9], #4
 8005c92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005c96:	d8e2      	bhi.n	8005c5e <__multiply+0xb2>
 8005c98:	9a01      	ldr	r2, [sp, #4]
 8005c9a:	f845 c002 	str.w	ip, [r5, r2]
 8005c9e:	9a03      	ldr	r2, [sp, #12]
 8005ca0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005ca4:	3304      	adds	r3, #4
 8005ca6:	f1b9 0f00 	cmp.w	r9, #0
 8005caa:	d020      	beq.n	8005cee <__multiply+0x142>
 8005cac:	6829      	ldr	r1, [r5, #0]
 8005cae:	f104 0c14 	add.w	ip, r4, #20
 8005cb2:	46ae      	mov	lr, r5
 8005cb4:	f04f 0a00 	mov.w	sl, #0
 8005cb8:	f8bc b000 	ldrh.w	fp, [ip]
 8005cbc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005cc0:	fb09 220b 	mla	r2, r9, fp, r2
 8005cc4:	4492      	add	sl, r2
 8005cc6:	b289      	uxth	r1, r1
 8005cc8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005ccc:	f84e 1b04 	str.w	r1, [lr], #4
 8005cd0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005cd4:	f8be 1000 	ldrh.w	r1, [lr]
 8005cd8:	0c12      	lsrs	r2, r2, #16
 8005cda:	fb09 1102 	mla	r1, r9, r2, r1
 8005cde:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005ce2:	4567      	cmp	r7, ip
 8005ce4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005ce8:	d8e6      	bhi.n	8005cb8 <__multiply+0x10c>
 8005cea:	9a01      	ldr	r2, [sp, #4]
 8005cec:	50a9      	str	r1, [r5, r2]
 8005cee:	3504      	adds	r5, #4
 8005cf0:	e79a      	b.n	8005c28 <__multiply+0x7c>
 8005cf2:	3e01      	subs	r6, #1
 8005cf4:	e79c      	b.n	8005c30 <__multiply+0x84>
 8005cf6:	bf00      	nop
 8005cf8:	080068f7 	.word	0x080068f7
 8005cfc:	08006968 	.word	0x08006968

08005d00 <__pow5mult>:
 8005d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d04:	4615      	mov	r5, r2
 8005d06:	f012 0203 	ands.w	r2, r2, #3
 8005d0a:	4606      	mov	r6, r0
 8005d0c:	460f      	mov	r7, r1
 8005d0e:	d007      	beq.n	8005d20 <__pow5mult+0x20>
 8005d10:	4c25      	ldr	r4, [pc, #148]	; (8005da8 <__pow5mult+0xa8>)
 8005d12:	3a01      	subs	r2, #1
 8005d14:	2300      	movs	r3, #0
 8005d16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005d1a:	f7ff fe9b 	bl	8005a54 <__multadd>
 8005d1e:	4607      	mov	r7, r0
 8005d20:	10ad      	asrs	r5, r5, #2
 8005d22:	d03d      	beq.n	8005da0 <__pow5mult+0xa0>
 8005d24:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005d26:	b97c      	cbnz	r4, 8005d48 <__pow5mult+0x48>
 8005d28:	2010      	movs	r0, #16
 8005d2a:	f7ff fe1b 	bl	8005964 <malloc>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	6270      	str	r0, [r6, #36]	; 0x24
 8005d32:	b928      	cbnz	r0, 8005d40 <__pow5mult+0x40>
 8005d34:	4b1d      	ldr	r3, [pc, #116]	; (8005dac <__pow5mult+0xac>)
 8005d36:	481e      	ldr	r0, [pc, #120]	; (8005db0 <__pow5mult+0xb0>)
 8005d38:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005d3c:	f000 fc62 	bl	8006604 <__assert_func>
 8005d40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005d44:	6004      	str	r4, [r0, #0]
 8005d46:	60c4      	str	r4, [r0, #12]
 8005d48:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005d4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005d50:	b94c      	cbnz	r4, 8005d66 <__pow5mult+0x66>
 8005d52:	f240 2171 	movw	r1, #625	; 0x271
 8005d56:	4630      	mov	r0, r6
 8005d58:	f7ff ff12 	bl	8005b80 <__i2b>
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005d62:	4604      	mov	r4, r0
 8005d64:	6003      	str	r3, [r0, #0]
 8005d66:	f04f 0900 	mov.w	r9, #0
 8005d6a:	07eb      	lsls	r3, r5, #31
 8005d6c:	d50a      	bpl.n	8005d84 <__pow5mult+0x84>
 8005d6e:	4639      	mov	r1, r7
 8005d70:	4622      	mov	r2, r4
 8005d72:	4630      	mov	r0, r6
 8005d74:	f7ff ff1a 	bl	8005bac <__multiply>
 8005d78:	4639      	mov	r1, r7
 8005d7a:	4680      	mov	r8, r0
 8005d7c:	4630      	mov	r0, r6
 8005d7e:	f7ff fe47 	bl	8005a10 <_Bfree>
 8005d82:	4647      	mov	r7, r8
 8005d84:	106d      	asrs	r5, r5, #1
 8005d86:	d00b      	beq.n	8005da0 <__pow5mult+0xa0>
 8005d88:	6820      	ldr	r0, [r4, #0]
 8005d8a:	b938      	cbnz	r0, 8005d9c <__pow5mult+0x9c>
 8005d8c:	4622      	mov	r2, r4
 8005d8e:	4621      	mov	r1, r4
 8005d90:	4630      	mov	r0, r6
 8005d92:	f7ff ff0b 	bl	8005bac <__multiply>
 8005d96:	6020      	str	r0, [r4, #0]
 8005d98:	f8c0 9000 	str.w	r9, [r0]
 8005d9c:	4604      	mov	r4, r0
 8005d9e:	e7e4      	b.n	8005d6a <__pow5mult+0x6a>
 8005da0:	4638      	mov	r0, r7
 8005da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005da6:	bf00      	nop
 8005da8:	08006ab8 	.word	0x08006ab8
 8005dac:	08006885 	.word	0x08006885
 8005db0:	08006968 	.word	0x08006968

08005db4 <__lshift>:
 8005db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005db8:	460c      	mov	r4, r1
 8005dba:	6849      	ldr	r1, [r1, #4]
 8005dbc:	6923      	ldr	r3, [r4, #16]
 8005dbe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005dc2:	68a3      	ldr	r3, [r4, #8]
 8005dc4:	4607      	mov	r7, r0
 8005dc6:	4691      	mov	r9, r2
 8005dc8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005dcc:	f108 0601 	add.w	r6, r8, #1
 8005dd0:	42b3      	cmp	r3, r6
 8005dd2:	db0b      	blt.n	8005dec <__lshift+0x38>
 8005dd4:	4638      	mov	r0, r7
 8005dd6:	f7ff fddb 	bl	8005990 <_Balloc>
 8005dda:	4605      	mov	r5, r0
 8005ddc:	b948      	cbnz	r0, 8005df2 <__lshift+0x3e>
 8005dde:	4602      	mov	r2, r0
 8005de0:	4b2a      	ldr	r3, [pc, #168]	; (8005e8c <__lshift+0xd8>)
 8005de2:	482b      	ldr	r0, [pc, #172]	; (8005e90 <__lshift+0xdc>)
 8005de4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005de8:	f000 fc0c 	bl	8006604 <__assert_func>
 8005dec:	3101      	adds	r1, #1
 8005dee:	005b      	lsls	r3, r3, #1
 8005df0:	e7ee      	b.n	8005dd0 <__lshift+0x1c>
 8005df2:	2300      	movs	r3, #0
 8005df4:	f100 0114 	add.w	r1, r0, #20
 8005df8:	f100 0210 	add.w	r2, r0, #16
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	4553      	cmp	r3, sl
 8005e00:	db37      	blt.n	8005e72 <__lshift+0xbe>
 8005e02:	6920      	ldr	r0, [r4, #16]
 8005e04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005e08:	f104 0314 	add.w	r3, r4, #20
 8005e0c:	f019 091f 	ands.w	r9, r9, #31
 8005e10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005e14:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005e18:	d02f      	beq.n	8005e7a <__lshift+0xc6>
 8005e1a:	f1c9 0e20 	rsb	lr, r9, #32
 8005e1e:	468a      	mov	sl, r1
 8005e20:	f04f 0c00 	mov.w	ip, #0
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	fa02 f209 	lsl.w	r2, r2, r9
 8005e2a:	ea42 020c 	orr.w	r2, r2, ip
 8005e2e:	f84a 2b04 	str.w	r2, [sl], #4
 8005e32:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e36:	4298      	cmp	r0, r3
 8005e38:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005e3c:	d8f2      	bhi.n	8005e24 <__lshift+0x70>
 8005e3e:	1b03      	subs	r3, r0, r4
 8005e40:	3b15      	subs	r3, #21
 8005e42:	f023 0303 	bic.w	r3, r3, #3
 8005e46:	3304      	adds	r3, #4
 8005e48:	f104 0215 	add.w	r2, r4, #21
 8005e4c:	4290      	cmp	r0, r2
 8005e4e:	bf38      	it	cc
 8005e50:	2304      	movcc	r3, #4
 8005e52:	f841 c003 	str.w	ip, [r1, r3]
 8005e56:	f1bc 0f00 	cmp.w	ip, #0
 8005e5a:	d001      	beq.n	8005e60 <__lshift+0xac>
 8005e5c:	f108 0602 	add.w	r6, r8, #2
 8005e60:	3e01      	subs	r6, #1
 8005e62:	4638      	mov	r0, r7
 8005e64:	612e      	str	r6, [r5, #16]
 8005e66:	4621      	mov	r1, r4
 8005e68:	f7ff fdd2 	bl	8005a10 <_Bfree>
 8005e6c:	4628      	mov	r0, r5
 8005e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e72:	f842 0f04 	str.w	r0, [r2, #4]!
 8005e76:	3301      	adds	r3, #1
 8005e78:	e7c1      	b.n	8005dfe <__lshift+0x4a>
 8005e7a:	3904      	subs	r1, #4
 8005e7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e80:	f841 2f04 	str.w	r2, [r1, #4]!
 8005e84:	4298      	cmp	r0, r3
 8005e86:	d8f9      	bhi.n	8005e7c <__lshift+0xc8>
 8005e88:	e7ea      	b.n	8005e60 <__lshift+0xac>
 8005e8a:	bf00      	nop
 8005e8c:	080068f7 	.word	0x080068f7
 8005e90:	08006968 	.word	0x08006968

08005e94 <__mcmp>:
 8005e94:	b530      	push	{r4, r5, lr}
 8005e96:	6902      	ldr	r2, [r0, #16]
 8005e98:	690c      	ldr	r4, [r1, #16]
 8005e9a:	1b12      	subs	r2, r2, r4
 8005e9c:	d10e      	bne.n	8005ebc <__mcmp+0x28>
 8005e9e:	f100 0314 	add.w	r3, r0, #20
 8005ea2:	3114      	adds	r1, #20
 8005ea4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005ea8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005eac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005eb0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005eb4:	42a5      	cmp	r5, r4
 8005eb6:	d003      	beq.n	8005ec0 <__mcmp+0x2c>
 8005eb8:	d305      	bcc.n	8005ec6 <__mcmp+0x32>
 8005eba:	2201      	movs	r2, #1
 8005ebc:	4610      	mov	r0, r2
 8005ebe:	bd30      	pop	{r4, r5, pc}
 8005ec0:	4283      	cmp	r3, r0
 8005ec2:	d3f3      	bcc.n	8005eac <__mcmp+0x18>
 8005ec4:	e7fa      	b.n	8005ebc <__mcmp+0x28>
 8005ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8005eca:	e7f7      	b.n	8005ebc <__mcmp+0x28>

08005ecc <__mdiff>:
 8005ecc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ed0:	460c      	mov	r4, r1
 8005ed2:	4606      	mov	r6, r0
 8005ed4:	4611      	mov	r1, r2
 8005ed6:	4620      	mov	r0, r4
 8005ed8:	4690      	mov	r8, r2
 8005eda:	f7ff ffdb 	bl	8005e94 <__mcmp>
 8005ede:	1e05      	subs	r5, r0, #0
 8005ee0:	d110      	bne.n	8005f04 <__mdiff+0x38>
 8005ee2:	4629      	mov	r1, r5
 8005ee4:	4630      	mov	r0, r6
 8005ee6:	f7ff fd53 	bl	8005990 <_Balloc>
 8005eea:	b930      	cbnz	r0, 8005efa <__mdiff+0x2e>
 8005eec:	4b3a      	ldr	r3, [pc, #232]	; (8005fd8 <__mdiff+0x10c>)
 8005eee:	4602      	mov	r2, r0
 8005ef0:	f240 2132 	movw	r1, #562	; 0x232
 8005ef4:	4839      	ldr	r0, [pc, #228]	; (8005fdc <__mdiff+0x110>)
 8005ef6:	f000 fb85 	bl	8006604 <__assert_func>
 8005efa:	2301      	movs	r3, #1
 8005efc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005f00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f04:	bfa4      	itt	ge
 8005f06:	4643      	movge	r3, r8
 8005f08:	46a0      	movge	r8, r4
 8005f0a:	4630      	mov	r0, r6
 8005f0c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005f10:	bfa6      	itte	ge
 8005f12:	461c      	movge	r4, r3
 8005f14:	2500      	movge	r5, #0
 8005f16:	2501      	movlt	r5, #1
 8005f18:	f7ff fd3a 	bl	8005990 <_Balloc>
 8005f1c:	b920      	cbnz	r0, 8005f28 <__mdiff+0x5c>
 8005f1e:	4b2e      	ldr	r3, [pc, #184]	; (8005fd8 <__mdiff+0x10c>)
 8005f20:	4602      	mov	r2, r0
 8005f22:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005f26:	e7e5      	b.n	8005ef4 <__mdiff+0x28>
 8005f28:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005f2c:	6926      	ldr	r6, [r4, #16]
 8005f2e:	60c5      	str	r5, [r0, #12]
 8005f30:	f104 0914 	add.w	r9, r4, #20
 8005f34:	f108 0514 	add.w	r5, r8, #20
 8005f38:	f100 0e14 	add.w	lr, r0, #20
 8005f3c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005f40:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005f44:	f108 0210 	add.w	r2, r8, #16
 8005f48:	46f2      	mov	sl, lr
 8005f4a:	2100      	movs	r1, #0
 8005f4c:	f859 3b04 	ldr.w	r3, [r9], #4
 8005f50:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005f54:	fa1f f883 	uxth.w	r8, r3
 8005f58:	fa11 f18b 	uxtah	r1, r1, fp
 8005f5c:	0c1b      	lsrs	r3, r3, #16
 8005f5e:	eba1 0808 	sub.w	r8, r1, r8
 8005f62:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005f66:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005f6a:	fa1f f888 	uxth.w	r8, r8
 8005f6e:	1419      	asrs	r1, r3, #16
 8005f70:	454e      	cmp	r6, r9
 8005f72:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005f76:	f84a 3b04 	str.w	r3, [sl], #4
 8005f7a:	d8e7      	bhi.n	8005f4c <__mdiff+0x80>
 8005f7c:	1b33      	subs	r3, r6, r4
 8005f7e:	3b15      	subs	r3, #21
 8005f80:	f023 0303 	bic.w	r3, r3, #3
 8005f84:	3304      	adds	r3, #4
 8005f86:	3415      	adds	r4, #21
 8005f88:	42a6      	cmp	r6, r4
 8005f8a:	bf38      	it	cc
 8005f8c:	2304      	movcc	r3, #4
 8005f8e:	441d      	add	r5, r3
 8005f90:	4473      	add	r3, lr
 8005f92:	469e      	mov	lr, r3
 8005f94:	462e      	mov	r6, r5
 8005f96:	4566      	cmp	r6, ip
 8005f98:	d30e      	bcc.n	8005fb8 <__mdiff+0xec>
 8005f9a:	f10c 0203 	add.w	r2, ip, #3
 8005f9e:	1b52      	subs	r2, r2, r5
 8005fa0:	f022 0203 	bic.w	r2, r2, #3
 8005fa4:	3d03      	subs	r5, #3
 8005fa6:	45ac      	cmp	ip, r5
 8005fa8:	bf38      	it	cc
 8005faa:	2200      	movcc	r2, #0
 8005fac:	441a      	add	r2, r3
 8005fae:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005fb2:	b17b      	cbz	r3, 8005fd4 <__mdiff+0x108>
 8005fb4:	6107      	str	r7, [r0, #16]
 8005fb6:	e7a3      	b.n	8005f00 <__mdiff+0x34>
 8005fb8:	f856 8b04 	ldr.w	r8, [r6], #4
 8005fbc:	fa11 f288 	uxtah	r2, r1, r8
 8005fc0:	1414      	asrs	r4, r2, #16
 8005fc2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005fc6:	b292      	uxth	r2, r2
 8005fc8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005fcc:	f84e 2b04 	str.w	r2, [lr], #4
 8005fd0:	1421      	asrs	r1, r4, #16
 8005fd2:	e7e0      	b.n	8005f96 <__mdiff+0xca>
 8005fd4:	3f01      	subs	r7, #1
 8005fd6:	e7ea      	b.n	8005fae <__mdiff+0xe2>
 8005fd8:	080068f7 	.word	0x080068f7
 8005fdc:	08006968 	.word	0x08006968

08005fe0 <__d2b>:
 8005fe0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005fe4:	4689      	mov	r9, r1
 8005fe6:	2101      	movs	r1, #1
 8005fe8:	ec57 6b10 	vmov	r6, r7, d0
 8005fec:	4690      	mov	r8, r2
 8005fee:	f7ff fccf 	bl	8005990 <_Balloc>
 8005ff2:	4604      	mov	r4, r0
 8005ff4:	b930      	cbnz	r0, 8006004 <__d2b+0x24>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	4b25      	ldr	r3, [pc, #148]	; (8006090 <__d2b+0xb0>)
 8005ffa:	4826      	ldr	r0, [pc, #152]	; (8006094 <__d2b+0xb4>)
 8005ffc:	f240 310a 	movw	r1, #778	; 0x30a
 8006000:	f000 fb00 	bl	8006604 <__assert_func>
 8006004:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006008:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800600c:	bb35      	cbnz	r5, 800605c <__d2b+0x7c>
 800600e:	2e00      	cmp	r6, #0
 8006010:	9301      	str	r3, [sp, #4]
 8006012:	d028      	beq.n	8006066 <__d2b+0x86>
 8006014:	4668      	mov	r0, sp
 8006016:	9600      	str	r6, [sp, #0]
 8006018:	f7ff fd82 	bl	8005b20 <__lo0bits>
 800601c:	9900      	ldr	r1, [sp, #0]
 800601e:	b300      	cbz	r0, 8006062 <__d2b+0x82>
 8006020:	9a01      	ldr	r2, [sp, #4]
 8006022:	f1c0 0320 	rsb	r3, r0, #32
 8006026:	fa02 f303 	lsl.w	r3, r2, r3
 800602a:	430b      	orrs	r3, r1
 800602c:	40c2      	lsrs	r2, r0
 800602e:	6163      	str	r3, [r4, #20]
 8006030:	9201      	str	r2, [sp, #4]
 8006032:	9b01      	ldr	r3, [sp, #4]
 8006034:	61a3      	str	r3, [r4, #24]
 8006036:	2b00      	cmp	r3, #0
 8006038:	bf14      	ite	ne
 800603a:	2202      	movne	r2, #2
 800603c:	2201      	moveq	r2, #1
 800603e:	6122      	str	r2, [r4, #16]
 8006040:	b1d5      	cbz	r5, 8006078 <__d2b+0x98>
 8006042:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006046:	4405      	add	r5, r0
 8006048:	f8c9 5000 	str.w	r5, [r9]
 800604c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006050:	f8c8 0000 	str.w	r0, [r8]
 8006054:	4620      	mov	r0, r4
 8006056:	b003      	add	sp, #12
 8006058:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800605c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006060:	e7d5      	b.n	800600e <__d2b+0x2e>
 8006062:	6161      	str	r1, [r4, #20]
 8006064:	e7e5      	b.n	8006032 <__d2b+0x52>
 8006066:	a801      	add	r0, sp, #4
 8006068:	f7ff fd5a 	bl	8005b20 <__lo0bits>
 800606c:	9b01      	ldr	r3, [sp, #4]
 800606e:	6163      	str	r3, [r4, #20]
 8006070:	2201      	movs	r2, #1
 8006072:	6122      	str	r2, [r4, #16]
 8006074:	3020      	adds	r0, #32
 8006076:	e7e3      	b.n	8006040 <__d2b+0x60>
 8006078:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800607c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006080:	f8c9 0000 	str.w	r0, [r9]
 8006084:	6918      	ldr	r0, [r3, #16]
 8006086:	f7ff fd2b 	bl	8005ae0 <__hi0bits>
 800608a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800608e:	e7df      	b.n	8006050 <__d2b+0x70>
 8006090:	080068f7 	.word	0x080068f7
 8006094:	08006968 	.word	0x08006968

08006098 <_calloc_r>:
 8006098:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800609a:	fba1 2402 	umull	r2, r4, r1, r2
 800609e:	b94c      	cbnz	r4, 80060b4 <_calloc_r+0x1c>
 80060a0:	4611      	mov	r1, r2
 80060a2:	9201      	str	r2, [sp, #4]
 80060a4:	f000 f87a 	bl	800619c <_malloc_r>
 80060a8:	9a01      	ldr	r2, [sp, #4]
 80060aa:	4605      	mov	r5, r0
 80060ac:	b930      	cbnz	r0, 80060bc <_calloc_r+0x24>
 80060ae:	4628      	mov	r0, r5
 80060b0:	b003      	add	sp, #12
 80060b2:	bd30      	pop	{r4, r5, pc}
 80060b4:	220c      	movs	r2, #12
 80060b6:	6002      	str	r2, [r0, #0]
 80060b8:	2500      	movs	r5, #0
 80060ba:	e7f8      	b.n	80060ae <_calloc_r+0x16>
 80060bc:	4621      	mov	r1, r4
 80060be:	f7fd fdf3 	bl	8003ca8 <memset>
 80060c2:	e7f4      	b.n	80060ae <_calloc_r+0x16>

080060c4 <_free_r>:
 80060c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80060c6:	2900      	cmp	r1, #0
 80060c8:	d044      	beq.n	8006154 <_free_r+0x90>
 80060ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060ce:	9001      	str	r0, [sp, #4]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f1a1 0404 	sub.w	r4, r1, #4
 80060d6:	bfb8      	it	lt
 80060d8:	18e4      	addlt	r4, r4, r3
 80060da:	f000 fb19 	bl	8006710 <__malloc_lock>
 80060de:	4a1e      	ldr	r2, [pc, #120]	; (8006158 <_free_r+0x94>)
 80060e0:	9801      	ldr	r0, [sp, #4]
 80060e2:	6813      	ldr	r3, [r2, #0]
 80060e4:	b933      	cbnz	r3, 80060f4 <_free_r+0x30>
 80060e6:	6063      	str	r3, [r4, #4]
 80060e8:	6014      	str	r4, [r2, #0]
 80060ea:	b003      	add	sp, #12
 80060ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80060f0:	f000 bb14 	b.w	800671c <__malloc_unlock>
 80060f4:	42a3      	cmp	r3, r4
 80060f6:	d908      	bls.n	800610a <_free_r+0x46>
 80060f8:	6825      	ldr	r5, [r4, #0]
 80060fa:	1961      	adds	r1, r4, r5
 80060fc:	428b      	cmp	r3, r1
 80060fe:	bf01      	itttt	eq
 8006100:	6819      	ldreq	r1, [r3, #0]
 8006102:	685b      	ldreq	r3, [r3, #4]
 8006104:	1949      	addeq	r1, r1, r5
 8006106:	6021      	streq	r1, [r4, #0]
 8006108:	e7ed      	b.n	80060e6 <_free_r+0x22>
 800610a:	461a      	mov	r2, r3
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	b10b      	cbz	r3, 8006114 <_free_r+0x50>
 8006110:	42a3      	cmp	r3, r4
 8006112:	d9fa      	bls.n	800610a <_free_r+0x46>
 8006114:	6811      	ldr	r1, [r2, #0]
 8006116:	1855      	adds	r5, r2, r1
 8006118:	42a5      	cmp	r5, r4
 800611a:	d10b      	bne.n	8006134 <_free_r+0x70>
 800611c:	6824      	ldr	r4, [r4, #0]
 800611e:	4421      	add	r1, r4
 8006120:	1854      	adds	r4, r2, r1
 8006122:	42a3      	cmp	r3, r4
 8006124:	6011      	str	r1, [r2, #0]
 8006126:	d1e0      	bne.n	80060ea <_free_r+0x26>
 8006128:	681c      	ldr	r4, [r3, #0]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	6053      	str	r3, [r2, #4]
 800612e:	4421      	add	r1, r4
 8006130:	6011      	str	r1, [r2, #0]
 8006132:	e7da      	b.n	80060ea <_free_r+0x26>
 8006134:	d902      	bls.n	800613c <_free_r+0x78>
 8006136:	230c      	movs	r3, #12
 8006138:	6003      	str	r3, [r0, #0]
 800613a:	e7d6      	b.n	80060ea <_free_r+0x26>
 800613c:	6825      	ldr	r5, [r4, #0]
 800613e:	1961      	adds	r1, r4, r5
 8006140:	428b      	cmp	r3, r1
 8006142:	bf04      	itt	eq
 8006144:	6819      	ldreq	r1, [r3, #0]
 8006146:	685b      	ldreq	r3, [r3, #4]
 8006148:	6063      	str	r3, [r4, #4]
 800614a:	bf04      	itt	eq
 800614c:	1949      	addeq	r1, r1, r5
 800614e:	6021      	streq	r1, [r4, #0]
 8006150:	6054      	str	r4, [r2, #4]
 8006152:	e7ca      	b.n	80060ea <_free_r+0x26>
 8006154:	b003      	add	sp, #12
 8006156:	bd30      	pop	{r4, r5, pc}
 8006158:	200002c0 	.word	0x200002c0

0800615c <sbrk_aligned>:
 800615c:	b570      	push	{r4, r5, r6, lr}
 800615e:	4e0e      	ldr	r6, [pc, #56]	; (8006198 <sbrk_aligned+0x3c>)
 8006160:	460c      	mov	r4, r1
 8006162:	6831      	ldr	r1, [r6, #0]
 8006164:	4605      	mov	r5, r0
 8006166:	b911      	cbnz	r1, 800616e <sbrk_aligned+0x12>
 8006168:	f000 f9e6 	bl	8006538 <_sbrk_r>
 800616c:	6030      	str	r0, [r6, #0]
 800616e:	4621      	mov	r1, r4
 8006170:	4628      	mov	r0, r5
 8006172:	f000 f9e1 	bl	8006538 <_sbrk_r>
 8006176:	1c43      	adds	r3, r0, #1
 8006178:	d00a      	beq.n	8006190 <sbrk_aligned+0x34>
 800617a:	1cc4      	adds	r4, r0, #3
 800617c:	f024 0403 	bic.w	r4, r4, #3
 8006180:	42a0      	cmp	r0, r4
 8006182:	d007      	beq.n	8006194 <sbrk_aligned+0x38>
 8006184:	1a21      	subs	r1, r4, r0
 8006186:	4628      	mov	r0, r5
 8006188:	f000 f9d6 	bl	8006538 <_sbrk_r>
 800618c:	3001      	adds	r0, #1
 800618e:	d101      	bne.n	8006194 <sbrk_aligned+0x38>
 8006190:	f04f 34ff 	mov.w	r4, #4294967295
 8006194:	4620      	mov	r0, r4
 8006196:	bd70      	pop	{r4, r5, r6, pc}
 8006198:	200002c4 	.word	0x200002c4

0800619c <_malloc_r>:
 800619c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061a0:	1ccd      	adds	r5, r1, #3
 80061a2:	f025 0503 	bic.w	r5, r5, #3
 80061a6:	3508      	adds	r5, #8
 80061a8:	2d0c      	cmp	r5, #12
 80061aa:	bf38      	it	cc
 80061ac:	250c      	movcc	r5, #12
 80061ae:	2d00      	cmp	r5, #0
 80061b0:	4607      	mov	r7, r0
 80061b2:	db01      	blt.n	80061b8 <_malloc_r+0x1c>
 80061b4:	42a9      	cmp	r1, r5
 80061b6:	d905      	bls.n	80061c4 <_malloc_r+0x28>
 80061b8:	230c      	movs	r3, #12
 80061ba:	603b      	str	r3, [r7, #0]
 80061bc:	2600      	movs	r6, #0
 80061be:	4630      	mov	r0, r6
 80061c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061c4:	4e2e      	ldr	r6, [pc, #184]	; (8006280 <_malloc_r+0xe4>)
 80061c6:	f000 faa3 	bl	8006710 <__malloc_lock>
 80061ca:	6833      	ldr	r3, [r6, #0]
 80061cc:	461c      	mov	r4, r3
 80061ce:	bb34      	cbnz	r4, 800621e <_malloc_r+0x82>
 80061d0:	4629      	mov	r1, r5
 80061d2:	4638      	mov	r0, r7
 80061d4:	f7ff ffc2 	bl	800615c <sbrk_aligned>
 80061d8:	1c43      	adds	r3, r0, #1
 80061da:	4604      	mov	r4, r0
 80061dc:	d14d      	bne.n	800627a <_malloc_r+0xde>
 80061de:	6834      	ldr	r4, [r6, #0]
 80061e0:	4626      	mov	r6, r4
 80061e2:	2e00      	cmp	r6, #0
 80061e4:	d140      	bne.n	8006268 <_malloc_r+0xcc>
 80061e6:	6823      	ldr	r3, [r4, #0]
 80061e8:	4631      	mov	r1, r6
 80061ea:	4638      	mov	r0, r7
 80061ec:	eb04 0803 	add.w	r8, r4, r3
 80061f0:	f000 f9a2 	bl	8006538 <_sbrk_r>
 80061f4:	4580      	cmp	r8, r0
 80061f6:	d13a      	bne.n	800626e <_malloc_r+0xd2>
 80061f8:	6821      	ldr	r1, [r4, #0]
 80061fa:	3503      	adds	r5, #3
 80061fc:	1a6d      	subs	r5, r5, r1
 80061fe:	f025 0503 	bic.w	r5, r5, #3
 8006202:	3508      	adds	r5, #8
 8006204:	2d0c      	cmp	r5, #12
 8006206:	bf38      	it	cc
 8006208:	250c      	movcc	r5, #12
 800620a:	4629      	mov	r1, r5
 800620c:	4638      	mov	r0, r7
 800620e:	f7ff ffa5 	bl	800615c <sbrk_aligned>
 8006212:	3001      	adds	r0, #1
 8006214:	d02b      	beq.n	800626e <_malloc_r+0xd2>
 8006216:	6823      	ldr	r3, [r4, #0]
 8006218:	442b      	add	r3, r5
 800621a:	6023      	str	r3, [r4, #0]
 800621c:	e00e      	b.n	800623c <_malloc_r+0xa0>
 800621e:	6822      	ldr	r2, [r4, #0]
 8006220:	1b52      	subs	r2, r2, r5
 8006222:	d41e      	bmi.n	8006262 <_malloc_r+0xc6>
 8006224:	2a0b      	cmp	r2, #11
 8006226:	d916      	bls.n	8006256 <_malloc_r+0xba>
 8006228:	1961      	adds	r1, r4, r5
 800622a:	42a3      	cmp	r3, r4
 800622c:	6025      	str	r5, [r4, #0]
 800622e:	bf18      	it	ne
 8006230:	6059      	strne	r1, [r3, #4]
 8006232:	6863      	ldr	r3, [r4, #4]
 8006234:	bf08      	it	eq
 8006236:	6031      	streq	r1, [r6, #0]
 8006238:	5162      	str	r2, [r4, r5]
 800623a:	604b      	str	r3, [r1, #4]
 800623c:	4638      	mov	r0, r7
 800623e:	f104 060b 	add.w	r6, r4, #11
 8006242:	f000 fa6b 	bl	800671c <__malloc_unlock>
 8006246:	f026 0607 	bic.w	r6, r6, #7
 800624a:	1d23      	adds	r3, r4, #4
 800624c:	1af2      	subs	r2, r6, r3
 800624e:	d0b6      	beq.n	80061be <_malloc_r+0x22>
 8006250:	1b9b      	subs	r3, r3, r6
 8006252:	50a3      	str	r3, [r4, r2]
 8006254:	e7b3      	b.n	80061be <_malloc_r+0x22>
 8006256:	6862      	ldr	r2, [r4, #4]
 8006258:	42a3      	cmp	r3, r4
 800625a:	bf0c      	ite	eq
 800625c:	6032      	streq	r2, [r6, #0]
 800625e:	605a      	strne	r2, [r3, #4]
 8006260:	e7ec      	b.n	800623c <_malloc_r+0xa0>
 8006262:	4623      	mov	r3, r4
 8006264:	6864      	ldr	r4, [r4, #4]
 8006266:	e7b2      	b.n	80061ce <_malloc_r+0x32>
 8006268:	4634      	mov	r4, r6
 800626a:	6876      	ldr	r6, [r6, #4]
 800626c:	e7b9      	b.n	80061e2 <_malloc_r+0x46>
 800626e:	230c      	movs	r3, #12
 8006270:	603b      	str	r3, [r7, #0]
 8006272:	4638      	mov	r0, r7
 8006274:	f000 fa52 	bl	800671c <__malloc_unlock>
 8006278:	e7a1      	b.n	80061be <_malloc_r+0x22>
 800627a:	6025      	str	r5, [r4, #0]
 800627c:	e7de      	b.n	800623c <_malloc_r+0xa0>
 800627e:	bf00      	nop
 8006280:	200002c0 	.word	0x200002c0

08006284 <__sfputc_r>:
 8006284:	6893      	ldr	r3, [r2, #8]
 8006286:	3b01      	subs	r3, #1
 8006288:	2b00      	cmp	r3, #0
 800628a:	b410      	push	{r4}
 800628c:	6093      	str	r3, [r2, #8]
 800628e:	da08      	bge.n	80062a2 <__sfputc_r+0x1e>
 8006290:	6994      	ldr	r4, [r2, #24]
 8006292:	42a3      	cmp	r3, r4
 8006294:	db01      	blt.n	800629a <__sfputc_r+0x16>
 8006296:	290a      	cmp	r1, #10
 8006298:	d103      	bne.n	80062a2 <__sfputc_r+0x1e>
 800629a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800629e:	f7fe ba03 	b.w	80046a8 <__swbuf_r>
 80062a2:	6813      	ldr	r3, [r2, #0]
 80062a4:	1c58      	adds	r0, r3, #1
 80062a6:	6010      	str	r0, [r2, #0]
 80062a8:	7019      	strb	r1, [r3, #0]
 80062aa:	4608      	mov	r0, r1
 80062ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062b0:	4770      	bx	lr

080062b2 <__sfputs_r>:
 80062b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062b4:	4606      	mov	r6, r0
 80062b6:	460f      	mov	r7, r1
 80062b8:	4614      	mov	r4, r2
 80062ba:	18d5      	adds	r5, r2, r3
 80062bc:	42ac      	cmp	r4, r5
 80062be:	d101      	bne.n	80062c4 <__sfputs_r+0x12>
 80062c0:	2000      	movs	r0, #0
 80062c2:	e007      	b.n	80062d4 <__sfputs_r+0x22>
 80062c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062c8:	463a      	mov	r2, r7
 80062ca:	4630      	mov	r0, r6
 80062cc:	f7ff ffda 	bl	8006284 <__sfputc_r>
 80062d0:	1c43      	adds	r3, r0, #1
 80062d2:	d1f3      	bne.n	80062bc <__sfputs_r+0xa>
 80062d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080062d8 <_vfiprintf_r>:
 80062d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062dc:	460d      	mov	r5, r1
 80062de:	b09d      	sub	sp, #116	; 0x74
 80062e0:	4614      	mov	r4, r2
 80062e2:	4698      	mov	r8, r3
 80062e4:	4606      	mov	r6, r0
 80062e6:	b118      	cbz	r0, 80062f0 <_vfiprintf_r+0x18>
 80062e8:	6983      	ldr	r3, [r0, #24]
 80062ea:	b90b      	cbnz	r3, 80062f0 <_vfiprintf_r+0x18>
 80062ec:	f7ff fa30 	bl	8005750 <__sinit>
 80062f0:	4b89      	ldr	r3, [pc, #548]	; (8006518 <_vfiprintf_r+0x240>)
 80062f2:	429d      	cmp	r5, r3
 80062f4:	d11b      	bne.n	800632e <_vfiprintf_r+0x56>
 80062f6:	6875      	ldr	r5, [r6, #4]
 80062f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062fa:	07d9      	lsls	r1, r3, #31
 80062fc:	d405      	bmi.n	800630a <_vfiprintf_r+0x32>
 80062fe:	89ab      	ldrh	r3, [r5, #12]
 8006300:	059a      	lsls	r2, r3, #22
 8006302:	d402      	bmi.n	800630a <_vfiprintf_r+0x32>
 8006304:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006306:	f7ff fac6 	bl	8005896 <__retarget_lock_acquire_recursive>
 800630a:	89ab      	ldrh	r3, [r5, #12]
 800630c:	071b      	lsls	r3, r3, #28
 800630e:	d501      	bpl.n	8006314 <_vfiprintf_r+0x3c>
 8006310:	692b      	ldr	r3, [r5, #16]
 8006312:	b9eb      	cbnz	r3, 8006350 <_vfiprintf_r+0x78>
 8006314:	4629      	mov	r1, r5
 8006316:	4630      	mov	r0, r6
 8006318:	f7fe fa18 	bl	800474c <__swsetup_r>
 800631c:	b1c0      	cbz	r0, 8006350 <_vfiprintf_r+0x78>
 800631e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006320:	07dc      	lsls	r4, r3, #31
 8006322:	d50e      	bpl.n	8006342 <_vfiprintf_r+0x6a>
 8006324:	f04f 30ff 	mov.w	r0, #4294967295
 8006328:	b01d      	add	sp, #116	; 0x74
 800632a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800632e:	4b7b      	ldr	r3, [pc, #492]	; (800651c <_vfiprintf_r+0x244>)
 8006330:	429d      	cmp	r5, r3
 8006332:	d101      	bne.n	8006338 <_vfiprintf_r+0x60>
 8006334:	68b5      	ldr	r5, [r6, #8]
 8006336:	e7df      	b.n	80062f8 <_vfiprintf_r+0x20>
 8006338:	4b79      	ldr	r3, [pc, #484]	; (8006520 <_vfiprintf_r+0x248>)
 800633a:	429d      	cmp	r5, r3
 800633c:	bf08      	it	eq
 800633e:	68f5      	ldreq	r5, [r6, #12]
 8006340:	e7da      	b.n	80062f8 <_vfiprintf_r+0x20>
 8006342:	89ab      	ldrh	r3, [r5, #12]
 8006344:	0598      	lsls	r0, r3, #22
 8006346:	d4ed      	bmi.n	8006324 <_vfiprintf_r+0x4c>
 8006348:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800634a:	f7ff faa5 	bl	8005898 <__retarget_lock_release_recursive>
 800634e:	e7e9      	b.n	8006324 <_vfiprintf_r+0x4c>
 8006350:	2300      	movs	r3, #0
 8006352:	9309      	str	r3, [sp, #36]	; 0x24
 8006354:	2320      	movs	r3, #32
 8006356:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800635a:	f8cd 800c 	str.w	r8, [sp, #12]
 800635e:	2330      	movs	r3, #48	; 0x30
 8006360:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006524 <_vfiprintf_r+0x24c>
 8006364:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006368:	f04f 0901 	mov.w	r9, #1
 800636c:	4623      	mov	r3, r4
 800636e:	469a      	mov	sl, r3
 8006370:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006374:	b10a      	cbz	r2, 800637a <_vfiprintf_r+0xa2>
 8006376:	2a25      	cmp	r2, #37	; 0x25
 8006378:	d1f9      	bne.n	800636e <_vfiprintf_r+0x96>
 800637a:	ebba 0b04 	subs.w	fp, sl, r4
 800637e:	d00b      	beq.n	8006398 <_vfiprintf_r+0xc0>
 8006380:	465b      	mov	r3, fp
 8006382:	4622      	mov	r2, r4
 8006384:	4629      	mov	r1, r5
 8006386:	4630      	mov	r0, r6
 8006388:	f7ff ff93 	bl	80062b2 <__sfputs_r>
 800638c:	3001      	adds	r0, #1
 800638e:	f000 80aa 	beq.w	80064e6 <_vfiprintf_r+0x20e>
 8006392:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006394:	445a      	add	r2, fp
 8006396:	9209      	str	r2, [sp, #36]	; 0x24
 8006398:	f89a 3000 	ldrb.w	r3, [sl]
 800639c:	2b00      	cmp	r3, #0
 800639e:	f000 80a2 	beq.w	80064e6 <_vfiprintf_r+0x20e>
 80063a2:	2300      	movs	r3, #0
 80063a4:	f04f 32ff 	mov.w	r2, #4294967295
 80063a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063ac:	f10a 0a01 	add.w	sl, sl, #1
 80063b0:	9304      	str	r3, [sp, #16]
 80063b2:	9307      	str	r3, [sp, #28]
 80063b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80063b8:	931a      	str	r3, [sp, #104]	; 0x68
 80063ba:	4654      	mov	r4, sl
 80063bc:	2205      	movs	r2, #5
 80063be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063c2:	4858      	ldr	r0, [pc, #352]	; (8006524 <_vfiprintf_r+0x24c>)
 80063c4:	f7f9 ff14 	bl	80001f0 <memchr>
 80063c8:	9a04      	ldr	r2, [sp, #16]
 80063ca:	b9d8      	cbnz	r0, 8006404 <_vfiprintf_r+0x12c>
 80063cc:	06d1      	lsls	r1, r2, #27
 80063ce:	bf44      	itt	mi
 80063d0:	2320      	movmi	r3, #32
 80063d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063d6:	0713      	lsls	r3, r2, #28
 80063d8:	bf44      	itt	mi
 80063da:	232b      	movmi	r3, #43	; 0x2b
 80063dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063e0:	f89a 3000 	ldrb.w	r3, [sl]
 80063e4:	2b2a      	cmp	r3, #42	; 0x2a
 80063e6:	d015      	beq.n	8006414 <_vfiprintf_r+0x13c>
 80063e8:	9a07      	ldr	r2, [sp, #28]
 80063ea:	4654      	mov	r4, sl
 80063ec:	2000      	movs	r0, #0
 80063ee:	f04f 0c0a 	mov.w	ip, #10
 80063f2:	4621      	mov	r1, r4
 80063f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063f8:	3b30      	subs	r3, #48	; 0x30
 80063fa:	2b09      	cmp	r3, #9
 80063fc:	d94e      	bls.n	800649c <_vfiprintf_r+0x1c4>
 80063fe:	b1b0      	cbz	r0, 800642e <_vfiprintf_r+0x156>
 8006400:	9207      	str	r2, [sp, #28]
 8006402:	e014      	b.n	800642e <_vfiprintf_r+0x156>
 8006404:	eba0 0308 	sub.w	r3, r0, r8
 8006408:	fa09 f303 	lsl.w	r3, r9, r3
 800640c:	4313      	orrs	r3, r2
 800640e:	9304      	str	r3, [sp, #16]
 8006410:	46a2      	mov	sl, r4
 8006412:	e7d2      	b.n	80063ba <_vfiprintf_r+0xe2>
 8006414:	9b03      	ldr	r3, [sp, #12]
 8006416:	1d19      	adds	r1, r3, #4
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	9103      	str	r1, [sp, #12]
 800641c:	2b00      	cmp	r3, #0
 800641e:	bfbb      	ittet	lt
 8006420:	425b      	neglt	r3, r3
 8006422:	f042 0202 	orrlt.w	r2, r2, #2
 8006426:	9307      	strge	r3, [sp, #28]
 8006428:	9307      	strlt	r3, [sp, #28]
 800642a:	bfb8      	it	lt
 800642c:	9204      	strlt	r2, [sp, #16]
 800642e:	7823      	ldrb	r3, [r4, #0]
 8006430:	2b2e      	cmp	r3, #46	; 0x2e
 8006432:	d10c      	bne.n	800644e <_vfiprintf_r+0x176>
 8006434:	7863      	ldrb	r3, [r4, #1]
 8006436:	2b2a      	cmp	r3, #42	; 0x2a
 8006438:	d135      	bne.n	80064a6 <_vfiprintf_r+0x1ce>
 800643a:	9b03      	ldr	r3, [sp, #12]
 800643c:	1d1a      	adds	r2, r3, #4
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	9203      	str	r2, [sp, #12]
 8006442:	2b00      	cmp	r3, #0
 8006444:	bfb8      	it	lt
 8006446:	f04f 33ff 	movlt.w	r3, #4294967295
 800644a:	3402      	adds	r4, #2
 800644c:	9305      	str	r3, [sp, #20]
 800644e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006534 <_vfiprintf_r+0x25c>
 8006452:	7821      	ldrb	r1, [r4, #0]
 8006454:	2203      	movs	r2, #3
 8006456:	4650      	mov	r0, sl
 8006458:	f7f9 feca 	bl	80001f0 <memchr>
 800645c:	b140      	cbz	r0, 8006470 <_vfiprintf_r+0x198>
 800645e:	2340      	movs	r3, #64	; 0x40
 8006460:	eba0 000a 	sub.w	r0, r0, sl
 8006464:	fa03 f000 	lsl.w	r0, r3, r0
 8006468:	9b04      	ldr	r3, [sp, #16]
 800646a:	4303      	orrs	r3, r0
 800646c:	3401      	adds	r4, #1
 800646e:	9304      	str	r3, [sp, #16]
 8006470:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006474:	482c      	ldr	r0, [pc, #176]	; (8006528 <_vfiprintf_r+0x250>)
 8006476:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800647a:	2206      	movs	r2, #6
 800647c:	f7f9 feb8 	bl	80001f0 <memchr>
 8006480:	2800      	cmp	r0, #0
 8006482:	d03f      	beq.n	8006504 <_vfiprintf_r+0x22c>
 8006484:	4b29      	ldr	r3, [pc, #164]	; (800652c <_vfiprintf_r+0x254>)
 8006486:	bb1b      	cbnz	r3, 80064d0 <_vfiprintf_r+0x1f8>
 8006488:	9b03      	ldr	r3, [sp, #12]
 800648a:	3307      	adds	r3, #7
 800648c:	f023 0307 	bic.w	r3, r3, #7
 8006490:	3308      	adds	r3, #8
 8006492:	9303      	str	r3, [sp, #12]
 8006494:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006496:	443b      	add	r3, r7
 8006498:	9309      	str	r3, [sp, #36]	; 0x24
 800649a:	e767      	b.n	800636c <_vfiprintf_r+0x94>
 800649c:	fb0c 3202 	mla	r2, ip, r2, r3
 80064a0:	460c      	mov	r4, r1
 80064a2:	2001      	movs	r0, #1
 80064a4:	e7a5      	b.n	80063f2 <_vfiprintf_r+0x11a>
 80064a6:	2300      	movs	r3, #0
 80064a8:	3401      	adds	r4, #1
 80064aa:	9305      	str	r3, [sp, #20]
 80064ac:	4619      	mov	r1, r3
 80064ae:	f04f 0c0a 	mov.w	ip, #10
 80064b2:	4620      	mov	r0, r4
 80064b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064b8:	3a30      	subs	r2, #48	; 0x30
 80064ba:	2a09      	cmp	r2, #9
 80064bc:	d903      	bls.n	80064c6 <_vfiprintf_r+0x1ee>
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d0c5      	beq.n	800644e <_vfiprintf_r+0x176>
 80064c2:	9105      	str	r1, [sp, #20]
 80064c4:	e7c3      	b.n	800644e <_vfiprintf_r+0x176>
 80064c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80064ca:	4604      	mov	r4, r0
 80064cc:	2301      	movs	r3, #1
 80064ce:	e7f0      	b.n	80064b2 <_vfiprintf_r+0x1da>
 80064d0:	ab03      	add	r3, sp, #12
 80064d2:	9300      	str	r3, [sp, #0]
 80064d4:	462a      	mov	r2, r5
 80064d6:	4b16      	ldr	r3, [pc, #88]	; (8006530 <_vfiprintf_r+0x258>)
 80064d8:	a904      	add	r1, sp, #16
 80064da:	4630      	mov	r0, r6
 80064dc:	f7fd fc8c 	bl	8003df8 <_printf_float>
 80064e0:	4607      	mov	r7, r0
 80064e2:	1c78      	adds	r0, r7, #1
 80064e4:	d1d6      	bne.n	8006494 <_vfiprintf_r+0x1bc>
 80064e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064e8:	07d9      	lsls	r1, r3, #31
 80064ea:	d405      	bmi.n	80064f8 <_vfiprintf_r+0x220>
 80064ec:	89ab      	ldrh	r3, [r5, #12]
 80064ee:	059a      	lsls	r2, r3, #22
 80064f0:	d402      	bmi.n	80064f8 <_vfiprintf_r+0x220>
 80064f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80064f4:	f7ff f9d0 	bl	8005898 <__retarget_lock_release_recursive>
 80064f8:	89ab      	ldrh	r3, [r5, #12]
 80064fa:	065b      	lsls	r3, r3, #25
 80064fc:	f53f af12 	bmi.w	8006324 <_vfiprintf_r+0x4c>
 8006500:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006502:	e711      	b.n	8006328 <_vfiprintf_r+0x50>
 8006504:	ab03      	add	r3, sp, #12
 8006506:	9300      	str	r3, [sp, #0]
 8006508:	462a      	mov	r2, r5
 800650a:	4b09      	ldr	r3, [pc, #36]	; (8006530 <_vfiprintf_r+0x258>)
 800650c:	a904      	add	r1, sp, #16
 800650e:	4630      	mov	r0, r6
 8006510:	f7fd ff16 	bl	8004340 <_printf_i>
 8006514:	e7e4      	b.n	80064e0 <_vfiprintf_r+0x208>
 8006516:	bf00      	nop
 8006518:	08006928 	.word	0x08006928
 800651c:	08006948 	.word	0x08006948
 8006520:	08006908 	.word	0x08006908
 8006524:	08006ac4 	.word	0x08006ac4
 8006528:	08006ace 	.word	0x08006ace
 800652c:	08003df9 	.word	0x08003df9
 8006530:	080062b3 	.word	0x080062b3
 8006534:	08006aca 	.word	0x08006aca

08006538 <_sbrk_r>:
 8006538:	b538      	push	{r3, r4, r5, lr}
 800653a:	4d06      	ldr	r5, [pc, #24]	; (8006554 <_sbrk_r+0x1c>)
 800653c:	2300      	movs	r3, #0
 800653e:	4604      	mov	r4, r0
 8006540:	4608      	mov	r0, r1
 8006542:	602b      	str	r3, [r5, #0]
 8006544:	f7fb fcea 	bl	8001f1c <_sbrk>
 8006548:	1c43      	adds	r3, r0, #1
 800654a:	d102      	bne.n	8006552 <_sbrk_r+0x1a>
 800654c:	682b      	ldr	r3, [r5, #0]
 800654e:	b103      	cbz	r3, 8006552 <_sbrk_r+0x1a>
 8006550:	6023      	str	r3, [r4, #0]
 8006552:	bd38      	pop	{r3, r4, r5, pc}
 8006554:	200002c8 	.word	0x200002c8

08006558 <__sread>:
 8006558:	b510      	push	{r4, lr}
 800655a:	460c      	mov	r4, r1
 800655c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006560:	f000 f8e2 	bl	8006728 <_read_r>
 8006564:	2800      	cmp	r0, #0
 8006566:	bfab      	itete	ge
 8006568:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800656a:	89a3      	ldrhlt	r3, [r4, #12]
 800656c:	181b      	addge	r3, r3, r0
 800656e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006572:	bfac      	ite	ge
 8006574:	6563      	strge	r3, [r4, #84]	; 0x54
 8006576:	81a3      	strhlt	r3, [r4, #12]
 8006578:	bd10      	pop	{r4, pc}

0800657a <__swrite>:
 800657a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800657e:	461f      	mov	r7, r3
 8006580:	898b      	ldrh	r3, [r1, #12]
 8006582:	05db      	lsls	r3, r3, #23
 8006584:	4605      	mov	r5, r0
 8006586:	460c      	mov	r4, r1
 8006588:	4616      	mov	r6, r2
 800658a:	d505      	bpl.n	8006598 <__swrite+0x1e>
 800658c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006590:	2302      	movs	r3, #2
 8006592:	2200      	movs	r2, #0
 8006594:	f000 f898 	bl	80066c8 <_lseek_r>
 8006598:	89a3      	ldrh	r3, [r4, #12]
 800659a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800659e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065a2:	81a3      	strh	r3, [r4, #12]
 80065a4:	4632      	mov	r2, r6
 80065a6:	463b      	mov	r3, r7
 80065a8:	4628      	mov	r0, r5
 80065aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065ae:	f000 b817 	b.w	80065e0 <_write_r>

080065b2 <__sseek>:
 80065b2:	b510      	push	{r4, lr}
 80065b4:	460c      	mov	r4, r1
 80065b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065ba:	f000 f885 	bl	80066c8 <_lseek_r>
 80065be:	1c43      	adds	r3, r0, #1
 80065c0:	89a3      	ldrh	r3, [r4, #12]
 80065c2:	bf15      	itete	ne
 80065c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80065c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80065ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80065ce:	81a3      	strheq	r3, [r4, #12]
 80065d0:	bf18      	it	ne
 80065d2:	81a3      	strhne	r3, [r4, #12]
 80065d4:	bd10      	pop	{r4, pc}

080065d6 <__sclose>:
 80065d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065da:	f000 b831 	b.w	8006640 <_close_r>
	...

080065e0 <_write_r>:
 80065e0:	b538      	push	{r3, r4, r5, lr}
 80065e2:	4d07      	ldr	r5, [pc, #28]	; (8006600 <_write_r+0x20>)
 80065e4:	4604      	mov	r4, r0
 80065e6:	4608      	mov	r0, r1
 80065e8:	4611      	mov	r1, r2
 80065ea:	2200      	movs	r2, #0
 80065ec:	602a      	str	r2, [r5, #0]
 80065ee:	461a      	mov	r2, r3
 80065f0:	f7fa fcb4 	bl	8000f5c <_write>
 80065f4:	1c43      	adds	r3, r0, #1
 80065f6:	d102      	bne.n	80065fe <_write_r+0x1e>
 80065f8:	682b      	ldr	r3, [r5, #0]
 80065fa:	b103      	cbz	r3, 80065fe <_write_r+0x1e>
 80065fc:	6023      	str	r3, [r4, #0]
 80065fe:	bd38      	pop	{r3, r4, r5, pc}
 8006600:	200002c8 	.word	0x200002c8

08006604 <__assert_func>:
 8006604:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006606:	4614      	mov	r4, r2
 8006608:	461a      	mov	r2, r3
 800660a:	4b09      	ldr	r3, [pc, #36]	; (8006630 <__assert_func+0x2c>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4605      	mov	r5, r0
 8006610:	68d8      	ldr	r0, [r3, #12]
 8006612:	b14c      	cbz	r4, 8006628 <__assert_func+0x24>
 8006614:	4b07      	ldr	r3, [pc, #28]	; (8006634 <__assert_func+0x30>)
 8006616:	9100      	str	r1, [sp, #0]
 8006618:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800661c:	4906      	ldr	r1, [pc, #24]	; (8006638 <__assert_func+0x34>)
 800661e:	462b      	mov	r3, r5
 8006620:	f000 f81e 	bl	8006660 <fiprintf>
 8006624:	f000 f89f 	bl	8006766 <abort>
 8006628:	4b04      	ldr	r3, [pc, #16]	; (800663c <__assert_func+0x38>)
 800662a:	461c      	mov	r4, r3
 800662c:	e7f3      	b.n	8006616 <__assert_func+0x12>
 800662e:	bf00      	nop
 8006630:	2000000c 	.word	0x2000000c
 8006634:	08006ad5 	.word	0x08006ad5
 8006638:	08006ae2 	.word	0x08006ae2
 800663c:	08006b10 	.word	0x08006b10

08006640 <_close_r>:
 8006640:	b538      	push	{r3, r4, r5, lr}
 8006642:	4d06      	ldr	r5, [pc, #24]	; (800665c <_close_r+0x1c>)
 8006644:	2300      	movs	r3, #0
 8006646:	4604      	mov	r4, r0
 8006648:	4608      	mov	r0, r1
 800664a:	602b      	str	r3, [r5, #0]
 800664c:	f7fb fc31 	bl	8001eb2 <_close>
 8006650:	1c43      	adds	r3, r0, #1
 8006652:	d102      	bne.n	800665a <_close_r+0x1a>
 8006654:	682b      	ldr	r3, [r5, #0]
 8006656:	b103      	cbz	r3, 800665a <_close_r+0x1a>
 8006658:	6023      	str	r3, [r4, #0]
 800665a:	bd38      	pop	{r3, r4, r5, pc}
 800665c:	200002c8 	.word	0x200002c8

08006660 <fiprintf>:
 8006660:	b40e      	push	{r1, r2, r3}
 8006662:	b503      	push	{r0, r1, lr}
 8006664:	4601      	mov	r1, r0
 8006666:	ab03      	add	r3, sp, #12
 8006668:	4805      	ldr	r0, [pc, #20]	; (8006680 <fiprintf+0x20>)
 800666a:	f853 2b04 	ldr.w	r2, [r3], #4
 800666e:	6800      	ldr	r0, [r0, #0]
 8006670:	9301      	str	r3, [sp, #4]
 8006672:	f7ff fe31 	bl	80062d8 <_vfiprintf_r>
 8006676:	b002      	add	sp, #8
 8006678:	f85d eb04 	ldr.w	lr, [sp], #4
 800667c:	b003      	add	sp, #12
 800667e:	4770      	bx	lr
 8006680:	2000000c 	.word	0x2000000c

08006684 <_fstat_r>:
 8006684:	b538      	push	{r3, r4, r5, lr}
 8006686:	4d07      	ldr	r5, [pc, #28]	; (80066a4 <_fstat_r+0x20>)
 8006688:	2300      	movs	r3, #0
 800668a:	4604      	mov	r4, r0
 800668c:	4608      	mov	r0, r1
 800668e:	4611      	mov	r1, r2
 8006690:	602b      	str	r3, [r5, #0]
 8006692:	f7fb fc1a 	bl	8001eca <_fstat>
 8006696:	1c43      	adds	r3, r0, #1
 8006698:	d102      	bne.n	80066a0 <_fstat_r+0x1c>
 800669a:	682b      	ldr	r3, [r5, #0]
 800669c:	b103      	cbz	r3, 80066a0 <_fstat_r+0x1c>
 800669e:	6023      	str	r3, [r4, #0]
 80066a0:	bd38      	pop	{r3, r4, r5, pc}
 80066a2:	bf00      	nop
 80066a4:	200002c8 	.word	0x200002c8

080066a8 <_isatty_r>:
 80066a8:	b538      	push	{r3, r4, r5, lr}
 80066aa:	4d06      	ldr	r5, [pc, #24]	; (80066c4 <_isatty_r+0x1c>)
 80066ac:	2300      	movs	r3, #0
 80066ae:	4604      	mov	r4, r0
 80066b0:	4608      	mov	r0, r1
 80066b2:	602b      	str	r3, [r5, #0]
 80066b4:	f7fb fc19 	bl	8001eea <_isatty>
 80066b8:	1c43      	adds	r3, r0, #1
 80066ba:	d102      	bne.n	80066c2 <_isatty_r+0x1a>
 80066bc:	682b      	ldr	r3, [r5, #0]
 80066be:	b103      	cbz	r3, 80066c2 <_isatty_r+0x1a>
 80066c0:	6023      	str	r3, [r4, #0]
 80066c2:	bd38      	pop	{r3, r4, r5, pc}
 80066c4:	200002c8 	.word	0x200002c8

080066c8 <_lseek_r>:
 80066c8:	b538      	push	{r3, r4, r5, lr}
 80066ca:	4d07      	ldr	r5, [pc, #28]	; (80066e8 <_lseek_r+0x20>)
 80066cc:	4604      	mov	r4, r0
 80066ce:	4608      	mov	r0, r1
 80066d0:	4611      	mov	r1, r2
 80066d2:	2200      	movs	r2, #0
 80066d4:	602a      	str	r2, [r5, #0]
 80066d6:	461a      	mov	r2, r3
 80066d8:	f7fb fc12 	bl	8001f00 <_lseek>
 80066dc:	1c43      	adds	r3, r0, #1
 80066de:	d102      	bne.n	80066e6 <_lseek_r+0x1e>
 80066e0:	682b      	ldr	r3, [r5, #0]
 80066e2:	b103      	cbz	r3, 80066e6 <_lseek_r+0x1e>
 80066e4:	6023      	str	r3, [r4, #0]
 80066e6:	bd38      	pop	{r3, r4, r5, pc}
 80066e8:	200002c8 	.word	0x200002c8

080066ec <__ascii_mbtowc>:
 80066ec:	b082      	sub	sp, #8
 80066ee:	b901      	cbnz	r1, 80066f2 <__ascii_mbtowc+0x6>
 80066f0:	a901      	add	r1, sp, #4
 80066f2:	b142      	cbz	r2, 8006706 <__ascii_mbtowc+0x1a>
 80066f4:	b14b      	cbz	r3, 800670a <__ascii_mbtowc+0x1e>
 80066f6:	7813      	ldrb	r3, [r2, #0]
 80066f8:	600b      	str	r3, [r1, #0]
 80066fa:	7812      	ldrb	r2, [r2, #0]
 80066fc:	1e10      	subs	r0, r2, #0
 80066fe:	bf18      	it	ne
 8006700:	2001      	movne	r0, #1
 8006702:	b002      	add	sp, #8
 8006704:	4770      	bx	lr
 8006706:	4610      	mov	r0, r2
 8006708:	e7fb      	b.n	8006702 <__ascii_mbtowc+0x16>
 800670a:	f06f 0001 	mvn.w	r0, #1
 800670e:	e7f8      	b.n	8006702 <__ascii_mbtowc+0x16>

08006710 <__malloc_lock>:
 8006710:	4801      	ldr	r0, [pc, #4]	; (8006718 <__malloc_lock+0x8>)
 8006712:	f7ff b8c0 	b.w	8005896 <__retarget_lock_acquire_recursive>
 8006716:	bf00      	nop
 8006718:	200002bc 	.word	0x200002bc

0800671c <__malloc_unlock>:
 800671c:	4801      	ldr	r0, [pc, #4]	; (8006724 <__malloc_unlock+0x8>)
 800671e:	f7ff b8bb 	b.w	8005898 <__retarget_lock_release_recursive>
 8006722:	bf00      	nop
 8006724:	200002bc 	.word	0x200002bc

08006728 <_read_r>:
 8006728:	b538      	push	{r3, r4, r5, lr}
 800672a:	4d07      	ldr	r5, [pc, #28]	; (8006748 <_read_r+0x20>)
 800672c:	4604      	mov	r4, r0
 800672e:	4608      	mov	r0, r1
 8006730:	4611      	mov	r1, r2
 8006732:	2200      	movs	r2, #0
 8006734:	602a      	str	r2, [r5, #0]
 8006736:	461a      	mov	r2, r3
 8006738:	f7fb fb9e 	bl	8001e78 <_read>
 800673c:	1c43      	adds	r3, r0, #1
 800673e:	d102      	bne.n	8006746 <_read_r+0x1e>
 8006740:	682b      	ldr	r3, [r5, #0]
 8006742:	b103      	cbz	r3, 8006746 <_read_r+0x1e>
 8006744:	6023      	str	r3, [r4, #0]
 8006746:	bd38      	pop	{r3, r4, r5, pc}
 8006748:	200002c8 	.word	0x200002c8

0800674c <__ascii_wctomb>:
 800674c:	b149      	cbz	r1, 8006762 <__ascii_wctomb+0x16>
 800674e:	2aff      	cmp	r2, #255	; 0xff
 8006750:	bf85      	ittet	hi
 8006752:	238a      	movhi	r3, #138	; 0x8a
 8006754:	6003      	strhi	r3, [r0, #0]
 8006756:	700a      	strbls	r2, [r1, #0]
 8006758:	f04f 30ff 	movhi.w	r0, #4294967295
 800675c:	bf98      	it	ls
 800675e:	2001      	movls	r0, #1
 8006760:	4770      	bx	lr
 8006762:	4608      	mov	r0, r1
 8006764:	4770      	bx	lr

08006766 <abort>:
 8006766:	b508      	push	{r3, lr}
 8006768:	2006      	movs	r0, #6
 800676a:	f000 f82b 	bl	80067c4 <raise>
 800676e:	2001      	movs	r0, #1
 8006770:	f7fb fb78 	bl	8001e64 <_exit>

08006774 <_raise_r>:
 8006774:	291f      	cmp	r1, #31
 8006776:	b538      	push	{r3, r4, r5, lr}
 8006778:	4604      	mov	r4, r0
 800677a:	460d      	mov	r5, r1
 800677c:	d904      	bls.n	8006788 <_raise_r+0x14>
 800677e:	2316      	movs	r3, #22
 8006780:	6003      	str	r3, [r0, #0]
 8006782:	f04f 30ff 	mov.w	r0, #4294967295
 8006786:	bd38      	pop	{r3, r4, r5, pc}
 8006788:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800678a:	b112      	cbz	r2, 8006792 <_raise_r+0x1e>
 800678c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006790:	b94b      	cbnz	r3, 80067a6 <_raise_r+0x32>
 8006792:	4620      	mov	r0, r4
 8006794:	f000 f830 	bl	80067f8 <_getpid_r>
 8006798:	462a      	mov	r2, r5
 800679a:	4601      	mov	r1, r0
 800679c:	4620      	mov	r0, r4
 800679e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067a2:	f000 b817 	b.w	80067d4 <_kill_r>
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d00a      	beq.n	80067c0 <_raise_r+0x4c>
 80067aa:	1c59      	adds	r1, r3, #1
 80067ac:	d103      	bne.n	80067b6 <_raise_r+0x42>
 80067ae:	2316      	movs	r3, #22
 80067b0:	6003      	str	r3, [r0, #0]
 80067b2:	2001      	movs	r0, #1
 80067b4:	e7e7      	b.n	8006786 <_raise_r+0x12>
 80067b6:	2400      	movs	r4, #0
 80067b8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80067bc:	4628      	mov	r0, r5
 80067be:	4798      	blx	r3
 80067c0:	2000      	movs	r0, #0
 80067c2:	e7e0      	b.n	8006786 <_raise_r+0x12>

080067c4 <raise>:
 80067c4:	4b02      	ldr	r3, [pc, #8]	; (80067d0 <raise+0xc>)
 80067c6:	4601      	mov	r1, r0
 80067c8:	6818      	ldr	r0, [r3, #0]
 80067ca:	f7ff bfd3 	b.w	8006774 <_raise_r>
 80067ce:	bf00      	nop
 80067d0:	2000000c 	.word	0x2000000c

080067d4 <_kill_r>:
 80067d4:	b538      	push	{r3, r4, r5, lr}
 80067d6:	4d07      	ldr	r5, [pc, #28]	; (80067f4 <_kill_r+0x20>)
 80067d8:	2300      	movs	r3, #0
 80067da:	4604      	mov	r4, r0
 80067dc:	4608      	mov	r0, r1
 80067de:	4611      	mov	r1, r2
 80067e0:	602b      	str	r3, [r5, #0]
 80067e2:	f7fb fb2f 	bl	8001e44 <_kill>
 80067e6:	1c43      	adds	r3, r0, #1
 80067e8:	d102      	bne.n	80067f0 <_kill_r+0x1c>
 80067ea:	682b      	ldr	r3, [r5, #0]
 80067ec:	b103      	cbz	r3, 80067f0 <_kill_r+0x1c>
 80067ee:	6023      	str	r3, [r4, #0]
 80067f0:	bd38      	pop	{r3, r4, r5, pc}
 80067f2:	bf00      	nop
 80067f4:	200002c8 	.word	0x200002c8

080067f8 <_getpid_r>:
 80067f8:	f7fb bb1c 	b.w	8001e34 <_getpid>

080067fc <_init>:
 80067fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067fe:	bf00      	nop
 8006800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006802:	bc08      	pop	{r3}
 8006804:	469e      	mov	lr, r3
 8006806:	4770      	bx	lr

08006808 <_fini>:
 8006808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800680a:	bf00      	nop
 800680c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800680e:	bc08      	pop	{r3}
 8006810:	469e      	mov	lr, r3
 8006812:	4770      	bx	lr
