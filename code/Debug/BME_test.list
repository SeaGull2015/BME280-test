
BME_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ac8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08003c5c  08003c5c  00013c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ce0  08003ce0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003ce0  08003ce0  00013ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ce8  08003ce8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ce8  08003ce8  00013ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cec  08003cec  00013cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003cf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  20000070  08003d60  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  08003d60  00020160  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a0ae  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000180e  00000000  00000000  0002a14e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000938  00000000  00000000  0002b960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008a0  00000000  00000000  0002c298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016668  00000000  00000000  0002cb38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a355  00000000  00000000  000431a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088508  00000000  00000000  0004d4f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d59fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c34  00000000  00000000  000d5a50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000070 	.word	0x20000070
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003c44 	.word	0x08003c44

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000074 	.word	0x20000074
 80001d0:	08003c44 	.word	0x08003c44

080001d4 <__aeabi_ldivmod>:
 80001d4:	b97b      	cbnz	r3, 80001f6 <__aeabi_ldivmod+0x22>
 80001d6:	b972      	cbnz	r2, 80001f6 <__aeabi_ldivmod+0x22>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bfbe      	ittt	lt
 80001dc:	2000      	movlt	r0, #0
 80001de:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80001e2:	e006      	blt.n	80001f2 <__aeabi_ldivmod+0x1e>
 80001e4:	bf08      	it	eq
 80001e6:	2800      	cmpeq	r0, #0
 80001e8:	bf1c      	itt	ne
 80001ea:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80001ee:	f04f 30ff 	movne.w	r0, #4294967295
 80001f2:	f000 b9bf 	b.w	8000574 <__aeabi_idiv0>
 80001f6:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fa:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001fe:	2900      	cmp	r1, #0
 8000200:	db09      	blt.n	8000216 <__aeabi_ldivmod+0x42>
 8000202:	2b00      	cmp	r3, #0
 8000204:	db1a      	blt.n	800023c <__aeabi_ldivmod+0x68>
 8000206:	f000 f84d 	bl	80002a4 <__udivmoddi4>
 800020a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000212:	b004      	add	sp, #16
 8000214:	4770      	bx	lr
 8000216:	4240      	negs	r0, r0
 8000218:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800021c:	2b00      	cmp	r3, #0
 800021e:	db1b      	blt.n	8000258 <__aeabi_ldivmod+0x84>
 8000220:	f000 f840 	bl	80002a4 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4240      	negs	r0, r0
 8000230:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000234:	4252      	negs	r2, r2
 8000236:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800023a:	4770      	bx	lr
 800023c:	4252      	negs	r2, r2
 800023e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000242:	f000 f82f 	bl	80002a4 <__udivmoddi4>
 8000246:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024e:	b004      	add	sp, #16
 8000250:	4240      	negs	r0, r0
 8000252:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000256:	4770      	bx	lr
 8000258:	4252      	negs	r2, r2
 800025a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800025e:	f000 f821 	bl	80002a4 <__udivmoddi4>
 8000262:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000266:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026a:	b004      	add	sp, #16
 800026c:	4252      	negs	r2, r2
 800026e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000272:	4770      	bx	lr

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b974 	b.w	8000574 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9d08      	ldr	r5, [sp, #32]
 80002aa:	4604      	mov	r4, r0
 80002ac:	468e      	mov	lr, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d14d      	bne.n	800034e <__udivmoddi4+0xaa>
 80002b2:	428a      	cmp	r2, r1
 80002b4:	4694      	mov	ip, r2
 80002b6:	d969      	bls.n	800038c <__udivmoddi4+0xe8>
 80002b8:	fab2 f282 	clz	r2, r2
 80002bc:	b152      	cbz	r2, 80002d4 <__udivmoddi4+0x30>
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	f1c2 0120 	rsb	r1, r2, #32
 80002c6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ca:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ce:	ea41 0e03 	orr.w	lr, r1, r3
 80002d2:	4094      	lsls	r4, r2
 80002d4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d8:	0c21      	lsrs	r1, r4, #16
 80002da:	fbbe f6f8 	udiv	r6, lr, r8
 80002de:	fa1f f78c 	uxth.w	r7, ip
 80002e2:	fb08 e316 	mls	r3, r8, r6, lr
 80002e6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ea:	fb06 f107 	mul.w	r1, r6, r7
 80002ee:	4299      	cmp	r1, r3
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x64>
 80002f2:	eb1c 0303 	adds.w	r3, ip, r3
 80002f6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002fa:	f080 811f 	bcs.w	800053c <__udivmoddi4+0x298>
 80002fe:	4299      	cmp	r1, r3
 8000300:	f240 811c 	bls.w	800053c <__udivmoddi4+0x298>
 8000304:	3e02      	subs	r6, #2
 8000306:	4463      	add	r3, ip
 8000308:	1a5b      	subs	r3, r3, r1
 800030a:	b2a4      	uxth	r4, r4
 800030c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000310:	fb08 3310 	mls	r3, r8, r0, r3
 8000314:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000318:	fb00 f707 	mul.w	r7, r0, r7
 800031c:	42a7      	cmp	r7, r4
 800031e:	d90a      	bls.n	8000336 <__udivmoddi4+0x92>
 8000320:	eb1c 0404 	adds.w	r4, ip, r4
 8000324:	f100 33ff 	add.w	r3, r0, #4294967295
 8000328:	f080 810a 	bcs.w	8000540 <__udivmoddi4+0x29c>
 800032c:	42a7      	cmp	r7, r4
 800032e:	f240 8107 	bls.w	8000540 <__udivmoddi4+0x29c>
 8000332:	4464      	add	r4, ip
 8000334:	3802      	subs	r0, #2
 8000336:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800033a:	1be4      	subs	r4, r4, r7
 800033c:	2600      	movs	r6, #0
 800033e:	b11d      	cbz	r5, 8000348 <__udivmoddi4+0xa4>
 8000340:	40d4      	lsrs	r4, r2
 8000342:	2300      	movs	r3, #0
 8000344:	e9c5 4300 	strd	r4, r3, [r5]
 8000348:	4631      	mov	r1, r6
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0xc2>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80ef 	beq.w	8000536 <__udivmoddi4+0x292>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x160>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xd4>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80f9 	bhi.w	800056a <__udivmoddi4+0x2c6>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0303 	sbc.w	r3, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	469e      	mov	lr, r3
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e0      	beq.n	8000348 <__udivmoddi4+0xa4>
 8000386:	e9c5 4e00 	strd	r4, lr, [r5]
 800038a:	e7dd      	b.n	8000348 <__udivmoddi4+0xa4>
 800038c:	b902      	cbnz	r2, 8000390 <__udivmoddi4+0xec>
 800038e:	deff      	udf	#255	; 0xff
 8000390:	fab2 f282 	clz	r2, r2
 8000394:	2a00      	cmp	r2, #0
 8000396:	f040 8092 	bne.w	80004be <__udivmoddi4+0x21a>
 800039a:	eba1 010c 	sub.w	r1, r1, ip
 800039e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a2:	fa1f fe8c 	uxth.w	lr, ip
 80003a6:	2601      	movs	r6, #1
 80003a8:	0c20      	lsrs	r0, r4, #16
 80003aa:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ae:	fb07 1113 	mls	r1, r7, r3, r1
 80003b2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b6:	fb0e f003 	mul.w	r0, lr, r3
 80003ba:	4288      	cmp	r0, r1
 80003bc:	d908      	bls.n	80003d0 <__udivmoddi4+0x12c>
 80003be:	eb1c 0101 	adds.w	r1, ip, r1
 80003c2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c6:	d202      	bcs.n	80003ce <__udivmoddi4+0x12a>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f200 80cb 	bhi.w	8000564 <__udivmoddi4+0x2c0>
 80003ce:	4643      	mov	r3, r8
 80003d0:	1a09      	subs	r1, r1, r0
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d8:	fb07 1110 	mls	r1, r7, r0, r1
 80003dc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003e0:	fb0e fe00 	mul.w	lr, lr, r0
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x156>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80003f0:	d202      	bcs.n	80003f8 <__udivmoddi4+0x154>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	f200 80bb 	bhi.w	800056e <__udivmoddi4+0x2ca>
 80003f8:	4608      	mov	r0, r1
 80003fa:	eba4 040e 	sub.w	r4, r4, lr
 80003fe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000402:	e79c      	b.n	800033e <__udivmoddi4+0x9a>
 8000404:	f1c6 0720 	rsb	r7, r6, #32
 8000408:	40b3      	lsls	r3, r6
 800040a:	fa22 fc07 	lsr.w	ip, r2, r7
 800040e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000412:	fa20 f407 	lsr.w	r4, r0, r7
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	431c      	orrs	r4, r3
 800041c:	40f9      	lsrs	r1, r7
 800041e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000422:	fa00 f306 	lsl.w	r3, r0, r6
 8000426:	fbb1 f8f9 	udiv	r8, r1, r9
 800042a:	0c20      	lsrs	r0, r4, #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fb09 1118 	mls	r1, r9, r8, r1
 8000434:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000438:	fb08 f00e 	mul.w	r0, r8, lr
 800043c:	4288      	cmp	r0, r1
 800043e:	fa02 f206 	lsl.w	r2, r2, r6
 8000442:	d90b      	bls.n	800045c <__udivmoddi4+0x1b8>
 8000444:	eb1c 0101 	adds.w	r1, ip, r1
 8000448:	f108 3aff 	add.w	sl, r8, #4294967295
 800044c:	f080 8088 	bcs.w	8000560 <__udivmoddi4+0x2bc>
 8000450:	4288      	cmp	r0, r1
 8000452:	f240 8085 	bls.w	8000560 <__udivmoddi4+0x2bc>
 8000456:	f1a8 0802 	sub.w	r8, r8, #2
 800045a:	4461      	add	r1, ip
 800045c:	1a09      	subs	r1, r1, r0
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb1 f0f9 	udiv	r0, r1, r9
 8000464:	fb09 1110 	mls	r1, r9, r0, r1
 8000468:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800046c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000470:	458e      	cmp	lr, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x1e2>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f100 34ff 	add.w	r4, r0, #4294967295
 800047c:	d26c      	bcs.n	8000558 <__udivmoddi4+0x2b4>
 800047e:	458e      	cmp	lr, r1
 8000480:	d96a      	bls.n	8000558 <__udivmoddi4+0x2b4>
 8000482:	3802      	subs	r0, #2
 8000484:	4461      	add	r1, ip
 8000486:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800048a:	fba0 9402 	umull	r9, r4, r0, r2
 800048e:	eba1 010e 	sub.w	r1, r1, lr
 8000492:	42a1      	cmp	r1, r4
 8000494:	46c8      	mov	r8, r9
 8000496:	46a6      	mov	lr, r4
 8000498:	d356      	bcc.n	8000548 <__udivmoddi4+0x2a4>
 800049a:	d053      	beq.n	8000544 <__udivmoddi4+0x2a0>
 800049c:	b15d      	cbz	r5, 80004b6 <__udivmoddi4+0x212>
 800049e:	ebb3 0208 	subs.w	r2, r3, r8
 80004a2:	eb61 010e 	sbc.w	r1, r1, lr
 80004a6:	fa01 f707 	lsl.w	r7, r1, r7
 80004aa:	fa22 f306 	lsr.w	r3, r2, r6
 80004ae:	40f1      	lsrs	r1, r6
 80004b0:	431f      	orrs	r7, r3
 80004b2:	e9c5 7100 	strd	r7, r1, [r5]
 80004b6:	2600      	movs	r6, #0
 80004b8:	4631      	mov	r1, r6
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	f1c2 0320 	rsb	r3, r2, #32
 80004c2:	40d8      	lsrs	r0, r3
 80004c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c8:	fa21 f303 	lsr.w	r3, r1, r3
 80004cc:	4091      	lsls	r1, r2
 80004ce:	4301      	orrs	r1, r0
 80004d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d4:	fa1f fe8c 	uxth.w	lr, ip
 80004d8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004dc:	fb07 3610 	mls	r6, r7, r0, r3
 80004e0:	0c0b      	lsrs	r3, r1, #16
 80004e2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e6:	fb00 f60e 	mul.w	r6, r0, lr
 80004ea:	429e      	cmp	r6, r3
 80004ec:	fa04 f402 	lsl.w	r4, r4, r2
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x260>
 80004f2:	eb1c 0303 	adds.w	r3, ip, r3
 80004f6:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fa:	d22f      	bcs.n	800055c <__udivmoddi4+0x2b8>
 80004fc:	429e      	cmp	r6, r3
 80004fe:	d92d      	bls.n	800055c <__udivmoddi4+0x2b8>
 8000500:	3802      	subs	r0, #2
 8000502:	4463      	add	r3, ip
 8000504:	1b9b      	subs	r3, r3, r6
 8000506:	b289      	uxth	r1, r1
 8000508:	fbb3 f6f7 	udiv	r6, r3, r7
 800050c:	fb07 3316 	mls	r3, r7, r6, r3
 8000510:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000514:	fb06 f30e 	mul.w	r3, r6, lr
 8000518:	428b      	cmp	r3, r1
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x28a>
 800051c:	eb1c 0101 	adds.w	r1, ip, r1
 8000520:	f106 38ff 	add.w	r8, r6, #4294967295
 8000524:	d216      	bcs.n	8000554 <__udivmoddi4+0x2b0>
 8000526:	428b      	cmp	r3, r1
 8000528:	d914      	bls.n	8000554 <__udivmoddi4+0x2b0>
 800052a:	3e02      	subs	r6, #2
 800052c:	4461      	add	r1, ip
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000534:	e738      	b.n	80003a8 <__udivmoddi4+0x104>
 8000536:	462e      	mov	r6, r5
 8000538:	4628      	mov	r0, r5
 800053a:	e705      	b.n	8000348 <__udivmoddi4+0xa4>
 800053c:	4606      	mov	r6, r0
 800053e:	e6e3      	b.n	8000308 <__udivmoddi4+0x64>
 8000540:	4618      	mov	r0, r3
 8000542:	e6f8      	b.n	8000336 <__udivmoddi4+0x92>
 8000544:	454b      	cmp	r3, r9
 8000546:	d2a9      	bcs.n	800049c <__udivmoddi4+0x1f8>
 8000548:	ebb9 0802 	subs.w	r8, r9, r2
 800054c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000550:	3801      	subs	r0, #1
 8000552:	e7a3      	b.n	800049c <__udivmoddi4+0x1f8>
 8000554:	4646      	mov	r6, r8
 8000556:	e7ea      	b.n	800052e <__udivmoddi4+0x28a>
 8000558:	4620      	mov	r0, r4
 800055a:	e794      	b.n	8000486 <__udivmoddi4+0x1e2>
 800055c:	4640      	mov	r0, r8
 800055e:	e7d1      	b.n	8000504 <__udivmoddi4+0x260>
 8000560:	46d0      	mov	r8, sl
 8000562:	e77b      	b.n	800045c <__udivmoddi4+0x1b8>
 8000564:	3b02      	subs	r3, #2
 8000566:	4461      	add	r1, ip
 8000568:	e732      	b.n	80003d0 <__udivmoddi4+0x12c>
 800056a:	4630      	mov	r0, r6
 800056c:	e709      	b.n	8000382 <__udivmoddi4+0xde>
 800056e:	4464      	add	r4, ip
 8000570:	3802      	subs	r0, #2
 8000572:	e742      	b.n	80003fa <__udivmoddi4+0x156>

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]

	HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	b29a      	uxth	r2, r3
 8000588:	f04f 33ff 	mov.w	r3, #4294967295
 800058c:	68b9      	ldr	r1, [r7, #8]
 800058e:	4804      	ldr	r0, [pc, #16]	; (80005a0 <_write+0x28>)
 8000590:	f002 fab3 	bl	8002afa <HAL_UART_Transmit>
	return len;
 8000594:	687b      	ldr	r3, [r7, #4]
}
 8000596:	4618      	mov	r0, r3
 8000598:	3710      	adds	r7, #16
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	200000e4 	.word	0x200000e4

080005a4 <BME_ShiftRegs>:
uint8_t buf;
uint8_t BME_regD;
void BME_ShiftRegs(){
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af02      	add	r7, sp, #8
			HAL_GPIO_WritePin(BME_nOE_GPIO_Port, BME_nOE_Pin, 1); //shiftreg 2 HiZ
 80005aa:	2201      	movs	r2, #1
 80005ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005b0:	480f      	ldr	r0, [pc, #60]	; (80005f0 <BME_ShiftRegs+0x4c>)
 80005b2:	f001 faed 	bl	8001b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BME_LATCH_GPIO_Port, BME_LATCH_Pin, 0);  //отключаем защёлку
 80005b6:	2200      	movs	r2, #0
 80005b8:	2102      	movs	r1, #2
 80005ba:	480d      	ldr	r0, [pc, #52]	; (80005f0 <BME_ShiftRegs+0x4c>)
 80005bc:	f001 fae8 	bl	8001b90 <HAL_GPIO_WritePin>

			HAL_SPI_TransmitReceive(&hspi2, &BME_regD, &buf, 1, 5000);  //отправляем данные для сдвигового регистра со светодиодами
 80005c0:	f241 3388 	movw	r3, #5000	; 0x1388
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	2301      	movs	r3, #1
 80005c8:	4a0a      	ldr	r2, [pc, #40]	; (80005f4 <BME_ShiftRegs+0x50>)
 80005ca:	490b      	ldr	r1, [pc, #44]	; (80005f8 <BME_ShiftRegs+0x54>)
 80005cc:	480b      	ldr	r0, [pc, #44]	; (80005fc <BME_ShiftRegs+0x58>)
 80005ce:	f001 ffda 	bl	8002586 <HAL_SPI_TransmitReceive>

			HAL_GPIO_WritePin(BME_LATCH_GPIO_Port, BME_LATCH_Pin, 1);  //включаем защёлку
 80005d2:	2201      	movs	r2, #1
 80005d4:	2102      	movs	r1, #2
 80005d6:	4806      	ldr	r0, [pc, #24]	; (80005f0 <BME_ShiftRegs+0x4c>)
 80005d8:	f001 fada 	bl	8001b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BME_nOE_GPIO_Port, BME_nOE_Pin, 0);  //shitfreg вывести из HiZ
 80005dc:	2200      	movs	r2, #0
 80005de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005e2:	4803      	ldr	r0, [pc, #12]	; (80005f0 <BME_ShiftRegs+0x4c>)
 80005e4:	f001 fad4 	bl	8001b90 <HAL_GPIO_WritePin>
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40020800 	.word	0x40020800
 80005f4:	20000144 	.word	0x20000144
 80005f8:	20000145 	.word	0x20000145
 80005fc:	2000008c 	.word	0x2000008c

08000600 <BME_cs>:

void BME_cs(uint8_t flag){
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	71fb      	strb	r3, [r7, #7]
			/*
			 * Данная функция нужна для управления ножкой CS BME280
			 * Если на вход подаётся 0, то на ножке появляется ноль, если другое число, то единица
			 */
		if(flag==0)
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d107      	bne.n	8000620 <BME_cs+0x20>
			{
			BME_regD &=~(1<<2); // BME CS is OUT2 on shiftreg
 8000610:	4b0a      	ldr	r3, [pc, #40]	; (800063c <BME_cs+0x3c>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	f023 0304 	bic.w	r3, r3, #4
 8000618:	b2da      	uxtb	r2, r3
 800061a:	4b08      	ldr	r3, [pc, #32]	; (800063c <BME_cs+0x3c>)
 800061c:	701a      	strb	r2, [r3, #0]
 800061e:	e006      	b.n	800062e <BME_cs+0x2e>
			}
		else
			{
			BME_regD |= 1<<2;
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <BME_cs+0x3c>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	f043 0304 	orr.w	r3, r3, #4
 8000628:	b2da      	uxtb	r2, r3
 800062a:	4b04      	ldr	r3, [pc, #16]	; (800063c <BME_cs+0x3c>)
 800062c:	701a      	strb	r2, [r3, #0]
			}
		BME_ShiftRegs();
 800062e:	f7ff ffb9 	bl	80005a4 <BME_ShiftRegs>
}
 8000632:	bf00      	nop
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20000145 	.word	0x20000145

08000640 <BME_write_reg>:
/* About spi write in BME:
 * In SPI mode, only 7 bits of the register addresses are used; the MSB of register address is not used and replaced by a read/write bit (RW = '0' for write and RW = '1' for read). Example: address OxF7 is accessed by using SPI register address 0x77. For write access, the byte 0x77 is transferred, for read access, the byte OxF7 is transferred.
 * Writing is done by lowering CSB and sending pairs control bytes and register data. The control bytes consist of the SPI register address (= full register address without bit 7) and the write command (bit7 = RW = '0'). Several pairs can be written without raising CSB. The transaction is ended by a raising CSB. The SPI write protocol is depicted in Figure 12.
 */

void BME_write_reg(uint8_t reg, uint8_t val){
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af02      	add	r7, sp, #8
 8000646:	4603      	mov	r3, r0
 8000648:	460a      	mov	r2, r1
 800064a:	71fb      	strb	r3, [r7, #7]
 800064c:	4613      	mov	r3, r2
 800064e:	71bb      	strb	r3, [r7, #6]
#warning this is nrf copypasta, not sure if it will work
#warning check if uint16_t is needed
	BME_cs(0);
 8000650:	2000      	movs	r0, #0
 8000652:	f7ff ffd5 	bl	8000600 <BME_cs>

	reg &= BME_WRITE_MASK; // our write mask is ~0x80, e.g. we send 0x77 to access reg 0xF7
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800065c:	b2db      	uxtb	r3, r3
 800065e:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&hspi2, &reg, &buf, sizeof(reg), 10000);
 8000660:	1df9      	adds	r1, r7, #7
 8000662:	f242 7310 	movw	r3, #10000	; 0x2710
 8000666:	9300      	str	r3, [sp, #0]
 8000668:	2301      	movs	r3, #1
 800066a:	4a0a      	ldr	r2, [pc, #40]	; (8000694 <BME_write_reg+0x54>)
 800066c:	480a      	ldr	r0, [pc, #40]	; (8000698 <BME_write_reg+0x58>)
 800066e:	f001 ff8a 	bl	8002586 <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(&hspi2, &val, &buf, sizeof(val), 10000);
 8000672:	1db9      	adds	r1, r7, #6
 8000674:	f242 7310 	movw	r3, #10000	; 0x2710
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	2301      	movs	r3, #1
 800067c:	4a05      	ldr	r2, [pc, #20]	; (8000694 <BME_write_reg+0x54>)
 800067e:	4806      	ldr	r0, [pc, #24]	; (8000698 <BME_write_reg+0x58>)
 8000680:	f001 ff81 	bl	8002586 <HAL_SPI_TransmitReceive>

	BME_cs(1);
 8000684:	2001      	movs	r0, #1
 8000686:	f7ff ffbb 	bl	8000600 <BME_cs>
}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	20000144 	.word	0x20000144
 8000698:	2000008c 	.word	0x2000008c

0800069c <BME_read_Data8>:
/* About spi read in BME:
 * Reading is done by lowering CSB and first sending one control byte. The control bytes consist of the SPI register address (= full register address without bit 7) and the read command (bit 7 = RW = '1'). After writing the control byte, data is sent out of the SDO pin (SDI in 3-wire mode); the register address is automatically incremented. The SPI read protocol is depicted in Figure 13.
 * No mask is required for read, we send the reg through SPI
 */
uint8_t BME_read_Data8(uint8_t reg){
 800069c:	b580      	push	{r7, lr}
 800069e:	b086      	sub	sp, #24
 80006a0:	af02      	add	r7, sp, #8
 80006a2:	4603      	mov	r3, r0
 80006a4:	71fb      	strb	r3, [r7, #7]
#warning this is nrf copypasta, not sure if it will work
	uint8_t rx_data;
	BME_cs(0);
 80006a6:	2000      	movs	r0, #0
 80006a8:	f7ff ffaa 	bl	8000600 <BME_cs>

	HAL_SPI_TransmitReceive(&hspi2, &reg, &rx_data, 1, 10000);
 80006ac:	f107 020f 	add.w	r2, r7, #15
 80006b0:	1df9      	adds	r1, r7, #7
 80006b2:	f242 7310 	movw	r3, #10000	; 0x2710
 80006b6:	9300      	str	r3, [sp, #0]
 80006b8:	2301      	movs	r3, #1
 80006ba:	4805      	ldr	r0, [pc, #20]	; (80006d0 <BME_read_Data8+0x34>)
 80006bc:	f001 ff63 	bl	8002586 <HAL_SPI_TransmitReceive>

	BME_cs(1);
 80006c0:	2001      	movs	r0, #1
 80006c2:	f7ff ff9d 	bl	8000600 <BME_cs>

	return rx_data;
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3710      	adds	r7, #16
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	2000008c 	.word	0x2000008c

080006d4 <BME_read_DataU16>:

void BME_read_DataU16(uint8_t reg, uint16_t *rx_data){ // unsigned
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af02      	add	r7, sp, #8
 80006da:	4603      	mov	r3, r0
 80006dc:	6039      	str	r1, [r7, #0]
 80006de:	71fb      	strb	r3, [r7, #7]
#warning this is nrf copypasta, not sure if it will work
	//uint16_t rx_data;
	BME_cs(0);
 80006e0:	2000      	movs	r0, #0
 80006e2:	f7ff ff8d 	bl	8000600 <BME_cs>

	HAL_SPI_TransmitReceive(&hspi2, &reg, &rx_data, 2, 10000);
 80006e6:	463a      	mov	r2, r7
 80006e8:	1df9      	adds	r1, r7, #7
 80006ea:	f242 7310 	movw	r3, #10000	; 0x2710
 80006ee:	9300      	str	r3, [sp, #0]
 80006f0:	2302      	movs	r3, #2
 80006f2:	4805      	ldr	r0, [pc, #20]	; (8000708 <BME_read_DataU16+0x34>)
 80006f4:	f001 ff47 	bl	8002586 <HAL_SPI_TransmitReceive>

	BME_cs(1);
 80006f8:	2001      	movs	r0, #1
 80006fa:	f7ff ff81 	bl	8000600 <BME_cs>

	return rx_data;
 80006fe:	bf00      	nop
}
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	2000008c 	.word	0x2000008c

0800070c <BME_read_DataS16>:

void BME_read_DataS16(uint8_t reg, int16_t *rx_data){ // signed
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af02      	add	r7, sp, #8
 8000712:	4603      	mov	r3, r0
 8000714:	6039      	str	r1, [r7, #0]
 8000716:	71fb      	strb	r3, [r7, #7]
#warning this is nrf copypasta, not sure if it will work
	//uint16_t rx_data;
	BME_cs(0);
 8000718:	2000      	movs	r0, #0
 800071a:	f7ff ff71 	bl	8000600 <BME_cs>

	HAL_SPI_TransmitReceive(&hspi2, &reg, &rx_data, 2, 10000);
 800071e:	463a      	mov	r2, r7
 8000720:	1df9      	adds	r1, r7, #7
 8000722:	f242 7310 	movw	r3, #10000	; 0x2710
 8000726:	9300      	str	r3, [sp, #0]
 8000728:	2302      	movs	r3, #2
 800072a:	4805      	ldr	r0, [pc, #20]	; (8000740 <BME_read_DataS16+0x34>)
 800072c:	f001 ff2b 	bl	8002586 <HAL_SPI_TransmitReceive>

	BME_cs(1);
 8000730:	2001      	movs	r0, #1
 8000732:	f7ff ff65 	bl	8000600 <BME_cs>
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	2000008c 	.word	0x2000008c

08000744 <BME_read_DataU24_BE>:
	*(uint32_t *) rx_data &= 0x00FFFFFF; // wtf??? - we clear the first byte.

	BME_cs(1);
}

void BME_read_DataU24_BE(uint8_t reg, uint32_t *rx_data){ // basicly irreversed, cause bme280 should send us reversed data
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af02      	add	r7, sp, #8
 800074a:	4603      	mov	r3, r0
 800074c:	6039      	str	r1, [r7, #0]
 800074e:	71fb      	strb	r3, [r7, #7]
#warning this is nrf copypasta, not sure if it will work
	//uint16_t rx_data; - thrash
	BME_cs(0);
 8000750:	2000      	movs	r0, #0
 8000752:	f7ff ff55 	bl	8000600 <BME_cs>

	HAL_SPI_TransmitReceive(&hspi2, &reg, &rx_data, 3, 10000);
 8000756:	463a      	mov	r2, r7
 8000758:	1df9      	adds	r1, r7, #7
 800075a:	f242 7310 	movw	r3, #10000	; 0x2710
 800075e:	9300      	str	r3, [sp, #0]
 8000760:	2303      	movs	r3, #3
 8000762:	480e      	ldr	r0, [pc, #56]	; (800079c <BME_read_DataU24_BE+0x58>)
 8000764:	f001 ff0f 	bl	8002586 <HAL_SPI_TransmitReceive>

	*(uint32_t *) rx_data = be24toword(*(uint32_t *) rx_data) & 0x00FFFFFF; // wtf??? - we clear the first byte.
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	0c1b      	lsrs	r3, r3, #16
 800076e:	b2da      	uxtb	r2, r3
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000778:	431a      	orrs	r2, r3
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	041b      	lsls	r3, r3, #16
 8000780:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000784:	431a      	orrs	r2, r3
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800078c:	601a      	str	r2, [r3, #0]

	BME_cs(1);
 800078e:	2001      	movs	r0, #1
 8000790:	f7ff ff36 	bl	8000600 <BME_cs>
}
 8000794:	bf00      	nop
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	2000008c 	.word	0x2000008c

080007a0 <BMEReadCalibData>:
	HAL_SPI_TransmitReceive(&hspi2, &reg, &rx_data, 3, 10000);

	BME_cs(1);
}

void BMEReadCalibData(BME280_CalibData *data){
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
	BME_read_DataU16(BME280_REGISTER_DIG_T1, &(data->dig_T1));HAL_Delay(1);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	4619      	mov	r1, r3
 80007ac:	2088      	movs	r0, #136	; 0x88
 80007ae:	f7ff ff91 	bl	80006d4 <BME_read_DataU16>
 80007b2:	2001      	movs	r0, #1
 80007b4:	f000 ff5e 	bl	8001674 <HAL_Delay>
	BME_read_DataS16(BME280_REGISTER_DIG_T2, &(data->dig_T2));HAL_Delay(1);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	3302      	adds	r3, #2
 80007bc:	4619      	mov	r1, r3
 80007be:	208a      	movs	r0, #138	; 0x8a
 80007c0:	f7ff ffa4 	bl	800070c <BME_read_DataS16>
 80007c4:	2001      	movs	r0, #1
 80007c6:	f000 ff55 	bl	8001674 <HAL_Delay>
	BME_read_DataS16(BME280_REGISTER_DIG_T3, &(data->dig_T3));HAL_Delay(1);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	3304      	adds	r3, #4
 80007ce:	4619      	mov	r1, r3
 80007d0:	208c      	movs	r0, #140	; 0x8c
 80007d2:	f7ff ff9b 	bl	800070c <BME_read_DataS16>
 80007d6:	2001      	movs	r0, #1
 80007d8:	f000 ff4c 	bl	8001674 <HAL_Delay>
	BME_read_DataU16(BME280_REGISTER_DIG_P1, &(data->dig_P1));HAL_Delay(1); // let's not be hasty
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	3306      	adds	r3, #6
 80007e0:	4619      	mov	r1, r3
 80007e2:	208e      	movs	r0, #142	; 0x8e
 80007e4:	f7ff ff76 	bl	80006d4 <BME_read_DataU16>
 80007e8:	2001      	movs	r0, #1
 80007ea:	f000 ff43 	bl	8001674 <HAL_Delay>
	BME_read_DataS16(BME280_REGISTER_DIG_P2, &(data->dig_P2));HAL_Delay(1);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	3308      	adds	r3, #8
 80007f2:	4619      	mov	r1, r3
 80007f4:	2090      	movs	r0, #144	; 0x90
 80007f6:	f7ff ff89 	bl	800070c <BME_read_DataS16>
 80007fa:	2001      	movs	r0, #1
 80007fc:	f000 ff3a 	bl	8001674 <HAL_Delay>
	BME_read_DataS16(BME280_REGISTER_DIG_P3, &(data->dig_P3));HAL_Delay(1);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	330a      	adds	r3, #10
 8000804:	4619      	mov	r1, r3
 8000806:	2092      	movs	r0, #146	; 0x92
 8000808:	f7ff ff80 	bl	800070c <BME_read_DataS16>
 800080c:	2001      	movs	r0, #1
 800080e:	f000 ff31 	bl	8001674 <HAL_Delay>
	BME_read_DataS16(BME280_REGISTER_DIG_P4, &(data->dig_P4));HAL_Delay(1);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	330c      	adds	r3, #12
 8000816:	4619      	mov	r1, r3
 8000818:	2094      	movs	r0, #148	; 0x94
 800081a:	f7ff ff77 	bl	800070c <BME_read_DataS16>
 800081e:	2001      	movs	r0, #1
 8000820:	f000 ff28 	bl	8001674 <HAL_Delay>
	BME_read_DataS16(BME280_REGISTER_DIG_P5, &(data->dig_P5));HAL_Delay(1);
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	330e      	adds	r3, #14
 8000828:	4619      	mov	r1, r3
 800082a:	2096      	movs	r0, #150	; 0x96
 800082c:	f7ff ff6e 	bl	800070c <BME_read_DataS16>
 8000830:	2001      	movs	r0, #1
 8000832:	f000 ff1f 	bl	8001674 <HAL_Delay>
	BME_read_DataS16(BME280_REGISTER_DIG_P6, &(data->dig_P6));HAL_Delay(1);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	3310      	adds	r3, #16
 800083a:	4619      	mov	r1, r3
 800083c:	2098      	movs	r0, #152	; 0x98
 800083e:	f7ff ff65 	bl	800070c <BME_read_DataS16>
 8000842:	2001      	movs	r0, #1
 8000844:	f000 ff16 	bl	8001674 <HAL_Delay>
	BME_read_DataS16(BME280_REGISTER_DIG_P7, &(data->dig_P7));HAL_Delay(1);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	3312      	adds	r3, #18
 800084c:	4619      	mov	r1, r3
 800084e:	209a      	movs	r0, #154	; 0x9a
 8000850:	f7ff ff5c 	bl	800070c <BME_read_DataS16>
 8000854:	2001      	movs	r0, #1
 8000856:	f000 ff0d 	bl	8001674 <HAL_Delay>
	BME_read_DataS16(BME280_REGISTER_DIG_P8, &(data->dig_P8));HAL_Delay(1);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	3314      	adds	r3, #20
 800085e:	4619      	mov	r1, r3
 8000860:	209c      	movs	r0, #156	; 0x9c
 8000862:	f7ff ff53 	bl	800070c <BME_read_DataS16>
 8000866:	2001      	movs	r0, #1
 8000868:	f000 ff04 	bl	8001674 <HAL_Delay>
	BME_read_DataS16(BME280_REGISTER_DIG_P9, &(data->dig_P9));HAL_Delay(1);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	3316      	adds	r3, #22
 8000870:	4619      	mov	r1, r3
 8000872:	209e      	movs	r0, #158	; 0x9e
 8000874:	f7ff ff4a 	bl	800070c <BME_read_DataS16>
 8000878:	2001      	movs	r0, #1
 800087a:	f000 fefb 	bl	8001674 <HAL_Delay>
	// > &(data->dig_P9) - certified c99 moment, not sure if correct, but gotta be?
}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <BME280_SetMode>:
void BME280_SetMode(uint8_t mode) { // so basicly mode is 2 bits in the MEAS reg, we set them here
 8000886:	b580      	push	{r7, lr}
 8000888:	b084      	sub	sp, #16
 800088a:	af00      	add	r7, sp, #0
 800088c:	4603      	mov	r3, r0
 800088e:	71fb      	strb	r3, [r7, #7]

  uint8_t reg = BME_read_Data8(BME280_REG_CTRL_MEAS) & ~BME280_MODE_MSK;
 8000890:	20f4      	movs	r0, #244	; 0xf4
 8000892:	f7ff ff03 	bl	800069c <BME_read_Data8>
 8000896:	4603      	mov	r3, r0
 8000898:	f023 0303 	bic.w	r3, r3, #3
 800089c:	73fb      	strb	r3, [r7, #15]

  HAL_Delay(10); // debug
 800089e:	200a      	movs	r0, #10
 80008a0:	f000 fee8 	bl	8001674 <HAL_Delay>

  reg |= mode & BME280_MODE_MSK;
 80008a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a8:	f003 0303 	and.w	r3, r3, #3
 80008ac:	b25a      	sxtb	r2, r3
 80008ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008b2:	4313      	orrs	r3, r2
 80008b4:	b25b      	sxtb	r3, r3
 80008b6:	73fb      	strb	r3, [r7, #15]

  BME_write_reg(BME280_REG_CTRL_MEAS, reg);
 80008b8:	7bfb      	ldrb	r3, [r7, #15]
 80008ba:	4619      	mov	r1, r3
 80008bc:	20f4      	movs	r0, #244	; 0xf4
 80008be:	f7ff febf 	bl	8000640 <BME_write_reg>

}
 80008c2:	bf00      	nop
 80008c4:	3710      	adds	r7, #16
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
	...

080008cc <BME280_ReadTemperature>:

float BME280_ReadTemperature() // we actually need to do that because we need it to calc the pressure

{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0

  float temper_float = 0.0f;
 80008d2:	f04f 0300 	mov.w	r3, #0
 80008d6:	60fb      	str	r3, [r7, #12]
  uint32_t temper_raw;
  int32_t val1, val2;// intercalculation vars
  BME_read_DataU24_BE(BME280_REGISTER_TEMPDATA,&temper_raw);
 80008d8:	463b      	mov	r3, r7
 80008da:	4619      	mov	r1, r3
 80008dc:	20fa      	movs	r0, #250	; 0xfa
 80008de:	f7ff ff31 	bl	8000744 <BME_read_DataU24_BE>
  printf("hello\n");
 80008e2:	4824      	ldr	r0, [pc, #144]	; (8000974 <BME280_ReadTemperature+0xa8>)
 80008e4:	f002 fd1e 	bl	8003324 <puts>
  temper_raw >>= 4;
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	091b      	lsrs	r3, r3, #4
 80008ec:	603b      	str	r3, [r7, #0]

  val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) * // no idea what is going on
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	08db      	lsrs	r3, r3, #3
 80008f2:	4a21      	ldr	r2, [pc, #132]	; (8000978 <BME280_ReadTemperature+0xac>)
 80008f4:	8812      	ldrh	r2, [r2, #0]
 80008f6:	0052      	lsls	r2, r2, #1
 80008f8:	1a9b      	subs	r3, r3, r2
  ((int32_t)CalibData.dig_T2)) >> 11;
 80008fa:	4a1f      	ldr	r2, [pc, #124]	; (8000978 <BME280_ReadTemperature+0xac>)
 80008fc:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
  val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) * // no idea what is going on
 8000900:	fb02 f303 	mul.w	r3, r2, r3
  ((int32_t)CalibData.dig_T2)) >> 11;
 8000904:	0adb      	lsrs	r3, r3, #11
  val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) * // no idea what is going on
 8000906:	60bb      	str	r3, [r7, #8]
  val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	091b      	lsrs	r3, r3, #4
 800090c:	4a1a      	ldr	r2, [pc, #104]	; (8000978 <BME280_ReadTemperature+0xac>)
 800090e:	8812      	ldrh	r2, [r2, #0]
 8000910:	1a9b      	subs	r3, r3, r2
  ((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 8000912:	683a      	ldr	r2, [r7, #0]
 8000914:	0912      	lsrs	r2, r2, #4
 8000916:	4918      	ldr	r1, [pc, #96]	; (8000978 <BME280_ReadTemperature+0xac>)
 8000918:	8809      	ldrh	r1, [r1, #0]
 800091a:	1a52      	subs	r2, r2, r1
  val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 800091c:	fb02 f303 	mul.w	r3, r2, r3
  ((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 8000920:	0b1b      	lsrs	r3, r3, #12
  ((int32_t)CalibData.dig_T3)) >> 14;
 8000922:	4a15      	ldr	r2, [pc, #84]	; (8000978 <BME280_ReadTemperature+0xac>)
 8000924:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
  ((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 8000928:	fb02 f303 	mul.w	r3, r2, r3
  ((int32_t)CalibData.dig_T3)) >> 14;
 800092c:	0b9b      	lsrs	r3, r3, #14
  val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 800092e:	607b      	str	r3, [r7, #4]
  temper_int = val1 + val2;
 8000930:	68ba      	ldr	r2, [r7, #8]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4413      	add	r3, r2
 8000936:	4a11      	ldr	r2, [pc, #68]	; (800097c <BME280_ReadTemperature+0xb0>)
 8000938:	6013      	str	r3, [r2, #0]

  temper_float = ((temper_int * 5 + 128) >> 8);
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <BME280_ReadTemperature+0xb0>)
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	4613      	mov	r3, r2
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	4413      	add	r3, r2
 8000944:	3380      	adds	r3, #128	; 0x80
 8000946:	121b      	asrs	r3, r3, #8
 8000948:	ee07 3a90 	vmov	s15, r3
 800094c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000950:	edc7 7a03 	vstr	s15, [r7, #12]
  temper_float /= 100.0f;
 8000954:	ed97 7a03 	vldr	s14, [r7, #12]
 8000958:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000980 <BME280_ReadTemperature+0xb4>
 800095c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000960:	edc7 7a03 	vstr	s15, [r7, #12]

  return temper_float;
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	ee07 3a90 	vmov	s15, r3

}
 800096a:	eeb0 0a67 	vmov.f32	s0, s15
 800096e:	3710      	adds	r7, #16
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	08003c5c 	.word	0x08003c5c
 8000978:	2000012c 	.word	0x2000012c
 800097c:	20000128 	.word	0x20000128
 8000980:	42c80000 	.word	0x42c80000

08000984 <BME280_ReadPressure>:

float BME280_ReadPressure()

{
 8000984:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000988:	b0d0      	sub	sp, #320	; 0x140
 800098a:	af00      	add	r7, sp, #0
  float press_float = 0.0f;
 800098c:	f04f 0300 	mov.w	r3, #0
 8000990:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  float temper_float = 0.0f;
 8000994:	f04f 0300 	mov.w	r3, #0
 8000998:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  uint32_t press_raw, pres_int;
  int64_t val1, val2, p;

#warning code trips on read temp
  temper_float = BME280_ReadTemperature();
 800099c:	f7ff ff96 	bl	80008cc <BME280_ReadTemperature>
 80009a0:	ed87 0a4e 	vstr	s0, [r7, #312]	; 0x138
  BME_read_DataU24_BE(BME280_REGISTER_PRESSUREDATA,&press_raw);
 80009a4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80009a8:	4619      	mov	r1, r3
 80009aa:	20f7      	movs	r0, #247	; 0xf7
 80009ac:	f7ff feca 	bl	8000744 <BME_read_DataU24_BE>
  press_raw >>= 4;
 80009b0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80009b4:	091b      	lsrs	r3, r3, #4
 80009b6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118


  // i have no idea how does this work, if it does?
  val1 = ((int64_t) temper_int) - 128000;
 80009ba:	4bac      	ldr	r3, [pc, #688]	; (8000c6c <BME280_ReadPressure+0x2e8>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	17da      	asrs	r2, r3, #31
 80009c0:	4698      	mov	r8, r3
 80009c2:	4691      	mov	r9, r2
 80009c4:	f5b8 33fa 	subs.w	r3, r8, #128000	; 0x1f400
 80009c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80009ca:	f149 33ff 	adc.w	r3, r9, #4294967295
 80009ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80009d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80009d4:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
  val2 = val1 * val1 * (int64_t)CalibData.dig_P6;
 80009d8:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80009dc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80009e0:	fb03 f102 	mul.w	r1, r3, r2
 80009e4:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80009e8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80009ec:	fb02 f303 	mul.w	r3, r2, r3
 80009f0:	18ca      	adds	r2, r1, r3
 80009f2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80009f6:	fba3 4503 	umull	r4, r5, r3, r3
 80009fa:	1953      	adds	r3, r2, r5
 80009fc:	461d      	mov	r5, r3
 80009fe:	4b9c      	ldr	r3, [pc, #624]	; (8000c70 <BME280_ReadPressure+0x2ec>)
 8000a00:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000a04:	b21b      	sxth	r3, r3
 8000a06:	17da      	asrs	r2, r3, #31
 8000a08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8000a0c:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8000a10:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8000a14:	4603      	mov	r3, r0
 8000a16:	fb03 f205 	mul.w	r2, r3, r5
 8000a1a:	460b      	mov	r3, r1
 8000a1c:	fb04 f303 	mul.w	r3, r4, r3
 8000a20:	4413      	add	r3, r2
 8000a22:	4602      	mov	r2, r0
 8000a24:	fba4 ab02 	umull	sl, fp, r4, r2
 8000a28:	445b      	add	r3, fp
 8000a2a:	469b      	mov	fp, r3
 8000a2c:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
 8000a30:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
  val2 = val2 + ((val1 * (int64_t)CalibData.dig_P5) << 17);
 8000a34:	4b8e      	ldr	r3, [pc, #568]	; (8000c70 <BME280_ReadPressure+0x2ec>)
 8000a36:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000a3a:	b21b      	sxth	r3, r3
 8000a3c:	17da      	asrs	r2, r3, #31
 8000a3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8000a42:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8000a46:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000a4a:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8000a4e:	462a      	mov	r2, r5
 8000a50:	fb02 f203 	mul.w	r2, r2, r3
 8000a54:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000a58:	4621      	mov	r1, r4
 8000a5a:	fb01 f303 	mul.w	r3, r1, r3
 8000a5e:	441a      	add	r2, r3
 8000a60:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000a64:	4621      	mov	r1, r4
 8000a66:	fba3 1301 	umull	r1, r3, r3, r1
 8000a6a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000a6e:	460b      	mov	r3, r1
 8000a70:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8000a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000a78:	18d3      	adds	r3, r2, r3
 8000a7a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000a7e:	f04f 0000 	mov.w	r0, #0
 8000a82:	f04f 0100 	mov.w	r1, #0
 8000a86:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	; 0x110
 8000a8a:	462b      	mov	r3, r5
 8000a8c:	0459      	lsls	r1, r3, #17
 8000a8e:	4623      	mov	r3, r4
 8000a90:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8000a94:	4623      	mov	r3, r4
 8000a96:	0458      	lsls	r0, r3, #17
 8000a98:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8000a9c:	1814      	adds	r4, r2, r0
 8000a9e:	643c      	str	r4, [r7, #64]	; 0x40
 8000aa0:	414b      	adcs	r3, r1
 8000aa2:	647b      	str	r3, [r7, #68]	; 0x44
 8000aa4:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8000aa8:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
  val2 = val2 + ((int64_t)CalibData.dig_P4 << 35);
 8000aac:	4b70      	ldr	r3, [pc, #448]	; (8000c70 <BME280_ReadPressure+0x2ec>)
 8000aae:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000ab2:	b21b      	sxth	r3, r3
 8000ab4:	17da      	asrs	r2, r3, #31
 8000ab6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000aba:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8000abe:	f04f 0000 	mov.w	r0, #0
 8000ac2:	f04f 0100 	mov.w	r1, #0
 8000ac6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000aca:	00d9      	lsls	r1, r3, #3
 8000acc:	2000      	movs	r0, #0
 8000ace:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8000ad2:	1814      	adds	r4, r2, r0
 8000ad4:	63bc      	str	r4, [r7, #56]	; 0x38
 8000ad6:	414b      	adcs	r3, r1
 8000ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000ada:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8000ade:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
  val1 = ((val1 * val1 * (int64_t)CalibData.dig_P3) >> 8) + ((val1 * (int64_t)CalibData.dig_P2) << 12);
 8000ae2:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8000ae6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000aea:	fb03 f102 	mul.w	r1, r3, r2
 8000aee:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8000af2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000af6:	fb02 f303 	mul.w	r3, r2, r3
 8000afa:	18ca      	adds	r2, r1, r3
 8000afc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000b00:	fba3 1303 	umull	r1, r3, r3, r3
 8000b04:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000b08:	460b      	mov	r3, r1
 8000b0a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8000b0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000b12:	18d3      	adds	r3, r2, r3
 8000b14:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000b18:	4b55      	ldr	r3, [pc, #340]	; (8000c70 <BME280_ReadPressure+0x2ec>)
 8000b1a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000b1e:	b21b      	sxth	r3, r3
 8000b20:	17da      	asrs	r2, r3, #31
 8000b22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000b26:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8000b2a:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8000b2e:	462b      	mov	r3, r5
 8000b30:	e9d7 892c 	ldrd	r8, r9, [r7, #176]	; 0xb0
 8000b34:	4642      	mov	r2, r8
 8000b36:	fb02 f203 	mul.w	r2, r2, r3
 8000b3a:	464b      	mov	r3, r9
 8000b3c:	4621      	mov	r1, r4
 8000b3e:	fb01 f303 	mul.w	r3, r1, r3
 8000b42:	4413      	add	r3, r2
 8000b44:	4622      	mov	r2, r4
 8000b46:	4641      	mov	r1, r8
 8000b48:	fba2 1201 	umull	r1, r2, r2, r1
 8000b4c:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8000b50:	460a      	mov	r2, r1
 8000b52:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 8000b56:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8000b5a:	4413      	add	r3, r2
 8000b5c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	f04f 0100 	mov.w	r1, #0
 8000b68:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8000b6c:	4623      	mov	r3, r4
 8000b6e:	0a18      	lsrs	r0, r3, #8
 8000b70:	462b      	mov	r3, r5
 8000b72:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000b76:	462b      	mov	r3, r5
 8000b78:	1219      	asrs	r1, r3, #8
 8000b7a:	4b3d      	ldr	r3, [pc, #244]	; (8000c70 <BME280_ReadPressure+0x2ec>)
 8000b7c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000b80:	b21b      	sxth	r3, r3
 8000b82:	17da      	asrs	r2, r3, #31
 8000b84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000b88:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8000b8c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000b90:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8000b94:	464a      	mov	r2, r9
 8000b96:	fb02 f203 	mul.w	r2, r2, r3
 8000b9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000b9e:	4644      	mov	r4, r8
 8000ba0:	fb04 f303 	mul.w	r3, r4, r3
 8000ba4:	441a      	add	r2, r3
 8000ba6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000baa:	4644      	mov	r4, r8
 8000bac:	fba3 4304 	umull	r4, r3, r3, r4
 8000bb0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8000bb4:	4623      	mov	r3, r4
 8000bb6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8000bba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000bbe:	18d3      	adds	r3, r2, r3
 8000bc0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8000bc4:	f04f 0200 	mov.w	r2, #0
 8000bc8:	f04f 0300 	mov.w	r3, #0
 8000bcc:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8000bd0:	464c      	mov	r4, r9
 8000bd2:	0323      	lsls	r3, r4, #12
 8000bd4:	4644      	mov	r4, r8
 8000bd6:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8000bda:	4644      	mov	r4, r8
 8000bdc:	0322      	lsls	r2, r4, #12
 8000bde:	1884      	adds	r4, r0, r2
 8000be0:	633c      	str	r4, [r7, #48]	; 0x30
 8000be2:	eb41 0303 	adc.w	r3, r1, r3
 8000be6:	637b      	str	r3, [r7, #52]	; 0x34
 8000be8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8000bec:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
  val1 = (((((int64_t)1) << 47) + val1)) * ((int64_t)CalibData.dig_P1) >> 33;
 8000bf0:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8000bf4:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8000bf8:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
 8000bfc:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8000c00:	4b1b      	ldr	r3, [pc, #108]	; (8000c70 <BME280_ReadPressure+0x2ec>)
 8000c02:	88db      	ldrh	r3, [r3, #6]
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	2200      	movs	r2, #0
 8000c08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000c0c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8000c10:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 8000c14:	462b      	mov	r3, r5
 8000c16:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8000c1a:	4642      	mov	r2, r8
 8000c1c:	fb02 f203 	mul.w	r2, r2, r3
 8000c20:	464b      	mov	r3, r9
 8000c22:	4621      	mov	r1, r4
 8000c24:	fb01 f303 	mul.w	r3, r1, r3
 8000c28:	4413      	add	r3, r2
 8000c2a:	4622      	mov	r2, r4
 8000c2c:	4641      	mov	r1, r8
 8000c2e:	fba2 1201 	umull	r1, r2, r2, r1
 8000c32:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8000c36:	460a      	mov	r2, r1
 8000c38:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8000c3c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8000c40:	4413      	add	r3, r2
 8000c42:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8000c46:	f04f 0200 	mov.w	r2, #0
 8000c4a:	f04f 0300 	mov.w	r3, #0
 8000c4e:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8000c52:	4629      	mov	r1, r5
 8000c54:	104a      	asrs	r2, r1, #1
 8000c56:	4629      	mov	r1, r5
 8000c58:	17cb      	asrs	r3, r1, #31
 8000c5a:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
  if (val1 == 0) return 0; // avoid exception caused by division by zero
 8000c5e:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8000c62:	4313      	orrs	r3, r2
 8000c64:	d106      	bne.n	8000c74 <BME280_ReadPressure+0x2f0>
 8000c66:	f04f 0300 	mov.w	r3, #0
 8000c6a:	e194      	b.n	8000f96 <BME280_ReadPressure+0x612>
 8000c6c:	20000128 	.word	0x20000128
 8000c70:	2000012c 	.word	0x2000012c
  p = 1048576 - press_raw;
 8000c74:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000c78:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c80:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000c82:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8000c86:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
  p = (((p << 31) - val2) * 3125) / val1;
 8000c8a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000c8e:	085b      	lsrs	r3, r3, #1
 8000c90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000c94:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000c98:	07db      	lsls	r3, r3, #31
 8000c9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000c9e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8000ca2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8000ca6:	4621      	mov	r1, r4
 8000ca8:	1a89      	subs	r1, r1, r2
 8000caa:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8000cae:	4629      	mov	r1, r5
 8000cb0:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000cb8:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8000cbc:	4622      	mov	r2, r4
 8000cbe:	462b      	mov	r3, r5
 8000cc0:	1891      	adds	r1, r2, r2
 8000cc2:	6239      	str	r1, [r7, #32]
 8000cc4:	415b      	adcs	r3, r3
 8000cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8000cc8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000ccc:	4621      	mov	r1, r4
 8000cce:	1851      	adds	r1, r2, r1
 8000cd0:	61b9      	str	r1, [r7, #24]
 8000cd2:	4629      	mov	r1, r5
 8000cd4:	414b      	adcs	r3, r1
 8000cd6:	61fb      	str	r3, [r7, #28]
 8000cd8:	f04f 0200 	mov.w	r2, #0
 8000cdc:	f04f 0300 	mov.w	r3, #0
 8000ce0:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8000ce4:	4649      	mov	r1, r9
 8000ce6:	018b      	lsls	r3, r1, #6
 8000ce8:	4641      	mov	r1, r8
 8000cea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000cee:	4641      	mov	r1, r8
 8000cf0:	018a      	lsls	r2, r1, #6
 8000cf2:	4641      	mov	r1, r8
 8000cf4:	1889      	adds	r1, r1, r2
 8000cf6:	6139      	str	r1, [r7, #16]
 8000cf8:	4649      	mov	r1, r9
 8000cfa:	eb43 0101 	adc.w	r1, r3, r1
 8000cfe:	6179      	str	r1, [r7, #20]
 8000d00:	f04f 0200 	mov.w	r2, #0
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8000d0c:	4649      	mov	r1, r9
 8000d0e:	008b      	lsls	r3, r1, #2
 8000d10:	4641      	mov	r1, r8
 8000d12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000d16:	4641      	mov	r1, r8
 8000d18:	008a      	lsls	r2, r1, #2
 8000d1a:	4610      	mov	r0, r2
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4603      	mov	r3, r0
 8000d20:	4622      	mov	r2, r4
 8000d22:	189b      	adds	r3, r3, r2
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	460b      	mov	r3, r1
 8000d28:	462a      	mov	r2, r5
 8000d2a:	eb42 0303 	adc.w	r3, r2, r3
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	f04f 0200 	mov.w	r2, #0
 8000d34:	f04f 0300 	mov.w	r3, #0
 8000d38:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8000d3c:	4649      	mov	r1, r9
 8000d3e:	008b      	lsls	r3, r1, #2
 8000d40:	4641      	mov	r1, r8
 8000d42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000d46:	4641      	mov	r1, r8
 8000d48:	008a      	lsls	r2, r1, #2
 8000d4a:	4610      	mov	r0, r2
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4603      	mov	r3, r0
 8000d50:	4622      	mov	r2, r4
 8000d52:	189b      	adds	r3, r3, r2
 8000d54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000d58:	462b      	mov	r3, r5
 8000d5a:	460a      	mov	r2, r1
 8000d5c:	eb42 0303 	adc.w	r3, r2, r3
 8000d60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000d64:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8000d68:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8000d6c:	f7ff fa32 	bl	80001d4 <__aeabi_ldivmod>
 8000d70:	4602      	mov	r2, r0
 8000d72:	460b      	mov	r3, r1
 8000d74:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
  val1 = (((int64_t)CalibData.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 8000d78:	4b8b      	ldr	r3, [pc, #556]	; (8000fa8 <BME280_ReadPressure+0x624>)
 8000d7a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000d7e:	b21b      	sxth	r3, r3
 8000d80:	17da      	asrs	r2, r3, #31
 8000d82:	67bb      	str	r3, [r7, #120]	; 0x78
 8000d84:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000d86:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000d8a:	f04f 0000 	mov.w	r0, #0
 8000d8e:	f04f 0100 	mov.w	r1, #0
 8000d92:	0b50      	lsrs	r0, r2, #13
 8000d94:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000d98:	1359      	asrs	r1, r3, #13
 8000d9a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8000d9e:	462b      	mov	r3, r5
 8000da0:	fb00 f203 	mul.w	r2, r0, r3
 8000da4:	4623      	mov	r3, r4
 8000da6:	fb03 f301 	mul.w	r3, r3, r1
 8000daa:	4413      	add	r3, r2
 8000dac:	4622      	mov	r2, r4
 8000dae:	fba2 1200 	umull	r1, r2, r2, r0
 8000db2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8000db6:	460a      	mov	r2, r1
 8000db8:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8000dbc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8000dc0:	4413      	add	r3, r2
 8000dc2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000dc6:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000dca:	f04f 0000 	mov.w	r0, #0
 8000dce:	f04f 0100 	mov.w	r1, #0
 8000dd2:	0b50      	lsrs	r0, r2, #13
 8000dd4:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000dd8:	1359      	asrs	r1, r3, #13
 8000dda:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8000dde:	462b      	mov	r3, r5
 8000de0:	fb00 f203 	mul.w	r2, r0, r3
 8000de4:	4623      	mov	r3, r4
 8000de6:	fb03 f301 	mul.w	r3, r3, r1
 8000dea:	4413      	add	r3, r2
 8000dec:	4622      	mov	r2, r4
 8000dee:	fba2 1200 	umull	r1, r2, r2, r0
 8000df2:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8000df6:	460a      	mov	r2, r1
 8000df8:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8000dfc:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8000e00:	4413      	add	r3, r2
 8000e02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8000e06:	f04f 0200 	mov.w	r2, #0
 8000e0a:	f04f 0300 	mov.w	r3, #0
 8000e0e:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8000e12:	4621      	mov	r1, r4
 8000e14:	0e4a      	lsrs	r2, r1, #25
 8000e16:	4629      	mov	r1, r5
 8000e18:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8000e1c:	4629      	mov	r1, r5
 8000e1e:	164b      	asrs	r3, r1, #25
 8000e20:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
  val2 = (((int64_t)CalibData.dig_P8) * p) >> 19;
 8000e24:	4b60      	ldr	r3, [pc, #384]	; (8000fa8 <BME280_ReadPressure+0x624>)
 8000e26:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000e2a:	b21b      	sxth	r3, r3
 8000e2c:	17da      	asrs	r2, r3, #31
 8000e2e:	673b      	str	r3, [r7, #112]	; 0x70
 8000e30:	677a      	str	r2, [r7, #116]	; 0x74
 8000e32:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000e36:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8000e3a:	462a      	mov	r2, r5
 8000e3c:	fb02 f203 	mul.w	r2, r2, r3
 8000e40:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000e44:	4621      	mov	r1, r4
 8000e46:	fb01 f303 	mul.w	r3, r1, r3
 8000e4a:	441a      	add	r2, r3
 8000e4c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000e50:	4621      	mov	r1, r4
 8000e52:	fba3 1301 	umull	r1, r3, r3, r1
 8000e56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8000e5a:	460b      	mov	r3, r1
 8000e5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8000e60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000e64:	18d3      	adds	r3, r2, r3
 8000e66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8000e6a:	f04f 0200 	mov.w	r2, #0
 8000e6e:	f04f 0300 	mov.w	r3, #0
 8000e72:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8000e76:	4621      	mov	r1, r4
 8000e78:	0cca      	lsrs	r2, r1, #19
 8000e7a:	4629      	mov	r1, r5
 8000e7c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8000e80:	4629      	mov	r1, r5
 8000e82:	14cb      	asrs	r3, r1, #19
 8000e84:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
  p = ((p + val1 + val2) >> 8) + ((int64_t)CalibData.dig_P7 << 4);
 8000e88:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8000e8c:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8000e90:	1884      	adds	r4, r0, r2
 8000e92:	66bc      	str	r4, [r7, #104]	; 0x68
 8000e94:	eb41 0303 	adc.w	r3, r1, r3
 8000e98:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000e9a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8000e9e:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8000ea2:	4621      	mov	r1, r4
 8000ea4:	1889      	adds	r1, r1, r2
 8000ea6:	6639      	str	r1, [r7, #96]	; 0x60
 8000ea8:	4629      	mov	r1, r5
 8000eaa:	eb43 0101 	adc.w	r1, r3, r1
 8000eae:	6679      	str	r1, [r7, #100]	; 0x64
 8000eb0:	f04f 0000 	mov.w	r0, #0
 8000eb4:	f04f 0100 	mov.w	r1, #0
 8000eb8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8000ebc:	4623      	mov	r3, r4
 8000ebe:	0a18      	lsrs	r0, r3, #8
 8000ec0:	462b      	mov	r3, r5
 8000ec2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000ec6:	462b      	mov	r3, r5
 8000ec8:	1219      	asrs	r1, r3, #8
 8000eca:	4b37      	ldr	r3, [pc, #220]	; (8000fa8 <BME280_ReadPressure+0x624>)
 8000ecc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000ed0:	b21b      	sxth	r3, r3
 8000ed2:	17da      	asrs	r2, r3, #31
 8000ed4:	65bb      	str	r3, [r7, #88]	; 0x58
 8000ed6:	65fa      	str	r2, [r7, #92]	; 0x5c
 8000ed8:	f04f 0200 	mov.w	r2, #0
 8000edc:	f04f 0300 	mov.w	r3, #0
 8000ee0:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	; 0x58
 8000ee4:	464c      	mov	r4, r9
 8000ee6:	0123      	lsls	r3, r4, #4
 8000ee8:	4644      	mov	r4, r8
 8000eea:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000eee:	4644      	mov	r4, r8
 8000ef0:	0122      	lsls	r2, r4, #4
 8000ef2:	1884      	adds	r4, r0, r2
 8000ef4:	603c      	str	r4, [r7, #0]
 8000ef6:	eb41 0303 	adc.w	r3, r1, r3
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000f00:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
  pres_int = ((p >> 8) * 1000) + (((p & 0xff) * 390625) / 100000);
 8000f04:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8000f08:	f04f 0200 	mov.w	r2, #0
 8000f0c:	f04f 0300 	mov.w	r3, #0
 8000f10:	0a02      	lsrs	r2, r0, #8
 8000f12:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000f16:	120b      	asrs	r3, r1, #8
 8000f18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1c:	fb03 f402 	mul.w	r4, r3, r2
 8000f20:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000f24:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 8000f28:	653b      	str	r3, [r7, #80]	; 0x50
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	657b      	str	r3, [r7, #84]	; 0x54
 8000f2e:	4b1f      	ldr	r3, [pc, #124]	; (8000fac <BME280_ReadPressure+0x628>)
 8000f30:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8000f34:	464a      	mov	r2, r9
 8000f36:	fb03 f202 	mul.w	r2, r3, r2
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	4641      	mov	r1, r8
 8000f3e:	fb01 f303 	mul.w	r3, r1, r3
 8000f42:	4413      	add	r3, r2
 8000f44:	4a19      	ldr	r2, [pc, #100]	; (8000fac <BME280_ReadPressure+0x628>)
 8000f46:	4641      	mov	r1, r8
 8000f48:	fba1 1202 	umull	r1, r2, r1, r2
 8000f4c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8000f50:	460a      	mov	r2, r1
 8000f52:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8000f56:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8000f5a:	4413      	add	r3, r2
 8000f5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8000f60:	4a13      	ldr	r2, [pc, #76]	; (8000fb0 <BME280_ReadPressure+0x62c>)
 8000f62:	f04f 0300 	mov.w	r3, #0
 8000f66:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8000f6a:	f7ff f933 	bl	80001d4 <__aeabi_ldivmod>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	460b      	mov	r3, r1
 8000f72:	4613      	mov	r3, r2
 8000f74:	4423      	add	r3, r4
 8000f76:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  press_float = pres_int / 100.0f;
 8000f7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000f7e:	ee07 3a90 	vmov	s15, r3
 8000f82:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f86:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000fb4 <BME280_ReadPressure+0x630>
 8000f8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f8e:	edc7 7a4f 	vstr	s15, [r7, #316]	; 0x13c

  return press_float;
 8000f92:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c

}
 8000f96:	ee07 3a90 	vmov	s15, r3
 8000f9a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f9e:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000fa8:	2000012c 	.word	0x2000012c
 8000fac:	0005f5e1 	.word	0x0005f5e1
 8000fb0:	000186a0 	.word	0x000186a0
 8000fb4:	42c80000 	.word	0x42c80000

08000fb8 <BME280_Init>:

void BME280_Init(){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	/*
	 * first, we soft-reset.
	 * The self test uses a total wait time of 9 milliseconds. Of this, 2 milliseconds are used as wait time for soft reset and 7 milliseconds are used as wait time for conversion. The soft reset is performed in order to erase any possible old settings and could be omitted if the sensor is known to be in an untouched state after power on.
	 */
	BME_write_reg(BME280_REG_SOFTRESET,BME280_SOFTRESET_VALUE);
 8000fbc:	21b6      	movs	r1, #182	; 0xb6
 8000fbe:	20e0      	movs	r0, #224	; 0xe0
 8000fc0:	f7ff fb3e 	bl	8000640 <BME_write_reg>
	HAL_Delay(10); // let's wait a little
 8000fc4:	200a      	movs	r0, #10
 8000fc6:	f000 fb55 	bl	8001674 <HAL_Delay>
	BMEReadCalibData(&CalibData);
 8000fca:	4804      	ldr	r0, [pc, #16]	; (8000fdc <BME280_Init+0x24>)
 8000fcc:	f7ff fbe8 	bl	80007a0 <BMEReadCalibData>
#warning maybe i should comment the BMEReadCalibData???
#warning im not sure, but by default standby timing of the BME should be 0.5 ms.
#warning i should set filtration and oversampling, but **do i need to**?
	BME280_SetMode(BME280_MODE_NORMAL);
 8000fd0:	2003      	movs	r0, #3
 8000fd2:	f7ff fc58 	bl	8000886 <BME280_SetMode>

}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	2000012c 	.word	0x2000012c

08000fe0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fe6:	f000 fad3 	bl	8001590 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fea:	f000 f811 	bl	8001010 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fee:	f000 f8d1 	bl	8001194 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000ff2:	f000 f86f 	bl	80010d4 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000ff6:	f000 f8a3 	bl	8001140 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  BME280_Init();
 8000ffa:	f7ff ffdd 	bl	8000fb8 <BME280_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	//printf("hello\n"); // if I have set the frequency on 8 MHZ the uart doesn' work
	float result = BME280_ReadPressure();
 8000ffe:	f7ff fcc1 	bl	8000984 <BME280_ReadPressure>
 8001002:	ed87 0a01 	vstr	s0, [r7, #4]
	HAL_Delay(1000);
 8001006:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800100a:	f000 fb33 	bl	8001674 <HAL_Delay>
  {
 800100e:	e7f6      	b.n	8000ffe <main+0x1e>

08001010 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b094      	sub	sp, #80	; 0x50
 8001014:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001016:	f107 0320 	add.w	r3, r7, #32
 800101a:	2230      	movs	r2, #48	; 0x30
 800101c:	2100      	movs	r1, #0
 800101e:	4618      	mov	r0, r3
 8001020:	f002 f90a 	bl	8003238 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001024:	f107 030c 	add.w	r3, r7, #12
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001034:	2300      	movs	r3, #0
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	4b24      	ldr	r3, [pc, #144]	; (80010cc <SystemClock_Config+0xbc>)
 800103a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103c:	4a23      	ldr	r2, [pc, #140]	; (80010cc <SystemClock_Config+0xbc>)
 800103e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001042:	6413      	str	r3, [r2, #64]	; 0x40
 8001044:	4b21      	ldr	r3, [pc, #132]	; (80010cc <SystemClock_Config+0xbc>)
 8001046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104c:	60bb      	str	r3, [r7, #8]
 800104e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001050:	2300      	movs	r3, #0
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	4b1e      	ldr	r3, [pc, #120]	; (80010d0 <SystemClock_Config+0xc0>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800105c:	4a1c      	ldr	r2, [pc, #112]	; (80010d0 <SystemClock_Config+0xc0>)
 800105e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001062:	6013      	str	r3, [r2, #0]
 8001064:	4b1a      	ldr	r3, [pc, #104]	; (80010d0 <SystemClock_Config+0xc0>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001070:	2302      	movs	r3, #2
 8001072:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001074:	2301      	movs	r3, #1
 8001076:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001078:	2310      	movs	r3, #16
 800107a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800107c:	2300      	movs	r3, #0
 800107e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001080:	f107 0320 	add.w	r3, r7, #32
 8001084:	4618      	mov	r0, r3
 8001086:	f000 fd9d 	bl	8001bc4 <HAL_RCC_OscConfig>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001090:	f000 f8d2 	bl	8001238 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001094:	230f      	movs	r3, #15
 8001096:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001098:	2300      	movs	r3, #0
 800109a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010ac:	f107 030c 	add.w	r3, r7, #12
 80010b0:	2100      	movs	r1, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 fffe 	bl	80020b4 <HAL_RCC_ClockConfig>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80010be:	f000 f8bb 	bl	8001238 <Error_Handler>
  }
}
 80010c2:	bf00      	nop
 80010c4:	3750      	adds	r7, #80	; 0x50
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40007000 	.word	0x40007000

080010d4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80010d8:	4b17      	ldr	r3, [pc, #92]	; (8001138 <MX_SPI2_Init+0x64>)
 80010da:	4a18      	ldr	r2, [pc, #96]	; (800113c <MX_SPI2_Init+0x68>)
 80010dc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80010de:	4b16      	ldr	r3, [pc, #88]	; (8001138 <MX_SPI2_Init+0x64>)
 80010e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010e4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80010e6:	4b14      	ldr	r3, [pc, #80]	; (8001138 <MX_SPI2_Init+0x64>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80010ec:	4b12      	ldr	r3, [pc, #72]	; (8001138 <MX_SPI2_Init+0x64>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010f2:	4b11      	ldr	r3, [pc, #68]	; (8001138 <MX_SPI2_Init+0x64>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010f8:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <MX_SPI2_Init+0x64>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <MX_SPI2_Init+0x64>)
 8001100:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001104:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001106:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <MX_SPI2_Init+0x64>)
 8001108:	2200      	movs	r2, #0
 800110a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800110c:	4b0a      	ldr	r3, [pc, #40]	; (8001138 <MX_SPI2_Init+0x64>)
 800110e:	2200      	movs	r2, #0
 8001110:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001112:	4b09      	ldr	r3, [pc, #36]	; (8001138 <MX_SPI2_Init+0x64>)
 8001114:	2200      	movs	r2, #0
 8001116:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001118:	4b07      	ldr	r3, [pc, #28]	; (8001138 <MX_SPI2_Init+0x64>)
 800111a:	2200      	movs	r2, #0
 800111c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800111e:	4b06      	ldr	r3, [pc, #24]	; (8001138 <MX_SPI2_Init+0x64>)
 8001120:	220a      	movs	r2, #10
 8001122:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001124:	4804      	ldr	r0, [pc, #16]	; (8001138 <MX_SPI2_Init+0x64>)
 8001126:	f001 f9a5 	bl	8002474 <HAL_SPI_Init>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001130:	f000 f882 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001134:	bf00      	nop
 8001136:	bd80      	pop	{r7, pc}
 8001138:	2000008c 	.word	0x2000008c
 800113c:	40003800 	.word	0x40003800

08001140 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001144:	4b11      	ldr	r3, [pc, #68]	; (800118c <MX_USART1_UART_Init+0x4c>)
 8001146:	4a12      	ldr	r2, [pc, #72]	; (8001190 <MX_USART1_UART_Init+0x50>)
 8001148:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800114a:	4b10      	ldr	r3, [pc, #64]	; (800118c <MX_USART1_UART_Init+0x4c>)
 800114c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001150:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001152:	4b0e      	ldr	r3, [pc, #56]	; (800118c <MX_USART1_UART_Init+0x4c>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <MX_USART1_UART_Init+0x4c>)
 800115a:	2200      	movs	r2, #0
 800115c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800115e:	4b0b      	ldr	r3, [pc, #44]	; (800118c <MX_USART1_UART_Init+0x4c>)
 8001160:	2200      	movs	r2, #0
 8001162:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001164:	4b09      	ldr	r3, [pc, #36]	; (800118c <MX_USART1_UART_Init+0x4c>)
 8001166:	220c      	movs	r2, #12
 8001168:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800116a:	4b08      	ldr	r3, [pc, #32]	; (800118c <MX_USART1_UART_Init+0x4c>)
 800116c:	2200      	movs	r2, #0
 800116e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001170:	4b06      	ldr	r3, [pc, #24]	; (800118c <MX_USART1_UART_Init+0x4c>)
 8001172:	2200      	movs	r2, #0
 8001174:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001176:	4805      	ldr	r0, [pc, #20]	; (800118c <MX_USART1_UART_Init+0x4c>)
 8001178:	f001 fc72 	bl	8002a60 <HAL_UART_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001182:	f000 f859 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	200000e4 	.word	0x200000e4
 8001190:	40011000 	.word	0x40011000

08001194 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b088      	sub	sp, #32
 8001198:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119a:	f107 030c 	add.w	r3, r7, #12
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	60da      	str	r2, [r3, #12]
 80011a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	4b20      	ldr	r3, [pc, #128]	; (8001230 <MX_GPIO_Init+0x9c>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	4a1f      	ldr	r2, [pc, #124]	; (8001230 <MX_GPIO_Init+0x9c>)
 80011b4:	f043 0304 	orr.w	r3, r3, #4
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ba:	4b1d      	ldr	r3, [pc, #116]	; (8001230 <MX_GPIO_Init+0x9c>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	f003 0304 	and.w	r3, r3, #4
 80011c2:	60bb      	str	r3, [r7, #8]
 80011c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	607b      	str	r3, [r7, #4]
 80011ca:	4b19      	ldr	r3, [pc, #100]	; (8001230 <MX_GPIO_Init+0x9c>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	4a18      	ldr	r2, [pc, #96]	; (8001230 <MX_GPIO_Init+0x9c>)
 80011d0:	f043 0302 	orr.w	r3, r3, #2
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
 80011d6:	4b16      	ldr	r3, [pc, #88]	; (8001230 <MX_GPIO_Init+0x9c>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	603b      	str	r3, [r7, #0]
 80011e6:	4b12      	ldr	r3, [pc, #72]	; (8001230 <MX_GPIO_Init+0x9c>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a11      	ldr	r2, [pc, #68]	; (8001230 <MX_GPIO_Init+0x9c>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <MX_GPIO_Init+0x9c>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	603b      	str	r3, [r7, #0]
 80011fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, nOE_Pin|LATCH_Pin, GPIO_PIN_RESET);
 80011fe:	2200      	movs	r2, #0
 8001200:	f242 0102 	movw	r1, #8194	; 0x2002
 8001204:	480b      	ldr	r0, [pc, #44]	; (8001234 <MX_GPIO_Init+0xa0>)
 8001206:	f000 fcc3 	bl	8001b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : nOE_Pin LATCH_Pin */
  GPIO_InitStruct.Pin = nOE_Pin|LATCH_Pin;
 800120a:	f242 0302 	movw	r3, #8194	; 0x2002
 800120e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001210:	2301      	movs	r3, #1
 8001212:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001218:	2300      	movs	r3, #0
 800121a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800121c:	f107 030c 	add.w	r3, r7, #12
 8001220:	4619      	mov	r1, r3
 8001222:	4804      	ldr	r0, [pc, #16]	; (8001234 <MX_GPIO_Init+0xa0>)
 8001224:	f000 fb30 	bl	8001888 <HAL_GPIO_Init>

}
 8001228:	bf00      	nop
 800122a:	3720      	adds	r7, #32
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40023800 	.word	0x40023800
 8001234:	40020800 	.word	0x40020800

08001238 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800123c:	b672      	cpsid	i
}
 800123e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001240:	e7fe      	b.n	8001240 <Error_Handler+0x8>
	...

08001244 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	607b      	str	r3, [r7, #4]
 800124e:	4b10      	ldr	r3, [pc, #64]	; (8001290 <HAL_MspInit+0x4c>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001252:	4a0f      	ldr	r2, [pc, #60]	; (8001290 <HAL_MspInit+0x4c>)
 8001254:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001258:	6453      	str	r3, [r2, #68]	; 0x44
 800125a:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <HAL_MspInit+0x4c>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001262:	607b      	str	r3, [r7, #4]
 8001264:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	603b      	str	r3, [r7, #0]
 800126a:	4b09      	ldr	r3, [pc, #36]	; (8001290 <HAL_MspInit+0x4c>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	4a08      	ldr	r2, [pc, #32]	; (8001290 <HAL_MspInit+0x4c>)
 8001270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001274:	6413      	str	r3, [r2, #64]	; 0x40
 8001276:	4b06      	ldr	r3, [pc, #24]	; (8001290 <HAL_MspInit+0x4c>)
 8001278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127e:	603b      	str	r3, [r7, #0]
 8001280:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	40023800 	.word	0x40023800

08001294 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08a      	sub	sp, #40	; 0x28
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a19      	ldr	r2, [pc, #100]	; (8001318 <HAL_SPI_MspInit+0x84>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d12c      	bne.n	8001310 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	613b      	str	r3, [r7, #16]
 80012ba:	4b18      	ldr	r3, [pc, #96]	; (800131c <HAL_SPI_MspInit+0x88>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	4a17      	ldr	r2, [pc, #92]	; (800131c <HAL_SPI_MspInit+0x88>)
 80012c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012c4:	6413      	str	r3, [r2, #64]	; 0x40
 80012c6:	4b15      	ldr	r3, [pc, #84]	; (800131c <HAL_SPI_MspInit+0x88>)
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ce:	613b      	str	r3, [r7, #16]
 80012d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	4b11      	ldr	r3, [pc, #68]	; (800131c <HAL_SPI_MspInit+0x88>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a10      	ldr	r2, [pc, #64]	; (800131c <HAL_SPI_MspInit+0x88>)
 80012dc:	f043 0302 	orr.w	r3, r3, #2
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b0e      	ldr	r3, [pc, #56]	; (800131c <HAL_SPI_MspInit+0x88>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80012ee:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80012f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f4:	2302      	movs	r3, #2
 80012f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fc:	2303      	movs	r3, #3
 80012fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001300:	2305      	movs	r3, #5
 8001302:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	4619      	mov	r1, r3
 800130a:	4805      	ldr	r0, [pc, #20]	; (8001320 <HAL_SPI_MspInit+0x8c>)
 800130c:	f000 fabc 	bl	8001888 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001310:	bf00      	nop
 8001312:	3728      	adds	r7, #40	; 0x28
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40003800 	.word	0x40003800
 800131c:	40023800 	.word	0x40023800
 8001320:	40020400 	.word	0x40020400

08001324 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b08a      	sub	sp, #40	; 0x28
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a19      	ldr	r2, [pc, #100]	; (80013a8 <HAL_UART_MspInit+0x84>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d12c      	bne.n	80013a0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	613b      	str	r3, [r7, #16]
 800134a:	4b18      	ldr	r3, [pc, #96]	; (80013ac <HAL_UART_MspInit+0x88>)
 800134c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134e:	4a17      	ldr	r2, [pc, #92]	; (80013ac <HAL_UART_MspInit+0x88>)
 8001350:	f043 0310 	orr.w	r3, r3, #16
 8001354:	6453      	str	r3, [r2, #68]	; 0x44
 8001356:	4b15      	ldr	r3, [pc, #84]	; (80013ac <HAL_UART_MspInit+0x88>)
 8001358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135a:	f003 0310 	and.w	r3, r3, #16
 800135e:	613b      	str	r3, [r7, #16]
 8001360:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	4b11      	ldr	r3, [pc, #68]	; (80013ac <HAL_UART_MspInit+0x88>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	4a10      	ldr	r2, [pc, #64]	; (80013ac <HAL_UART_MspInit+0x88>)
 800136c:	f043 0301 	orr.w	r3, r3, #1
 8001370:	6313      	str	r3, [r2, #48]	; 0x30
 8001372:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <HAL_UART_MspInit+0x88>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800137e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001382:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001384:	2302      	movs	r3, #2
 8001386:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138c:	2303      	movs	r3, #3
 800138e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001390:	2307      	movs	r3, #7
 8001392:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001394:	f107 0314 	add.w	r3, r7, #20
 8001398:	4619      	mov	r1, r3
 800139a:	4805      	ldr	r0, [pc, #20]	; (80013b0 <HAL_UART_MspInit+0x8c>)
 800139c:	f000 fa74 	bl	8001888 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013a0:	bf00      	nop
 80013a2:	3728      	adds	r7, #40	; 0x28
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40011000 	.word	0x40011000
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40020000 	.word	0x40020000

080013b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013b8:	e7fe      	b.n	80013b8 <NMI_Handler+0x4>

080013ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013be:	e7fe      	b.n	80013be <HardFault_Handler+0x4>

080013c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <MemManage_Handler+0x4>

080013c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ca:	e7fe      	b.n	80013ca <BusFault_Handler+0x4>

080013cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d0:	e7fe      	b.n	80013d0 <UsageFault_Handler+0x4>

080013d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001400:	f000 f918 	bl	8001634 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001404:	bf00      	nop
 8001406:	bd80      	pop	{r7, pc}

08001408 <_read>:
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]
 8001418:	e00a      	b.n	8001430 <_read+0x28>
 800141a:	f3af 8000 	nop.w
 800141e:	4601      	mov	r1, r0
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	1c5a      	adds	r2, r3, #1
 8001424:	60ba      	str	r2, [r7, #8]
 8001426:	b2ca      	uxtb	r2, r1
 8001428:	701a      	strb	r2, [r3, #0]
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	3301      	adds	r3, #1
 800142e:	617b      	str	r3, [r7, #20]
 8001430:	697a      	ldr	r2, [r7, #20]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	429a      	cmp	r2, r3
 8001436:	dbf0      	blt.n	800141a <_read+0x12>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4618      	mov	r0, r3
 800143c:	3718      	adds	r7, #24
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <_close>:
 8001442:	b480      	push	{r7}
 8001444:	b083      	sub	sp, #12
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
 800144a:	f04f 33ff 	mov.w	r3, #4294967295
 800144e:	4618      	mov	r0, r3
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <_fstat>:
 800145a:	b480      	push	{r7}
 800145c:	b083      	sub	sp, #12
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
 8001462:	6039      	str	r1, [r7, #0]
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	2300      	movs	r3, #0
 800146e:	4618      	mov	r0, r3
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <_isatty>:
 800147a:	b480      	push	{r7}
 800147c:	b083      	sub	sp, #12
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
 8001482:	2301      	movs	r3, #1
 8001484:	4618      	mov	r0, r3
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <_lseek>:
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
 800149c:	2300      	movs	r3, #0
 800149e:	4618      	mov	r0, r3
 80014a0:	3714      	adds	r7, #20
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
	...

080014ac <_sbrk>:
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	4a14      	ldr	r2, [pc, #80]	; (8001508 <_sbrk+0x5c>)
 80014b6:	4b15      	ldr	r3, [pc, #84]	; (800150c <_sbrk+0x60>)
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	617b      	str	r3, [r7, #20]
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	4b13      	ldr	r3, [pc, #76]	; (8001510 <_sbrk+0x64>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d102      	bne.n	80014ce <_sbrk+0x22>
 80014c8:	4b11      	ldr	r3, [pc, #68]	; (8001510 <_sbrk+0x64>)
 80014ca:	4a12      	ldr	r2, [pc, #72]	; (8001514 <_sbrk+0x68>)
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	4b10      	ldr	r3, [pc, #64]	; (8001510 <_sbrk+0x64>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4413      	add	r3, r2
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d207      	bcs.n	80014ec <_sbrk+0x40>
 80014dc:	f001 fe82 	bl	80031e4 <__errno>
 80014e0:	4603      	mov	r3, r0
 80014e2:	220c      	movs	r2, #12
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ea:	e009      	b.n	8001500 <_sbrk+0x54>
 80014ec:	4b08      	ldr	r3, [pc, #32]	; (8001510 <_sbrk+0x64>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	4b07      	ldr	r3, [pc, #28]	; (8001510 <_sbrk+0x64>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4413      	add	r3, r2
 80014fa:	4a05      	ldr	r2, [pc, #20]	; (8001510 <_sbrk+0x64>)
 80014fc:	6013      	str	r3, [r2, #0]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	4618      	mov	r0, r3
 8001502:	3718      	adds	r7, #24
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20010000 	.word	0x20010000
 800150c:	00000400 	.word	0x00000400
 8001510:	20000148 	.word	0x20000148
 8001514:	20000160 	.word	0x20000160

08001518 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800151c:	4b06      	ldr	r3, [pc, #24]	; (8001538 <SystemInit+0x20>)
 800151e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001522:	4a05      	ldr	r2, [pc, #20]	; (8001538 <SystemInit+0x20>)
 8001524:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001528:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <Reset_Handler>:
 800153c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001574 <LoopFillZerobss+0x12>
 8001540:	480d      	ldr	r0, [pc, #52]	; (8001578 <LoopFillZerobss+0x16>)
 8001542:	490e      	ldr	r1, [pc, #56]	; (800157c <LoopFillZerobss+0x1a>)
 8001544:	4a0e      	ldr	r2, [pc, #56]	; (8001580 <LoopFillZerobss+0x1e>)
 8001546:	2300      	movs	r3, #0
 8001548:	e002      	b.n	8001550 <LoopCopyDataInit>

0800154a <CopyDataInit>:
 800154a:	58d4      	ldr	r4, [r2, r3]
 800154c:	50c4      	str	r4, [r0, r3]
 800154e:	3304      	adds	r3, #4

08001550 <LoopCopyDataInit>:
 8001550:	18c4      	adds	r4, r0, r3
 8001552:	428c      	cmp	r4, r1
 8001554:	d3f9      	bcc.n	800154a <CopyDataInit>
 8001556:	4a0b      	ldr	r2, [pc, #44]	; (8001584 <LoopFillZerobss+0x22>)
 8001558:	4c0b      	ldr	r4, [pc, #44]	; (8001588 <LoopFillZerobss+0x26>)
 800155a:	2300      	movs	r3, #0
 800155c:	e001      	b.n	8001562 <LoopFillZerobss>

0800155e <FillZerobss>:
 800155e:	6013      	str	r3, [r2, #0]
 8001560:	3204      	adds	r2, #4

08001562 <LoopFillZerobss>:
 8001562:	42a2      	cmp	r2, r4
 8001564:	d3fb      	bcc.n	800155e <FillZerobss>
 8001566:	f7ff ffd7 	bl	8001518 <SystemInit>
 800156a:	f001 fe41 	bl	80031f0 <__libc_init_array>
 800156e:	f7ff fd37 	bl	8000fe0 <main>
 8001572:	4770      	bx	lr
 8001574:	20010000 	.word	0x20010000
 8001578:	20000000 	.word	0x20000000
 800157c:	20000070 	.word	0x20000070
 8001580:	08003cf0 	.word	0x08003cf0
 8001584:	20000070 	.word	0x20000070
 8001588:	20000160 	.word	0x20000160

0800158c <ADC_IRQHandler>:
 800158c:	e7fe      	b.n	800158c <ADC_IRQHandler>
	...

08001590 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001594:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <HAL_Init+0x40>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a0d      	ldr	r2, [pc, #52]	; (80015d0 <HAL_Init+0x40>)
 800159a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800159e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015a0:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <HAL_Init+0x40>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a0a      	ldr	r2, [pc, #40]	; (80015d0 <HAL_Init+0x40>)
 80015a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015ac:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <HAL_Init+0x40>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a07      	ldr	r2, [pc, #28]	; (80015d0 <HAL_Init+0x40>)
 80015b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015b8:	2003      	movs	r0, #3
 80015ba:	f000 f931 	bl	8001820 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015be:	200f      	movs	r0, #15
 80015c0:	f000 f808 	bl	80015d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015c4:	f7ff fe3e 	bl	8001244 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40023c00 	.word	0x40023c00

080015d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015dc:	4b12      	ldr	r3, [pc, #72]	; (8001628 <HAL_InitTick+0x54>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	4b12      	ldr	r3, [pc, #72]	; (800162c <HAL_InitTick+0x58>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	4619      	mov	r1, r3
 80015e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f2:	4618      	mov	r0, r3
 80015f4:	f000 f93b 	bl	800186e <HAL_SYSTICK_Config>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e00e      	b.n	8001620 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2b0f      	cmp	r3, #15
 8001606:	d80a      	bhi.n	800161e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001608:	2200      	movs	r2, #0
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	f04f 30ff 	mov.w	r0, #4294967295
 8001610:	f000 f911 	bl	8001836 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001614:	4a06      	ldr	r2, [pc, #24]	; (8001630 <HAL_InitTick+0x5c>)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800161a:	2300      	movs	r3, #0
 800161c:	e000      	b.n	8001620 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
}
 8001620:	4618      	mov	r0, r3
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000000 	.word	0x20000000
 800162c:	20000008 	.word	0x20000008
 8001630:	20000004 	.word	0x20000004

08001634 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <HAL_IncTick+0x20>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	461a      	mov	r2, r3
 800163e:	4b06      	ldr	r3, [pc, #24]	; (8001658 <HAL_IncTick+0x24>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4413      	add	r3, r2
 8001644:	4a04      	ldr	r2, [pc, #16]	; (8001658 <HAL_IncTick+0x24>)
 8001646:	6013      	str	r3, [r2, #0]
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	20000008 	.word	0x20000008
 8001658:	2000014c 	.word	0x2000014c

0800165c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  return uwTick;
 8001660:	4b03      	ldr	r3, [pc, #12]	; (8001670 <HAL_GetTick+0x14>)
 8001662:	681b      	ldr	r3, [r3, #0]
}
 8001664:	4618      	mov	r0, r3
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	2000014c 	.word	0x2000014c

08001674 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800167c:	f7ff ffee 	bl	800165c <HAL_GetTick>
 8001680:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800168c:	d005      	beq.n	800169a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800168e:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <HAL_Delay+0x44>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	461a      	mov	r2, r3
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4413      	add	r3, r2
 8001698:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800169a:	bf00      	nop
 800169c:	f7ff ffde 	bl	800165c <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	68fa      	ldr	r2, [r7, #12]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d8f7      	bhi.n	800169c <HAL_Delay+0x28>
  {
  }
}
 80016ac:	bf00      	nop
 80016ae:	bf00      	nop
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000008 	.word	0x20000008

080016bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f003 0307 	and.w	r3, r3, #7
 80016ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016cc:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <__NVIC_SetPriorityGrouping+0x44>)
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016d2:	68ba      	ldr	r2, [r7, #8]
 80016d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016d8:	4013      	ands	r3, r2
 80016da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ee:	4a04      	ldr	r2, [pc, #16]	; (8001700 <__NVIC_SetPriorityGrouping+0x44>)
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	60d3      	str	r3, [r2, #12]
}
 80016f4:	bf00      	nop
 80016f6:	3714      	adds	r7, #20
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	e000ed00 	.word	0xe000ed00

08001704 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001708:	4b04      	ldr	r3, [pc, #16]	; (800171c <__NVIC_GetPriorityGrouping+0x18>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	0a1b      	lsrs	r3, r3, #8
 800170e:	f003 0307 	and.w	r3, r3, #7
}
 8001712:	4618      	mov	r0, r3
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	e000ed00 	.word	0xe000ed00

08001720 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	6039      	str	r1, [r7, #0]
 800172a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800172c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001730:	2b00      	cmp	r3, #0
 8001732:	db0a      	blt.n	800174a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	b2da      	uxtb	r2, r3
 8001738:	490c      	ldr	r1, [pc, #48]	; (800176c <__NVIC_SetPriority+0x4c>)
 800173a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173e:	0112      	lsls	r2, r2, #4
 8001740:	b2d2      	uxtb	r2, r2
 8001742:	440b      	add	r3, r1
 8001744:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001748:	e00a      	b.n	8001760 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	b2da      	uxtb	r2, r3
 800174e:	4908      	ldr	r1, [pc, #32]	; (8001770 <__NVIC_SetPriority+0x50>)
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	f003 030f 	and.w	r3, r3, #15
 8001756:	3b04      	subs	r3, #4
 8001758:	0112      	lsls	r2, r2, #4
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	440b      	add	r3, r1
 800175e:	761a      	strb	r2, [r3, #24]
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	e000e100 	.word	0xe000e100
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001774:	b480      	push	{r7}
 8001776:	b089      	sub	sp, #36	; 0x24
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f1c3 0307 	rsb	r3, r3, #7
 800178e:	2b04      	cmp	r3, #4
 8001790:	bf28      	it	cs
 8001792:	2304      	movcs	r3, #4
 8001794:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	3304      	adds	r3, #4
 800179a:	2b06      	cmp	r3, #6
 800179c:	d902      	bls.n	80017a4 <NVIC_EncodePriority+0x30>
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	3b03      	subs	r3, #3
 80017a2:	e000      	b.n	80017a6 <NVIC_EncodePriority+0x32>
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a8:	f04f 32ff 	mov.w	r2, #4294967295
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43da      	mvns	r2, r3
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	401a      	ands	r2, r3
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017bc:	f04f 31ff 	mov.w	r1, #4294967295
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	fa01 f303 	lsl.w	r3, r1, r3
 80017c6:	43d9      	mvns	r1, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017cc:	4313      	orrs	r3, r2
         );
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3724      	adds	r7, #36	; 0x24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
	...

080017dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017ec:	d301      	bcc.n	80017f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ee:	2301      	movs	r3, #1
 80017f0:	e00f      	b.n	8001812 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017f2:	4a0a      	ldr	r2, [pc, #40]	; (800181c <SysTick_Config+0x40>)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017fa:	210f      	movs	r1, #15
 80017fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001800:	f7ff ff8e 	bl	8001720 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001804:	4b05      	ldr	r3, [pc, #20]	; (800181c <SysTick_Config+0x40>)
 8001806:	2200      	movs	r2, #0
 8001808:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800180a:	4b04      	ldr	r3, [pc, #16]	; (800181c <SysTick_Config+0x40>)
 800180c:	2207      	movs	r2, #7
 800180e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	e000e010 	.word	0xe000e010

08001820 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f7ff ff47 	bl	80016bc <__NVIC_SetPriorityGrouping>
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001836:	b580      	push	{r7, lr}
 8001838:	b086      	sub	sp, #24
 800183a:	af00      	add	r7, sp, #0
 800183c:	4603      	mov	r3, r0
 800183e:	60b9      	str	r1, [r7, #8]
 8001840:	607a      	str	r2, [r7, #4]
 8001842:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001848:	f7ff ff5c 	bl	8001704 <__NVIC_GetPriorityGrouping>
 800184c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	68b9      	ldr	r1, [r7, #8]
 8001852:	6978      	ldr	r0, [r7, #20]
 8001854:	f7ff ff8e 	bl	8001774 <NVIC_EncodePriority>
 8001858:	4602      	mov	r2, r0
 800185a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800185e:	4611      	mov	r1, r2
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff ff5d 	bl	8001720 <__NVIC_SetPriority>
}
 8001866:	bf00      	nop
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff ffb0 	bl	80017dc <SysTick_Config>
 800187c:	4603      	mov	r3, r0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
	...

08001888 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001888:	b480      	push	{r7}
 800188a:	b089      	sub	sp, #36	; 0x24
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001892:	2300      	movs	r3, #0
 8001894:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001896:	2300      	movs	r3, #0
 8001898:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800189a:	2300      	movs	r3, #0
 800189c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800189e:	2300      	movs	r3, #0
 80018a0:	61fb      	str	r3, [r7, #28]
 80018a2:	e159      	b.n	8001b58 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018a4:	2201      	movs	r2, #1
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	697a      	ldr	r2, [r7, #20]
 80018b4:	4013      	ands	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	429a      	cmp	r2, r3
 80018be:	f040 8148 	bne.w	8001b52 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f003 0303 	and.w	r3, r3, #3
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d005      	beq.n	80018da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d130      	bne.n	800193c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	2203      	movs	r2, #3
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43db      	mvns	r3, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4013      	ands	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	68da      	ldr	r2, [r3, #12]
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4313      	orrs	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001910:	2201      	movs	r2, #1
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	43db      	mvns	r3, r3
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	4013      	ands	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	091b      	lsrs	r3, r3, #4
 8001926:	f003 0201 	and.w	r2, r3, #1
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	4313      	orrs	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 0303 	and.w	r3, r3, #3
 8001944:	2b03      	cmp	r3, #3
 8001946:	d017      	beq.n	8001978 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	2203      	movs	r2, #3
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	43db      	mvns	r3, r3
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4013      	ands	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	689a      	ldr	r2, [r3, #8]
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	4313      	orrs	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f003 0303 	and.w	r3, r3, #3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d123      	bne.n	80019cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	08da      	lsrs	r2, r3, #3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3208      	adds	r2, #8
 800198c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001990:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	f003 0307 	and.w	r3, r3, #7
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	220f      	movs	r2, #15
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	43db      	mvns	r3, r3
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	4013      	ands	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	691a      	ldr	r2, [r3, #16]
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	08da      	lsrs	r2, r3, #3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	3208      	adds	r2, #8
 80019c6:	69b9      	ldr	r1, [r7, #24]
 80019c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	2203      	movs	r2, #3
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	43db      	mvns	r3, r3
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	4013      	ands	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f003 0203 	and.w	r2, r3, #3
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	f000 80a2 	beq.w	8001b52 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	4b57      	ldr	r3, [pc, #348]	; (8001b70 <HAL_GPIO_Init+0x2e8>)
 8001a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a16:	4a56      	ldr	r2, [pc, #344]	; (8001b70 <HAL_GPIO_Init+0x2e8>)
 8001a18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a1e:	4b54      	ldr	r3, [pc, #336]	; (8001b70 <HAL_GPIO_Init+0x2e8>)
 8001a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a2a:	4a52      	ldr	r2, [pc, #328]	; (8001b74 <HAL_GPIO_Init+0x2ec>)
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	089b      	lsrs	r3, r3, #2
 8001a30:	3302      	adds	r3, #2
 8001a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	f003 0303 	and.w	r3, r3, #3
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	220f      	movs	r2, #15
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	43db      	mvns	r3, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a49      	ldr	r2, [pc, #292]	; (8001b78 <HAL_GPIO_Init+0x2f0>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d019      	beq.n	8001a8a <HAL_GPIO_Init+0x202>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a48      	ldr	r2, [pc, #288]	; (8001b7c <HAL_GPIO_Init+0x2f4>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d013      	beq.n	8001a86 <HAL_GPIO_Init+0x1fe>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a47      	ldr	r2, [pc, #284]	; (8001b80 <HAL_GPIO_Init+0x2f8>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d00d      	beq.n	8001a82 <HAL_GPIO_Init+0x1fa>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a46      	ldr	r2, [pc, #280]	; (8001b84 <HAL_GPIO_Init+0x2fc>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d007      	beq.n	8001a7e <HAL_GPIO_Init+0x1f6>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a45      	ldr	r2, [pc, #276]	; (8001b88 <HAL_GPIO_Init+0x300>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d101      	bne.n	8001a7a <HAL_GPIO_Init+0x1f2>
 8001a76:	2304      	movs	r3, #4
 8001a78:	e008      	b.n	8001a8c <HAL_GPIO_Init+0x204>
 8001a7a:	2307      	movs	r3, #7
 8001a7c:	e006      	b.n	8001a8c <HAL_GPIO_Init+0x204>
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e004      	b.n	8001a8c <HAL_GPIO_Init+0x204>
 8001a82:	2302      	movs	r3, #2
 8001a84:	e002      	b.n	8001a8c <HAL_GPIO_Init+0x204>
 8001a86:	2301      	movs	r3, #1
 8001a88:	e000      	b.n	8001a8c <HAL_GPIO_Init+0x204>
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	69fa      	ldr	r2, [r7, #28]
 8001a8e:	f002 0203 	and.w	r2, r2, #3
 8001a92:	0092      	lsls	r2, r2, #2
 8001a94:	4093      	lsls	r3, r2
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a9c:	4935      	ldr	r1, [pc, #212]	; (8001b74 <HAL_GPIO_Init+0x2ec>)
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	089b      	lsrs	r3, r3, #2
 8001aa2:	3302      	adds	r3, #2
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aaa:	4b38      	ldr	r3, [pc, #224]	; (8001b8c <HAL_GPIO_Init+0x304>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d003      	beq.n	8001ace <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ace:	4a2f      	ldr	r2, [pc, #188]	; (8001b8c <HAL_GPIO_Init+0x304>)
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ad4:	4b2d      	ldr	r3, [pc, #180]	; (8001b8c <HAL_GPIO_Init+0x304>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	43db      	mvns	r3, r3
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d003      	beq.n	8001af8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001af8:	4a24      	ldr	r2, [pc, #144]	; (8001b8c <HAL_GPIO_Init+0x304>)
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001afe:	4b23      	ldr	r3, [pc, #140]	; (8001b8c <HAL_GPIO_Init+0x304>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	43db      	mvns	r3, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b22:	4a1a      	ldr	r2, [pc, #104]	; (8001b8c <HAL_GPIO_Init+0x304>)
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b28:	4b18      	ldr	r3, [pc, #96]	; (8001b8c <HAL_GPIO_Init+0x304>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	43db      	mvns	r3, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4013      	ands	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d003      	beq.n	8001b4c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b4c:	4a0f      	ldr	r2, [pc, #60]	; (8001b8c <HAL_GPIO_Init+0x304>)
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	3301      	adds	r3, #1
 8001b56:	61fb      	str	r3, [r7, #28]
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	2b0f      	cmp	r3, #15
 8001b5c:	f67f aea2 	bls.w	80018a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b60:	bf00      	nop
 8001b62:	bf00      	nop
 8001b64:	3724      	adds	r7, #36	; 0x24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	40023800 	.word	0x40023800
 8001b74:	40013800 	.word	0x40013800
 8001b78:	40020000 	.word	0x40020000
 8001b7c:	40020400 	.word	0x40020400
 8001b80:	40020800 	.word	0x40020800
 8001b84:	40020c00 	.word	0x40020c00
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	40013c00 	.word	0x40013c00

08001b90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	460b      	mov	r3, r1
 8001b9a:	807b      	strh	r3, [r7, #2]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ba0:	787b      	ldrb	r3, [r7, #1]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ba6:	887a      	ldrh	r2, [r7, #2]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bac:	e003      	b.n	8001bb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bae:	887b      	ldrh	r3, [r7, #2]
 8001bb0:	041a      	lsls	r2, r3, #16
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	619a      	str	r2, [r3, #24]
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
	...

08001bc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e267      	b.n	80020a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d075      	beq.n	8001cce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001be2:	4b88      	ldr	r3, [pc, #544]	; (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 030c 	and.w	r3, r3, #12
 8001bea:	2b04      	cmp	r3, #4
 8001bec:	d00c      	beq.n	8001c08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bee:	4b85      	ldr	r3, [pc, #532]	; (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bf6:	2b08      	cmp	r3, #8
 8001bf8:	d112      	bne.n	8001c20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bfa:	4b82      	ldr	r3, [pc, #520]	; (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c06:	d10b      	bne.n	8001c20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c08:	4b7e      	ldr	r3, [pc, #504]	; (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d05b      	beq.n	8001ccc <HAL_RCC_OscConfig+0x108>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d157      	bne.n	8001ccc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e242      	b.n	80020a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c28:	d106      	bne.n	8001c38 <HAL_RCC_OscConfig+0x74>
 8001c2a:	4b76      	ldr	r3, [pc, #472]	; (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a75      	ldr	r2, [pc, #468]	; (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c34:	6013      	str	r3, [r2, #0]
 8001c36:	e01d      	b.n	8001c74 <HAL_RCC_OscConfig+0xb0>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c40:	d10c      	bne.n	8001c5c <HAL_RCC_OscConfig+0x98>
 8001c42:	4b70      	ldr	r3, [pc, #448]	; (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a6f      	ldr	r2, [pc, #444]	; (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001c48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c4c:	6013      	str	r3, [r2, #0]
 8001c4e:	4b6d      	ldr	r3, [pc, #436]	; (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a6c      	ldr	r2, [pc, #432]	; (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c58:	6013      	str	r3, [r2, #0]
 8001c5a:	e00b      	b.n	8001c74 <HAL_RCC_OscConfig+0xb0>
 8001c5c:	4b69      	ldr	r3, [pc, #420]	; (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a68      	ldr	r2, [pc, #416]	; (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001c62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c66:	6013      	str	r3, [r2, #0]
 8001c68:	4b66      	ldr	r3, [pc, #408]	; (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a65      	ldr	r2, [pc, #404]	; (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001c6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d013      	beq.n	8001ca4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7c:	f7ff fcee 	bl	800165c <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c84:	f7ff fcea 	bl	800165c <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b64      	cmp	r3, #100	; 0x64
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e207      	b.n	80020a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c96:	4b5b      	ldr	r3, [pc, #364]	; (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d0f0      	beq.n	8001c84 <HAL_RCC_OscConfig+0xc0>
 8001ca2:	e014      	b.n	8001cce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca4:	f7ff fcda 	bl	800165c <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cac:	f7ff fcd6 	bl	800165c <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b64      	cmp	r3, #100	; 0x64
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e1f3      	b.n	80020a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cbe:	4b51      	ldr	r3, [pc, #324]	; (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f0      	bne.n	8001cac <HAL_RCC_OscConfig+0xe8>
 8001cca:	e000      	b.n	8001cce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ccc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d063      	beq.n	8001da2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cda:	4b4a      	ldr	r3, [pc, #296]	; (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f003 030c 	and.w	r3, r3, #12
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d00b      	beq.n	8001cfe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ce6:	4b47      	ldr	r3, [pc, #284]	; (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cee:	2b08      	cmp	r3, #8
 8001cf0:	d11c      	bne.n	8001d2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cf2:	4b44      	ldr	r3, [pc, #272]	; (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d116      	bne.n	8001d2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cfe:	4b41      	ldr	r3, [pc, #260]	; (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d005      	beq.n	8001d16 <HAL_RCC_OscConfig+0x152>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d001      	beq.n	8001d16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e1c7      	b.n	80020a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d16:	4b3b      	ldr	r3, [pc, #236]	; (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	4937      	ldr	r1, [pc, #220]	; (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d2a:	e03a      	b.n	8001da2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d020      	beq.n	8001d76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d34:	4b34      	ldr	r3, [pc, #208]	; (8001e08 <HAL_RCC_OscConfig+0x244>)
 8001d36:	2201      	movs	r2, #1
 8001d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d3a:	f7ff fc8f 	bl	800165c <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d40:	e008      	b.n	8001d54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d42:	f7ff fc8b 	bl	800165c <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e1a8      	b.n	80020a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d54:	4b2b      	ldr	r3, [pc, #172]	; (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d0f0      	beq.n	8001d42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d60:	4b28      	ldr	r3, [pc, #160]	; (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	691b      	ldr	r3, [r3, #16]
 8001d6c:	00db      	lsls	r3, r3, #3
 8001d6e:	4925      	ldr	r1, [pc, #148]	; (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	600b      	str	r3, [r1, #0]
 8001d74:	e015      	b.n	8001da2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d76:	4b24      	ldr	r3, [pc, #144]	; (8001e08 <HAL_RCC_OscConfig+0x244>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7c:	f7ff fc6e 	bl	800165c <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d84:	f7ff fc6a 	bl	800165c <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e187      	b.n	80020a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d96:	4b1b      	ldr	r3, [pc, #108]	; (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f0      	bne.n	8001d84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0308 	and.w	r3, r3, #8
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d036      	beq.n	8001e1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d016      	beq.n	8001de4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001db6:	4b15      	ldr	r3, [pc, #84]	; (8001e0c <HAL_RCC_OscConfig+0x248>)
 8001db8:	2201      	movs	r2, #1
 8001dba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dbc:	f7ff fc4e 	bl	800165c <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dc4:	f7ff fc4a 	bl	800165c <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e167      	b.n	80020a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dd6:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001dd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d0f0      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x200>
 8001de2:	e01b      	b.n	8001e1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001de4:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <HAL_RCC_OscConfig+0x248>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dea:	f7ff fc37 	bl	800165c <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001df0:	e00e      	b.n	8001e10 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001df2:	f7ff fc33 	bl	800165c <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d907      	bls.n	8001e10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e150      	b.n	80020a6 <HAL_RCC_OscConfig+0x4e2>
 8001e04:	40023800 	.word	0x40023800
 8001e08:	42470000 	.word	0x42470000
 8001e0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e10:	4b88      	ldr	r3, [pc, #544]	; (8002034 <HAL_RCC_OscConfig+0x470>)
 8001e12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1ea      	bne.n	8001df2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0304 	and.w	r3, r3, #4
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f000 8097 	beq.w	8001f58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e2e:	4b81      	ldr	r3, [pc, #516]	; (8002034 <HAL_RCC_OscConfig+0x470>)
 8001e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10f      	bne.n	8001e5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60bb      	str	r3, [r7, #8]
 8001e3e:	4b7d      	ldr	r3, [pc, #500]	; (8002034 <HAL_RCC_OscConfig+0x470>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	4a7c      	ldr	r2, [pc, #496]	; (8002034 <HAL_RCC_OscConfig+0x470>)
 8001e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e48:	6413      	str	r3, [r2, #64]	; 0x40
 8001e4a:	4b7a      	ldr	r3, [pc, #488]	; (8002034 <HAL_RCC_OscConfig+0x470>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e52:	60bb      	str	r3, [r7, #8]
 8001e54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e56:	2301      	movs	r3, #1
 8001e58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e5a:	4b77      	ldr	r3, [pc, #476]	; (8002038 <HAL_RCC_OscConfig+0x474>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d118      	bne.n	8001e98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e66:	4b74      	ldr	r3, [pc, #464]	; (8002038 <HAL_RCC_OscConfig+0x474>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a73      	ldr	r2, [pc, #460]	; (8002038 <HAL_RCC_OscConfig+0x474>)
 8001e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e72:	f7ff fbf3 	bl	800165c <HAL_GetTick>
 8001e76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e78:	e008      	b.n	8001e8c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e7a:	f7ff fbef 	bl	800165c <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e10c      	b.n	80020a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e8c:	4b6a      	ldr	r3, [pc, #424]	; (8002038 <HAL_RCC_OscConfig+0x474>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d0f0      	beq.n	8001e7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d106      	bne.n	8001eae <HAL_RCC_OscConfig+0x2ea>
 8001ea0:	4b64      	ldr	r3, [pc, #400]	; (8002034 <HAL_RCC_OscConfig+0x470>)
 8001ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea4:	4a63      	ldr	r2, [pc, #396]	; (8002034 <HAL_RCC_OscConfig+0x470>)
 8001ea6:	f043 0301 	orr.w	r3, r3, #1
 8001eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8001eac:	e01c      	b.n	8001ee8 <HAL_RCC_OscConfig+0x324>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	2b05      	cmp	r3, #5
 8001eb4:	d10c      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x30c>
 8001eb6:	4b5f      	ldr	r3, [pc, #380]	; (8002034 <HAL_RCC_OscConfig+0x470>)
 8001eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eba:	4a5e      	ldr	r2, [pc, #376]	; (8002034 <HAL_RCC_OscConfig+0x470>)
 8001ebc:	f043 0304 	orr.w	r3, r3, #4
 8001ec0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ec2:	4b5c      	ldr	r3, [pc, #368]	; (8002034 <HAL_RCC_OscConfig+0x470>)
 8001ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec6:	4a5b      	ldr	r2, [pc, #364]	; (8002034 <HAL_RCC_OscConfig+0x470>)
 8001ec8:	f043 0301 	orr.w	r3, r3, #1
 8001ecc:	6713      	str	r3, [r2, #112]	; 0x70
 8001ece:	e00b      	b.n	8001ee8 <HAL_RCC_OscConfig+0x324>
 8001ed0:	4b58      	ldr	r3, [pc, #352]	; (8002034 <HAL_RCC_OscConfig+0x470>)
 8001ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed4:	4a57      	ldr	r2, [pc, #348]	; (8002034 <HAL_RCC_OscConfig+0x470>)
 8001ed6:	f023 0301 	bic.w	r3, r3, #1
 8001eda:	6713      	str	r3, [r2, #112]	; 0x70
 8001edc:	4b55      	ldr	r3, [pc, #340]	; (8002034 <HAL_RCC_OscConfig+0x470>)
 8001ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee0:	4a54      	ldr	r2, [pc, #336]	; (8002034 <HAL_RCC_OscConfig+0x470>)
 8001ee2:	f023 0304 	bic.w	r3, r3, #4
 8001ee6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d015      	beq.n	8001f1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef0:	f7ff fbb4 	bl	800165c <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ef6:	e00a      	b.n	8001f0e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ef8:	f7ff fbb0 	bl	800165c <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e0cb      	b.n	80020a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f0e:	4b49      	ldr	r3, [pc, #292]	; (8002034 <HAL_RCC_OscConfig+0x470>)
 8001f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d0ee      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x334>
 8001f1a:	e014      	b.n	8001f46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f1c:	f7ff fb9e 	bl	800165c <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f22:	e00a      	b.n	8001f3a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f24:	f7ff fb9a 	bl	800165c <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e0b5      	b.n	80020a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f3a:	4b3e      	ldr	r3, [pc, #248]	; (8002034 <HAL_RCC_OscConfig+0x470>)
 8001f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1ee      	bne.n	8001f24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f46:	7dfb      	ldrb	r3, [r7, #23]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d105      	bne.n	8001f58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f4c:	4b39      	ldr	r3, [pc, #228]	; (8002034 <HAL_RCC_OscConfig+0x470>)
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f50:	4a38      	ldr	r2, [pc, #224]	; (8002034 <HAL_RCC_OscConfig+0x470>)
 8001f52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f56:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f000 80a1 	beq.w	80020a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f62:	4b34      	ldr	r3, [pc, #208]	; (8002034 <HAL_RCC_OscConfig+0x470>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f003 030c 	and.w	r3, r3, #12
 8001f6a:	2b08      	cmp	r3, #8
 8001f6c:	d05c      	beq.n	8002028 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d141      	bne.n	8001ffa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f76:	4b31      	ldr	r3, [pc, #196]	; (800203c <HAL_RCC_OscConfig+0x478>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7c:	f7ff fb6e 	bl	800165c <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f84:	f7ff fb6a 	bl	800165c <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e087      	b.n	80020a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f96:	4b27      	ldr	r3, [pc, #156]	; (8002034 <HAL_RCC_OscConfig+0x470>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f0      	bne.n	8001f84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	69da      	ldr	r2, [r3, #28]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a1b      	ldr	r3, [r3, #32]
 8001faa:	431a      	orrs	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb0:	019b      	lsls	r3, r3, #6
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb8:	085b      	lsrs	r3, r3, #1
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	041b      	lsls	r3, r3, #16
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc4:	061b      	lsls	r3, r3, #24
 8001fc6:	491b      	ldr	r1, [pc, #108]	; (8002034 <HAL_RCC_OscConfig+0x470>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fcc:	4b1b      	ldr	r3, [pc, #108]	; (800203c <HAL_RCC_OscConfig+0x478>)
 8001fce:	2201      	movs	r2, #1
 8001fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd2:	f7ff fb43 	bl	800165c <HAL_GetTick>
 8001fd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fd8:	e008      	b.n	8001fec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fda:	f7ff fb3f 	bl	800165c <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e05c      	b.n	80020a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fec:	4b11      	ldr	r3, [pc, #68]	; (8002034 <HAL_RCC_OscConfig+0x470>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d0f0      	beq.n	8001fda <HAL_RCC_OscConfig+0x416>
 8001ff8:	e054      	b.n	80020a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ffa:	4b10      	ldr	r3, [pc, #64]	; (800203c <HAL_RCC_OscConfig+0x478>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002000:	f7ff fb2c 	bl	800165c <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002008:	f7ff fb28 	bl	800165c <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e045      	b.n	80020a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800201a:	4b06      	ldr	r3, [pc, #24]	; (8002034 <HAL_RCC_OscConfig+0x470>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1f0      	bne.n	8002008 <HAL_RCC_OscConfig+0x444>
 8002026:	e03d      	b.n	80020a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d107      	bne.n	8002040 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e038      	b.n	80020a6 <HAL_RCC_OscConfig+0x4e2>
 8002034:	40023800 	.word	0x40023800
 8002038:	40007000 	.word	0x40007000
 800203c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002040:	4b1b      	ldr	r3, [pc, #108]	; (80020b0 <HAL_RCC_OscConfig+0x4ec>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d028      	beq.n	80020a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002058:	429a      	cmp	r2, r3
 800205a:	d121      	bne.n	80020a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002066:	429a      	cmp	r2, r3
 8002068:	d11a      	bne.n	80020a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002070:	4013      	ands	r3, r2
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002076:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002078:	4293      	cmp	r3, r2
 800207a:	d111      	bne.n	80020a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002086:	085b      	lsrs	r3, r3, #1
 8002088:	3b01      	subs	r3, #1
 800208a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800208c:	429a      	cmp	r2, r3
 800208e:	d107      	bne.n	80020a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800209c:	429a      	cmp	r2, r3
 800209e:	d001      	beq.n	80020a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e000      	b.n	80020a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3718      	adds	r7, #24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40023800 	.word	0x40023800

080020b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d101      	bne.n	80020c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e0cc      	b.n	8002262 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020c8:	4b68      	ldr	r3, [pc, #416]	; (800226c <HAL_RCC_ClockConfig+0x1b8>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0307 	and.w	r3, r3, #7
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d90c      	bls.n	80020f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020d6:	4b65      	ldr	r3, [pc, #404]	; (800226c <HAL_RCC_ClockConfig+0x1b8>)
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	b2d2      	uxtb	r2, r2
 80020dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020de:	4b63      	ldr	r3, [pc, #396]	; (800226c <HAL_RCC_ClockConfig+0x1b8>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d001      	beq.n	80020f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e0b8      	b.n	8002262 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d020      	beq.n	800213e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0304 	and.w	r3, r3, #4
 8002104:	2b00      	cmp	r3, #0
 8002106:	d005      	beq.n	8002114 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002108:	4b59      	ldr	r3, [pc, #356]	; (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	4a58      	ldr	r2, [pc, #352]	; (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 800210e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002112:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0308 	and.w	r3, r3, #8
 800211c:	2b00      	cmp	r3, #0
 800211e:	d005      	beq.n	800212c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002120:	4b53      	ldr	r3, [pc, #332]	; (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	4a52      	ldr	r2, [pc, #328]	; (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 8002126:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800212a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800212c:	4b50      	ldr	r3, [pc, #320]	; (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	494d      	ldr	r1, [pc, #308]	; (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 800213a:	4313      	orrs	r3, r2
 800213c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	d044      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d107      	bne.n	8002162 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002152:	4b47      	ldr	r3, [pc, #284]	; (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d119      	bne.n	8002192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e07f      	b.n	8002262 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2b02      	cmp	r3, #2
 8002168:	d003      	beq.n	8002172 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800216e:	2b03      	cmp	r3, #3
 8002170:	d107      	bne.n	8002182 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002172:	4b3f      	ldr	r3, [pc, #252]	; (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d109      	bne.n	8002192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e06f      	b.n	8002262 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002182:	4b3b      	ldr	r3, [pc, #236]	; (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e067      	b.n	8002262 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002192:	4b37      	ldr	r3, [pc, #220]	; (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f023 0203 	bic.w	r2, r3, #3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	4934      	ldr	r1, [pc, #208]	; (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021a4:	f7ff fa5a 	bl	800165c <HAL_GetTick>
 80021a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021aa:	e00a      	b.n	80021c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021ac:	f7ff fa56 	bl	800165c <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e04f      	b.n	8002262 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c2:	4b2b      	ldr	r3, [pc, #172]	; (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f003 020c 	and.w	r2, r3, #12
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d1eb      	bne.n	80021ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021d4:	4b25      	ldr	r3, [pc, #148]	; (800226c <HAL_RCC_ClockConfig+0x1b8>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0307 	and.w	r3, r3, #7
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	429a      	cmp	r2, r3
 80021e0:	d20c      	bcs.n	80021fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021e2:	4b22      	ldr	r3, [pc, #136]	; (800226c <HAL_RCC_ClockConfig+0x1b8>)
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	b2d2      	uxtb	r2, r2
 80021e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ea:	4b20      	ldr	r3, [pc, #128]	; (800226c <HAL_RCC_ClockConfig+0x1b8>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d001      	beq.n	80021fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e032      	b.n	8002262 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0304 	and.w	r3, r3, #4
 8002204:	2b00      	cmp	r3, #0
 8002206:	d008      	beq.n	800221a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002208:	4b19      	ldr	r3, [pc, #100]	; (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	4916      	ldr	r1, [pc, #88]	; (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 8002216:	4313      	orrs	r3, r2
 8002218:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0308 	and.w	r3, r3, #8
 8002222:	2b00      	cmp	r3, #0
 8002224:	d009      	beq.n	800223a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002226:	4b12      	ldr	r3, [pc, #72]	; (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	490e      	ldr	r1, [pc, #56]	; (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 8002236:	4313      	orrs	r3, r2
 8002238:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800223a:	f000 f821 	bl	8002280 <HAL_RCC_GetSysClockFreq>
 800223e:	4602      	mov	r2, r0
 8002240:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	091b      	lsrs	r3, r3, #4
 8002246:	f003 030f 	and.w	r3, r3, #15
 800224a:	490a      	ldr	r1, [pc, #40]	; (8002274 <HAL_RCC_ClockConfig+0x1c0>)
 800224c:	5ccb      	ldrb	r3, [r1, r3]
 800224e:	fa22 f303 	lsr.w	r3, r2, r3
 8002252:	4a09      	ldr	r2, [pc, #36]	; (8002278 <HAL_RCC_ClockConfig+0x1c4>)
 8002254:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002256:	4b09      	ldr	r3, [pc, #36]	; (800227c <HAL_RCC_ClockConfig+0x1c8>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f7ff f9ba 	bl	80015d4 <HAL_InitTick>

  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	40023c00 	.word	0x40023c00
 8002270:	40023800 	.word	0x40023800
 8002274:	08003c64 	.word	0x08003c64
 8002278:	20000000 	.word	0x20000000
 800227c:	20000004 	.word	0x20000004

08002280 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002280:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002284:	b090      	sub	sp, #64	; 0x40
 8002286:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002288:	2300      	movs	r3, #0
 800228a:	637b      	str	r3, [r7, #52]	; 0x34
 800228c:	2300      	movs	r3, #0
 800228e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002290:	2300      	movs	r3, #0
 8002292:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002294:	2300      	movs	r3, #0
 8002296:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002298:	4b59      	ldr	r3, [pc, #356]	; (8002400 <HAL_RCC_GetSysClockFreq+0x180>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f003 030c 	and.w	r3, r3, #12
 80022a0:	2b08      	cmp	r3, #8
 80022a2:	d00d      	beq.n	80022c0 <HAL_RCC_GetSysClockFreq+0x40>
 80022a4:	2b08      	cmp	r3, #8
 80022a6:	f200 80a1 	bhi.w	80023ec <HAL_RCC_GetSysClockFreq+0x16c>
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d002      	beq.n	80022b4 <HAL_RCC_GetSysClockFreq+0x34>
 80022ae:	2b04      	cmp	r3, #4
 80022b0:	d003      	beq.n	80022ba <HAL_RCC_GetSysClockFreq+0x3a>
 80022b2:	e09b      	b.n	80023ec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022b4:	4b53      	ldr	r3, [pc, #332]	; (8002404 <HAL_RCC_GetSysClockFreq+0x184>)
 80022b6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80022b8:	e09b      	b.n	80023f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022ba:	4b53      	ldr	r3, [pc, #332]	; (8002408 <HAL_RCC_GetSysClockFreq+0x188>)
 80022bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80022be:	e098      	b.n	80023f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022c0:	4b4f      	ldr	r3, [pc, #316]	; (8002400 <HAL_RCC_GetSysClockFreq+0x180>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022c8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022ca:	4b4d      	ldr	r3, [pc, #308]	; (8002400 <HAL_RCC_GetSysClockFreq+0x180>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d028      	beq.n	8002328 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022d6:	4b4a      	ldr	r3, [pc, #296]	; (8002400 <HAL_RCC_GetSysClockFreq+0x180>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	099b      	lsrs	r3, r3, #6
 80022dc:	2200      	movs	r2, #0
 80022de:	623b      	str	r3, [r7, #32]
 80022e0:	627a      	str	r2, [r7, #36]	; 0x24
 80022e2:	6a3b      	ldr	r3, [r7, #32]
 80022e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80022e8:	2100      	movs	r1, #0
 80022ea:	4b47      	ldr	r3, [pc, #284]	; (8002408 <HAL_RCC_GetSysClockFreq+0x188>)
 80022ec:	fb03 f201 	mul.w	r2, r3, r1
 80022f0:	2300      	movs	r3, #0
 80022f2:	fb00 f303 	mul.w	r3, r0, r3
 80022f6:	4413      	add	r3, r2
 80022f8:	4a43      	ldr	r2, [pc, #268]	; (8002408 <HAL_RCC_GetSysClockFreq+0x188>)
 80022fa:	fba0 1202 	umull	r1, r2, r0, r2
 80022fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002300:	460a      	mov	r2, r1
 8002302:	62ba      	str	r2, [r7, #40]	; 0x28
 8002304:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002306:	4413      	add	r3, r2
 8002308:	62fb      	str	r3, [r7, #44]	; 0x2c
 800230a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800230c:	2200      	movs	r2, #0
 800230e:	61bb      	str	r3, [r7, #24]
 8002310:	61fa      	str	r2, [r7, #28]
 8002312:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002316:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800231a:	f7fd ffab 	bl	8000274 <__aeabi_uldivmod>
 800231e:	4602      	mov	r2, r0
 8002320:	460b      	mov	r3, r1
 8002322:	4613      	mov	r3, r2
 8002324:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002326:	e053      	b.n	80023d0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002328:	4b35      	ldr	r3, [pc, #212]	; (8002400 <HAL_RCC_GetSysClockFreq+0x180>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	099b      	lsrs	r3, r3, #6
 800232e:	2200      	movs	r2, #0
 8002330:	613b      	str	r3, [r7, #16]
 8002332:	617a      	str	r2, [r7, #20]
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800233a:	f04f 0b00 	mov.w	fp, #0
 800233e:	4652      	mov	r2, sl
 8002340:	465b      	mov	r3, fp
 8002342:	f04f 0000 	mov.w	r0, #0
 8002346:	f04f 0100 	mov.w	r1, #0
 800234a:	0159      	lsls	r1, r3, #5
 800234c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002350:	0150      	lsls	r0, r2, #5
 8002352:	4602      	mov	r2, r0
 8002354:	460b      	mov	r3, r1
 8002356:	ebb2 080a 	subs.w	r8, r2, sl
 800235a:	eb63 090b 	sbc.w	r9, r3, fp
 800235e:	f04f 0200 	mov.w	r2, #0
 8002362:	f04f 0300 	mov.w	r3, #0
 8002366:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800236a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800236e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002372:	ebb2 0408 	subs.w	r4, r2, r8
 8002376:	eb63 0509 	sbc.w	r5, r3, r9
 800237a:	f04f 0200 	mov.w	r2, #0
 800237e:	f04f 0300 	mov.w	r3, #0
 8002382:	00eb      	lsls	r3, r5, #3
 8002384:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002388:	00e2      	lsls	r2, r4, #3
 800238a:	4614      	mov	r4, r2
 800238c:	461d      	mov	r5, r3
 800238e:	eb14 030a 	adds.w	r3, r4, sl
 8002392:	603b      	str	r3, [r7, #0]
 8002394:	eb45 030b 	adc.w	r3, r5, fp
 8002398:	607b      	str	r3, [r7, #4]
 800239a:	f04f 0200 	mov.w	r2, #0
 800239e:	f04f 0300 	mov.w	r3, #0
 80023a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023a6:	4629      	mov	r1, r5
 80023a8:	028b      	lsls	r3, r1, #10
 80023aa:	4621      	mov	r1, r4
 80023ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023b0:	4621      	mov	r1, r4
 80023b2:	028a      	lsls	r2, r1, #10
 80023b4:	4610      	mov	r0, r2
 80023b6:	4619      	mov	r1, r3
 80023b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ba:	2200      	movs	r2, #0
 80023bc:	60bb      	str	r3, [r7, #8]
 80023be:	60fa      	str	r2, [r7, #12]
 80023c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023c4:	f7fd ff56 	bl	8000274 <__aeabi_uldivmod>
 80023c8:	4602      	mov	r2, r0
 80023ca:	460b      	mov	r3, r1
 80023cc:	4613      	mov	r3, r2
 80023ce:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023d0:	4b0b      	ldr	r3, [pc, #44]	; (8002400 <HAL_RCC_GetSysClockFreq+0x180>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	0c1b      	lsrs	r3, r3, #16
 80023d6:	f003 0303 	and.w	r3, r3, #3
 80023da:	3301      	adds	r3, #1
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80023e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80023ea:	e002      	b.n	80023f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023ec:	4b05      	ldr	r3, [pc, #20]	; (8002404 <HAL_RCC_GetSysClockFreq+0x184>)
 80023ee:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80023f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3740      	adds	r7, #64	; 0x40
 80023f8:	46bd      	mov	sp, r7
 80023fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023fe:	bf00      	nop
 8002400:	40023800 	.word	0x40023800
 8002404:	00f42400 	.word	0x00f42400
 8002408:	017d7840 	.word	0x017d7840

0800240c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002410:	4b03      	ldr	r3, [pc, #12]	; (8002420 <HAL_RCC_GetHCLKFreq+0x14>)
 8002412:	681b      	ldr	r3, [r3, #0]
}
 8002414:	4618      	mov	r0, r3
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	20000000 	.word	0x20000000

08002424 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002428:	f7ff fff0 	bl	800240c <HAL_RCC_GetHCLKFreq>
 800242c:	4602      	mov	r2, r0
 800242e:	4b05      	ldr	r3, [pc, #20]	; (8002444 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	0a9b      	lsrs	r3, r3, #10
 8002434:	f003 0307 	and.w	r3, r3, #7
 8002438:	4903      	ldr	r1, [pc, #12]	; (8002448 <HAL_RCC_GetPCLK1Freq+0x24>)
 800243a:	5ccb      	ldrb	r3, [r1, r3]
 800243c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002440:	4618      	mov	r0, r3
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40023800 	.word	0x40023800
 8002448:	08003c74 	.word	0x08003c74

0800244c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002450:	f7ff ffdc 	bl	800240c <HAL_RCC_GetHCLKFreq>
 8002454:	4602      	mov	r2, r0
 8002456:	4b05      	ldr	r3, [pc, #20]	; (800246c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	0b5b      	lsrs	r3, r3, #13
 800245c:	f003 0307 	and.w	r3, r3, #7
 8002460:	4903      	ldr	r1, [pc, #12]	; (8002470 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002462:	5ccb      	ldrb	r3, [r1, r3]
 8002464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002468:	4618      	mov	r0, r3
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40023800 	.word	0x40023800
 8002470:	08003c74 	.word	0x08003c74

08002474 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e07b      	b.n	800257e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248a:	2b00      	cmp	r3, #0
 800248c:	d108      	bne.n	80024a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002496:	d009      	beq.n	80024ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	61da      	str	r2, [r3, #28]
 800249e:	e005      	b.n	80024ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d106      	bne.n	80024cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f7fe fee4 	bl	8001294 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2202      	movs	r2, #2
 80024d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80024f4:	431a      	orrs	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024fe:	431a      	orrs	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	431a      	orrs	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	431a      	orrs	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800251c:	431a      	orrs	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002526:	431a      	orrs	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002530:	ea42 0103 	orr.w	r1, r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002538:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	430a      	orrs	r2, r1
 8002542:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	0c1b      	lsrs	r3, r3, #16
 800254a:	f003 0104 	and.w	r1, r3, #4
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002552:	f003 0210 	and.w	r2, r3, #16
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	430a      	orrs	r2, r1
 800255c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	69da      	ldr	r2, [r3, #28]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800256c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b08c      	sub	sp, #48	; 0x30
 800258a:	af00      	add	r7, sp, #0
 800258c:	60f8      	str	r0, [r7, #12]
 800258e:	60b9      	str	r1, [r7, #8]
 8002590:	607a      	str	r2, [r7, #4]
 8002592:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002594:	2301      	movs	r3, #1
 8002596:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002598:	2300      	movs	r3, #0
 800259a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d101      	bne.n	80025ac <HAL_SPI_TransmitReceive+0x26>
 80025a8:	2302      	movs	r3, #2
 80025aa:	e18a      	b.n	80028c2 <HAL_SPI_TransmitReceive+0x33c>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025b4:	f7ff f852 	bl	800165c <HAL_GetTick>
 80025b8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80025ca:	887b      	ldrh	r3, [r7, #2]
 80025cc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80025ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d00f      	beq.n	80025f6 <HAL_SPI_TransmitReceive+0x70>
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025dc:	d107      	bne.n	80025ee <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d103      	bne.n	80025ee <HAL_SPI_TransmitReceive+0x68>
 80025e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025ea:	2b04      	cmp	r3, #4
 80025ec:	d003      	beq.n	80025f6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80025ee:	2302      	movs	r3, #2
 80025f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80025f4:	e15b      	b.n	80028ae <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d005      	beq.n	8002608 <HAL_SPI_TransmitReceive+0x82>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d002      	beq.n	8002608 <HAL_SPI_TransmitReceive+0x82>
 8002602:	887b      	ldrh	r3, [r7, #2]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d103      	bne.n	8002610 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800260e:	e14e      	b.n	80028ae <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2b04      	cmp	r3, #4
 800261a:	d003      	beq.n	8002624 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2205      	movs	r2, #5
 8002620:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2200      	movs	r2, #0
 8002628:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	887a      	ldrh	r2, [r7, #2]
 8002634:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	887a      	ldrh	r2, [r7, #2]
 800263a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	68ba      	ldr	r2, [r7, #8]
 8002640:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	887a      	ldrh	r2, [r7, #2]
 8002646:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	887a      	ldrh	r2, [r7, #2]
 800264c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2200      	movs	r2, #0
 8002652:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002664:	2b40      	cmp	r3, #64	; 0x40
 8002666:	d007      	beq.n	8002678 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002676:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002680:	d178      	bne.n	8002774 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d002      	beq.n	8002690 <HAL_SPI_TransmitReceive+0x10a>
 800268a:	8b7b      	ldrh	r3, [r7, #26]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d166      	bne.n	800275e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002694:	881a      	ldrh	r2, [r3, #0]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a0:	1c9a      	adds	r2, r3, #2
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	3b01      	subs	r3, #1
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026b4:	e053      	b.n	800275e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d11b      	bne.n	80026fc <HAL_SPI_TransmitReceive+0x176>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d016      	beq.n	80026fc <HAL_SPI_TransmitReceive+0x176>
 80026ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d113      	bne.n	80026fc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d8:	881a      	ldrh	r2, [r3, #0]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e4:	1c9a      	adds	r2, r3, #2
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	3b01      	subs	r3, #1
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80026f8:	2300      	movs	r3, #0
 80026fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b01      	cmp	r3, #1
 8002708:	d119      	bne.n	800273e <HAL_SPI_TransmitReceive+0x1b8>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800270e:	b29b      	uxth	r3, r3
 8002710:	2b00      	cmp	r3, #0
 8002712:	d014      	beq.n	800273e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68da      	ldr	r2, [r3, #12]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800271e:	b292      	uxth	r2, r2
 8002720:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002726:	1c9a      	adds	r2, r3, #2
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002730:	b29b      	uxth	r3, r3
 8002732:	3b01      	subs	r3, #1
 8002734:	b29a      	uxth	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800273a:	2301      	movs	r3, #1
 800273c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800273e:	f7fe ff8d 	bl	800165c <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800274a:	429a      	cmp	r2, r3
 800274c:	d807      	bhi.n	800275e <HAL_SPI_TransmitReceive+0x1d8>
 800274e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002754:	d003      	beq.n	800275e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800275c:	e0a7      	b.n	80028ae <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002762:	b29b      	uxth	r3, r3
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1a6      	bne.n	80026b6 <HAL_SPI_TransmitReceive+0x130>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800276c:	b29b      	uxth	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1a1      	bne.n	80026b6 <HAL_SPI_TransmitReceive+0x130>
 8002772:	e07c      	b.n	800286e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d002      	beq.n	8002782 <HAL_SPI_TransmitReceive+0x1fc>
 800277c:	8b7b      	ldrh	r3, [r7, #26]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d16b      	bne.n	800285a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	330c      	adds	r3, #12
 800278c:	7812      	ldrb	r2, [r2, #0]
 800278e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002794:	1c5a      	adds	r2, r3, #1
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800279e:	b29b      	uxth	r3, r3
 80027a0:	3b01      	subs	r3, #1
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027a8:	e057      	b.n	800285a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d11c      	bne.n	80027f2 <HAL_SPI_TransmitReceive+0x26c>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027bc:	b29b      	uxth	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d017      	beq.n	80027f2 <HAL_SPI_TransmitReceive+0x26c>
 80027c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d114      	bne.n	80027f2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	330c      	adds	r3, #12
 80027d2:	7812      	ldrb	r2, [r2, #0]
 80027d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	1c5a      	adds	r2, r3, #1
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	3b01      	subs	r3, #1
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80027ee:	2300      	movs	r3, #0
 80027f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d119      	bne.n	8002834 <HAL_SPI_TransmitReceive+0x2ae>
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002804:	b29b      	uxth	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d014      	beq.n	8002834 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68da      	ldr	r2, [r3, #12]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002814:	b2d2      	uxtb	r2, r2
 8002816:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800281c:	1c5a      	adds	r2, r3, #1
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002826:	b29b      	uxth	r3, r3
 8002828:	3b01      	subs	r3, #1
 800282a:	b29a      	uxth	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002830:	2301      	movs	r3, #1
 8002832:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002834:	f7fe ff12 	bl	800165c <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002840:	429a      	cmp	r2, r3
 8002842:	d803      	bhi.n	800284c <HAL_SPI_TransmitReceive+0x2c6>
 8002844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800284a:	d102      	bne.n	8002852 <HAL_SPI_TransmitReceive+0x2cc>
 800284c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800284e:	2b00      	cmp	r3, #0
 8002850:	d103      	bne.n	800285a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002858:	e029      	b.n	80028ae <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800285e:	b29b      	uxth	r3, r3
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1a2      	bne.n	80027aa <HAL_SPI_TransmitReceive+0x224>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002868:	b29b      	uxth	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d19d      	bne.n	80027aa <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800286e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002870:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f000 f8b2 	bl	80029dc <SPI_EndRxTxTransaction>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d006      	beq.n	800288c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2220      	movs	r2, #32
 8002888:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800288a:	e010      	b.n	80028ae <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10b      	bne.n	80028ac <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002894:	2300      	movs	r3, #0
 8002896:	617b      	str	r3, [r7, #20]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	617b      	str	r3, [r7, #20]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	617b      	str	r3, [r7, #20]
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	e000      	b.n	80028ae <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80028ac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80028be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3730      	adds	r7, #48	; 0x30
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
	...

080028cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b088      	sub	sp, #32
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	603b      	str	r3, [r7, #0]
 80028d8:	4613      	mov	r3, r2
 80028da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80028dc:	f7fe febe 	bl	800165c <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e4:	1a9b      	subs	r3, r3, r2
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	4413      	add	r3, r2
 80028ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80028ec:	f7fe feb6 	bl	800165c <HAL_GetTick>
 80028f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80028f2:	4b39      	ldr	r3, [pc, #228]	; (80029d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	015b      	lsls	r3, r3, #5
 80028f8:	0d1b      	lsrs	r3, r3, #20
 80028fa:	69fa      	ldr	r2, [r7, #28]
 80028fc:	fb02 f303 	mul.w	r3, r2, r3
 8002900:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002902:	e054      	b.n	80029ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800290a:	d050      	beq.n	80029ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800290c:	f7fe fea6 	bl	800165c <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	69fa      	ldr	r2, [r7, #28]
 8002918:	429a      	cmp	r2, r3
 800291a:	d902      	bls.n	8002922 <SPI_WaitFlagStateUntilTimeout+0x56>
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d13d      	bne.n	800299e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	685a      	ldr	r2, [r3, #4]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002930:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800293a:	d111      	bne.n	8002960 <SPI_WaitFlagStateUntilTimeout+0x94>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002944:	d004      	beq.n	8002950 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800294e:	d107      	bne.n	8002960 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800295e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002964:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002968:	d10f      	bne.n	800298a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002988:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e017      	b.n	80029ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d101      	bne.n	80029a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80029a4:	2300      	movs	r3, #0
 80029a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	3b01      	subs	r3, #1
 80029ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	4013      	ands	r3, r2
 80029b8:	68ba      	ldr	r2, [r7, #8]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	bf0c      	ite	eq
 80029be:	2301      	moveq	r3, #1
 80029c0:	2300      	movne	r3, #0
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	461a      	mov	r2, r3
 80029c6:	79fb      	ldrb	r3, [r7, #7]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d19b      	bne.n	8002904 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3720      	adds	r7, #32
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	20000000 	.word	0x20000000

080029dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b088      	sub	sp, #32
 80029e0:	af02      	add	r7, sp, #8
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80029e8:	4b1b      	ldr	r3, [pc, #108]	; (8002a58 <SPI_EndRxTxTransaction+0x7c>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a1b      	ldr	r2, [pc, #108]	; (8002a5c <SPI_EndRxTxTransaction+0x80>)
 80029ee:	fba2 2303 	umull	r2, r3, r2, r3
 80029f2:	0d5b      	lsrs	r3, r3, #21
 80029f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80029f8:	fb02 f303 	mul.w	r3, r2, r3
 80029fc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a06:	d112      	bne.n	8002a2e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	2180      	movs	r1, #128	; 0x80
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f7ff ff5a 	bl	80028cc <SPI_WaitFlagStateUntilTimeout>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d016      	beq.n	8002a4c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a22:	f043 0220 	orr.w	r2, r3, #32
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e00f      	b.n	8002a4e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00a      	beq.n	8002a4a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	3b01      	subs	r3, #1
 8002a38:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a44:	2b80      	cmp	r3, #128	; 0x80
 8002a46:	d0f2      	beq.n	8002a2e <SPI_EndRxTxTransaction+0x52>
 8002a48:	e000      	b.n	8002a4c <SPI_EndRxTxTransaction+0x70>
        break;
 8002a4a:	bf00      	nop
  }

  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3718      	adds	r7, #24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	20000000 	.word	0x20000000
 8002a5c:	165e9f81 	.word	0x165e9f81

08002a60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e03f      	b.n	8002af2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d106      	bne.n	8002a8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f7fe fc4c 	bl	8001324 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2224      	movs	r2, #36	; 0x24
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68da      	ldr	r2, [r3, #12]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002aa2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 f929 	bl	8002cfc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	691a      	ldr	r2, [r3, #16]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ab8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	695a      	ldr	r2, [r3, #20]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ac8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68da      	ldr	r2, [r3, #12]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ad8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2220      	movs	r2, #32
 8002aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b08a      	sub	sp, #40	; 0x28
 8002afe:	af02      	add	r7, sp, #8
 8002b00:	60f8      	str	r0, [r7, #12]
 8002b02:	60b9      	str	r1, [r7, #8]
 8002b04:	603b      	str	r3, [r7, #0]
 8002b06:	4613      	mov	r3, r2
 8002b08:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b20      	cmp	r3, #32
 8002b18:	d17c      	bne.n	8002c14 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d002      	beq.n	8002b26 <HAL_UART_Transmit+0x2c>
 8002b20:	88fb      	ldrh	r3, [r7, #6]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e075      	b.n	8002c16 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d101      	bne.n	8002b38 <HAL_UART_Transmit+0x3e>
 8002b34:	2302      	movs	r3, #2
 8002b36:	e06e      	b.n	8002c16 <HAL_UART_Transmit+0x11c>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2221      	movs	r2, #33	; 0x21
 8002b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b4e:	f7fe fd85 	bl	800165c <HAL_GetTick>
 8002b52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	88fa      	ldrh	r2, [r7, #6]
 8002b58:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	88fa      	ldrh	r2, [r7, #6]
 8002b5e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b68:	d108      	bne.n	8002b7c <HAL_UART_Transmit+0x82>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d104      	bne.n	8002b7c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002b72:	2300      	movs	r3, #0
 8002b74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	61bb      	str	r3, [r7, #24]
 8002b7a:	e003      	b.n	8002b84 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b80:	2300      	movs	r3, #0
 8002b82:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002b8c:	e02a      	b.n	8002be4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	9300      	str	r3, [sp, #0]
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	2200      	movs	r2, #0
 8002b96:	2180      	movs	r1, #128	; 0x80
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f000 f840 	bl	8002c1e <UART_WaitOnFlagUntilTimeout>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e036      	b.n	8002c16 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10b      	bne.n	8002bc6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	881b      	ldrh	r3, [r3, #0]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bbc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	3302      	adds	r3, #2
 8002bc2:	61bb      	str	r3, [r7, #24]
 8002bc4:	e007      	b.n	8002bd6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	781a      	ldrb	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1cf      	bne.n	8002b8e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	9300      	str	r3, [sp, #0]
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	2140      	movs	r1, #64	; 0x40
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f000 f810 	bl	8002c1e <UART_WaitOnFlagUntilTimeout>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e006      	b.n	8002c16 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002c10:	2300      	movs	r3, #0
 8002c12:	e000      	b.n	8002c16 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002c14:	2302      	movs	r3, #2
  }
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3720      	adds	r7, #32
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b090      	sub	sp, #64	; 0x40
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	60f8      	str	r0, [r7, #12]
 8002c26:	60b9      	str	r1, [r7, #8]
 8002c28:	603b      	str	r3, [r7, #0]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c2e:	e050      	b.n	8002cd2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c36:	d04c      	beq.n	8002cd2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d007      	beq.n	8002c4e <UART_WaitOnFlagUntilTimeout+0x30>
 8002c3e:	f7fe fd0d 	bl	800165c <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d241      	bcs.n	8002cd2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	330c      	adds	r3, #12
 8002c54:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c58:	e853 3f00 	ldrex	r3, [r3]
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002c64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	330c      	adds	r3, #12
 8002c6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c6e:	637a      	str	r2, [r7, #52]	; 0x34
 8002c70:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c76:	e841 2300 	strex	r3, r2, [r1]
 8002c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1e5      	bne.n	8002c4e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	3314      	adds	r3, #20
 8002c88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	e853 3f00 	ldrex	r3, [r3]
 8002c90:	613b      	str	r3, [r7, #16]
   return(result);
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	f023 0301 	bic.w	r3, r3, #1
 8002c98:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	3314      	adds	r3, #20
 8002ca0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ca2:	623a      	str	r2, [r7, #32]
 8002ca4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ca6:	69f9      	ldr	r1, [r7, #28]
 8002ca8:	6a3a      	ldr	r2, [r7, #32]
 8002caa:	e841 2300 	strex	r3, r2, [r1]
 8002cae:	61bb      	str	r3, [r7, #24]
   return(result);
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1e5      	bne.n	8002c82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2220      	movs	r2, #32
 8002cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2220      	movs	r2, #32
 8002cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e00f      	b.n	8002cf2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	68ba      	ldr	r2, [r7, #8]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	bf0c      	ite	eq
 8002ce2:	2301      	moveq	r3, #1
 8002ce4:	2300      	movne	r3, #0
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	461a      	mov	r2, r3
 8002cea:	79fb      	ldrb	r3, [r7, #7]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d09f      	beq.n	8002c30 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3740      	adds	r7, #64	; 0x40
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
	...

08002cfc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d00:	b0c0      	sub	sp, #256	; 0x100
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d18:	68d9      	ldr	r1, [r3, #12]
 8002d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	ea40 0301 	orr.w	r3, r0, r1
 8002d24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d2a:	689a      	ldr	r2, [r3, #8]
 8002d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	431a      	orrs	r2, r3
 8002d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d40:	69db      	ldr	r3, [r3, #28]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002d54:	f021 010c 	bic.w	r1, r1, #12
 8002d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002d62:	430b      	orrs	r3, r1
 8002d64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d76:	6999      	ldr	r1, [r3, #24]
 8002d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	ea40 0301 	orr.w	r3, r0, r1
 8002d82:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	4b8f      	ldr	r3, [pc, #572]	; (8002fc8 <UART_SetConfig+0x2cc>)
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d005      	beq.n	8002d9c <UART_SetConfig+0xa0>
 8002d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	4b8d      	ldr	r3, [pc, #564]	; (8002fcc <UART_SetConfig+0x2d0>)
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d104      	bne.n	8002da6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d9c:	f7ff fb56 	bl	800244c <HAL_RCC_GetPCLK2Freq>
 8002da0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002da4:	e003      	b.n	8002dae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002da6:	f7ff fb3d 	bl	8002424 <HAL_RCC_GetPCLK1Freq>
 8002daa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002db8:	f040 810c 	bne.w	8002fd4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002dbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002dc6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002dca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002dce:	4622      	mov	r2, r4
 8002dd0:	462b      	mov	r3, r5
 8002dd2:	1891      	adds	r1, r2, r2
 8002dd4:	65b9      	str	r1, [r7, #88]	; 0x58
 8002dd6:	415b      	adcs	r3, r3
 8002dd8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002dda:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002dde:	4621      	mov	r1, r4
 8002de0:	eb12 0801 	adds.w	r8, r2, r1
 8002de4:	4629      	mov	r1, r5
 8002de6:	eb43 0901 	adc.w	r9, r3, r1
 8002dea:	f04f 0200 	mov.w	r2, #0
 8002dee:	f04f 0300 	mov.w	r3, #0
 8002df2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002df6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002dfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002dfe:	4690      	mov	r8, r2
 8002e00:	4699      	mov	r9, r3
 8002e02:	4623      	mov	r3, r4
 8002e04:	eb18 0303 	adds.w	r3, r8, r3
 8002e08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002e0c:	462b      	mov	r3, r5
 8002e0e:	eb49 0303 	adc.w	r3, r9, r3
 8002e12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002e22:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002e26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	18db      	adds	r3, r3, r3
 8002e2e:	653b      	str	r3, [r7, #80]	; 0x50
 8002e30:	4613      	mov	r3, r2
 8002e32:	eb42 0303 	adc.w	r3, r2, r3
 8002e36:	657b      	str	r3, [r7, #84]	; 0x54
 8002e38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002e3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002e40:	f7fd fa18 	bl	8000274 <__aeabi_uldivmod>
 8002e44:	4602      	mov	r2, r0
 8002e46:	460b      	mov	r3, r1
 8002e48:	4b61      	ldr	r3, [pc, #388]	; (8002fd0 <UART_SetConfig+0x2d4>)
 8002e4a:	fba3 2302 	umull	r2, r3, r3, r2
 8002e4e:	095b      	lsrs	r3, r3, #5
 8002e50:	011c      	lsls	r4, r3, #4
 8002e52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e56:	2200      	movs	r2, #0
 8002e58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e5c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002e60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002e64:	4642      	mov	r2, r8
 8002e66:	464b      	mov	r3, r9
 8002e68:	1891      	adds	r1, r2, r2
 8002e6a:	64b9      	str	r1, [r7, #72]	; 0x48
 8002e6c:	415b      	adcs	r3, r3
 8002e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002e74:	4641      	mov	r1, r8
 8002e76:	eb12 0a01 	adds.w	sl, r2, r1
 8002e7a:	4649      	mov	r1, r9
 8002e7c:	eb43 0b01 	adc.w	fp, r3, r1
 8002e80:	f04f 0200 	mov.w	r2, #0
 8002e84:	f04f 0300 	mov.w	r3, #0
 8002e88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e94:	4692      	mov	sl, r2
 8002e96:	469b      	mov	fp, r3
 8002e98:	4643      	mov	r3, r8
 8002e9a:	eb1a 0303 	adds.w	r3, sl, r3
 8002e9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ea2:	464b      	mov	r3, r9
 8002ea4:	eb4b 0303 	adc.w	r3, fp, r3
 8002ea8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002eb8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002ebc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	18db      	adds	r3, r3, r3
 8002ec4:	643b      	str	r3, [r7, #64]	; 0x40
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	eb42 0303 	adc.w	r3, r2, r3
 8002ecc:	647b      	str	r3, [r7, #68]	; 0x44
 8002ece:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ed2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002ed6:	f7fd f9cd 	bl	8000274 <__aeabi_uldivmod>
 8002eda:	4602      	mov	r2, r0
 8002edc:	460b      	mov	r3, r1
 8002ede:	4611      	mov	r1, r2
 8002ee0:	4b3b      	ldr	r3, [pc, #236]	; (8002fd0 <UART_SetConfig+0x2d4>)
 8002ee2:	fba3 2301 	umull	r2, r3, r3, r1
 8002ee6:	095b      	lsrs	r3, r3, #5
 8002ee8:	2264      	movs	r2, #100	; 0x64
 8002eea:	fb02 f303 	mul.w	r3, r2, r3
 8002eee:	1acb      	subs	r3, r1, r3
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002ef6:	4b36      	ldr	r3, [pc, #216]	; (8002fd0 <UART_SetConfig+0x2d4>)
 8002ef8:	fba3 2302 	umull	r2, r3, r3, r2
 8002efc:	095b      	lsrs	r3, r3, #5
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f04:	441c      	add	r4, r3
 8002f06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f10:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002f14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002f18:	4642      	mov	r2, r8
 8002f1a:	464b      	mov	r3, r9
 8002f1c:	1891      	adds	r1, r2, r2
 8002f1e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f20:	415b      	adcs	r3, r3
 8002f22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002f28:	4641      	mov	r1, r8
 8002f2a:	1851      	adds	r1, r2, r1
 8002f2c:	6339      	str	r1, [r7, #48]	; 0x30
 8002f2e:	4649      	mov	r1, r9
 8002f30:	414b      	adcs	r3, r1
 8002f32:	637b      	str	r3, [r7, #52]	; 0x34
 8002f34:	f04f 0200 	mov.w	r2, #0
 8002f38:	f04f 0300 	mov.w	r3, #0
 8002f3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002f40:	4659      	mov	r1, fp
 8002f42:	00cb      	lsls	r3, r1, #3
 8002f44:	4651      	mov	r1, sl
 8002f46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f4a:	4651      	mov	r1, sl
 8002f4c:	00ca      	lsls	r2, r1, #3
 8002f4e:	4610      	mov	r0, r2
 8002f50:	4619      	mov	r1, r3
 8002f52:	4603      	mov	r3, r0
 8002f54:	4642      	mov	r2, r8
 8002f56:	189b      	adds	r3, r3, r2
 8002f58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f5c:	464b      	mov	r3, r9
 8002f5e:	460a      	mov	r2, r1
 8002f60:	eb42 0303 	adc.w	r3, r2, r3
 8002f64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002f74:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002f78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	18db      	adds	r3, r3, r3
 8002f80:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f82:	4613      	mov	r3, r2
 8002f84:	eb42 0303 	adc.w	r3, r2, r3
 8002f88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002f92:	f7fd f96f 	bl	8000274 <__aeabi_uldivmod>
 8002f96:	4602      	mov	r2, r0
 8002f98:	460b      	mov	r3, r1
 8002f9a:	4b0d      	ldr	r3, [pc, #52]	; (8002fd0 <UART_SetConfig+0x2d4>)
 8002f9c:	fba3 1302 	umull	r1, r3, r3, r2
 8002fa0:	095b      	lsrs	r3, r3, #5
 8002fa2:	2164      	movs	r1, #100	; 0x64
 8002fa4:	fb01 f303 	mul.w	r3, r1, r3
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	3332      	adds	r3, #50	; 0x32
 8002fae:	4a08      	ldr	r2, [pc, #32]	; (8002fd0 <UART_SetConfig+0x2d4>)
 8002fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb4:	095b      	lsrs	r3, r3, #5
 8002fb6:	f003 0207 	and.w	r2, r3, #7
 8002fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4422      	add	r2, r4
 8002fc2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002fc4:	e105      	b.n	80031d2 <UART_SetConfig+0x4d6>
 8002fc6:	bf00      	nop
 8002fc8:	40011000 	.word	0x40011000
 8002fcc:	40011400 	.word	0x40011400
 8002fd0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002fde:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002fe2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002fe6:	4642      	mov	r2, r8
 8002fe8:	464b      	mov	r3, r9
 8002fea:	1891      	adds	r1, r2, r2
 8002fec:	6239      	str	r1, [r7, #32]
 8002fee:	415b      	adcs	r3, r3
 8002ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ff2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ff6:	4641      	mov	r1, r8
 8002ff8:	1854      	adds	r4, r2, r1
 8002ffa:	4649      	mov	r1, r9
 8002ffc:	eb43 0501 	adc.w	r5, r3, r1
 8003000:	f04f 0200 	mov.w	r2, #0
 8003004:	f04f 0300 	mov.w	r3, #0
 8003008:	00eb      	lsls	r3, r5, #3
 800300a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800300e:	00e2      	lsls	r2, r4, #3
 8003010:	4614      	mov	r4, r2
 8003012:	461d      	mov	r5, r3
 8003014:	4643      	mov	r3, r8
 8003016:	18e3      	adds	r3, r4, r3
 8003018:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800301c:	464b      	mov	r3, r9
 800301e:	eb45 0303 	adc.w	r3, r5, r3
 8003022:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003032:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003036:	f04f 0200 	mov.w	r2, #0
 800303a:	f04f 0300 	mov.w	r3, #0
 800303e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003042:	4629      	mov	r1, r5
 8003044:	008b      	lsls	r3, r1, #2
 8003046:	4621      	mov	r1, r4
 8003048:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800304c:	4621      	mov	r1, r4
 800304e:	008a      	lsls	r2, r1, #2
 8003050:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003054:	f7fd f90e 	bl	8000274 <__aeabi_uldivmod>
 8003058:	4602      	mov	r2, r0
 800305a:	460b      	mov	r3, r1
 800305c:	4b60      	ldr	r3, [pc, #384]	; (80031e0 <UART_SetConfig+0x4e4>)
 800305e:	fba3 2302 	umull	r2, r3, r3, r2
 8003062:	095b      	lsrs	r3, r3, #5
 8003064:	011c      	lsls	r4, r3, #4
 8003066:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800306a:	2200      	movs	r2, #0
 800306c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003070:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003074:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003078:	4642      	mov	r2, r8
 800307a:	464b      	mov	r3, r9
 800307c:	1891      	adds	r1, r2, r2
 800307e:	61b9      	str	r1, [r7, #24]
 8003080:	415b      	adcs	r3, r3
 8003082:	61fb      	str	r3, [r7, #28]
 8003084:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003088:	4641      	mov	r1, r8
 800308a:	1851      	adds	r1, r2, r1
 800308c:	6139      	str	r1, [r7, #16]
 800308e:	4649      	mov	r1, r9
 8003090:	414b      	adcs	r3, r1
 8003092:	617b      	str	r3, [r7, #20]
 8003094:	f04f 0200 	mov.w	r2, #0
 8003098:	f04f 0300 	mov.w	r3, #0
 800309c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030a0:	4659      	mov	r1, fp
 80030a2:	00cb      	lsls	r3, r1, #3
 80030a4:	4651      	mov	r1, sl
 80030a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030aa:	4651      	mov	r1, sl
 80030ac:	00ca      	lsls	r2, r1, #3
 80030ae:	4610      	mov	r0, r2
 80030b0:	4619      	mov	r1, r3
 80030b2:	4603      	mov	r3, r0
 80030b4:	4642      	mov	r2, r8
 80030b6:	189b      	adds	r3, r3, r2
 80030b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80030bc:	464b      	mov	r3, r9
 80030be:	460a      	mov	r2, r1
 80030c0:	eb42 0303 	adc.w	r3, r2, r3
 80030c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80030c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80030d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80030d4:	f04f 0200 	mov.w	r2, #0
 80030d8:	f04f 0300 	mov.w	r3, #0
 80030dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80030e0:	4649      	mov	r1, r9
 80030e2:	008b      	lsls	r3, r1, #2
 80030e4:	4641      	mov	r1, r8
 80030e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030ea:	4641      	mov	r1, r8
 80030ec:	008a      	lsls	r2, r1, #2
 80030ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80030f2:	f7fd f8bf 	bl	8000274 <__aeabi_uldivmod>
 80030f6:	4602      	mov	r2, r0
 80030f8:	460b      	mov	r3, r1
 80030fa:	4b39      	ldr	r3, [pc, #228]	; (80031e0 <UART_SetConfig+0x4e4>)
 80030fc:	fba3 1302 	umull	r1, r3, r3, r2
 8003100:	095b      	lsrs	r3, r3, #5
 8003102:	2164      	movs	r1, #100	; 0x64
 8003104:	fb01 f303 	mul.w	r3, r1, r3
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	011b      	lsls	r3, r3, #4
 800310c:	3332      	adds	r3, #50	; 0x32
 800310e:	4a34      	ldr	r2, [pc, #208]	; (80031e0 <UART_SetConfig+0x4e4>)
 8003110:	fba2 2303 	umull	r2, r3, r2, r3
 8003114:	095b      	lsrs	r3, r3, #5
 8003116:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800311a:	441c      	add	r4, r3
 800311c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003120:	2200      	movs	r2, #0
 8003122:	673b      	str	r3, [r7, #112]	; 0x70
 8003124:	677a      	str	r2, [r7, #116]	; 0x74
 8003126:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800312a:	4642      	mov	r2, r8
 800312c:	464b      	mov	r3, r9
 800312e:	1891      	adds	r1, r2, r2
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	415b      	adcs	r3, r3
 8003134:	60fb      	str	r3, [r7, #12]
 8003136:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800313a:	4641      	mov	r1, r8
 800313c:	1851      	adds	r1, r2, r1
 800313e:	6039      	str	r1, [r7, #0]
 8003140:	4649      	mov	r1, r9
 8003142:	414b      	adcs	r3, r1
 8003144:	607b      	str	r3, [r7, #4]
 8003146:	f04f 0200 	mov.w	r2, #0
 800314a:	f04f 0300 	mov.w	r3, #0
 800314e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003152:	4659      	mov	r1, fp
 8003154:	00cb      	lsls	r3, r1, #3
 8003156:	4651      	mov	r1, sl
 8003158:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800315c:	4651      	mov	r1, sl
 800315e:	00ca      	lsls	r2, r1, #3
 8003160:	4610      	mov	r0, r2
 8003162:	4619      	mov	r1, r3
 8003164:	4603      	mov	r3, r0
 8003166:	4642      	mov	r2, r8
 8003168:	189b      	adds	r3, r3, r2
 800316a:	66bb      	str	r3, [r7, #104]	; 0x68
 800316c:	464b      	mov	r3, r9
 800316e:	460a      	mov	r2, r1
 8003170:	eb42 0303 	adc.w	r3, r2, r3
 8003174:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	663b      	str	r3, [r7, #96]	; 0x60
 8003180:	667a      	str	r2, [r7, #100]	; 0x64
 8003182:	f04f 0200 	mov.w	r2, #0
 8003186:	f04f 0300 	mov.w	r3, #0
 800318a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800318e:	4649      	mov	r1, r9
 8003190:	008b      	lsls	r3, r1, #2
 8003192:	4641      	mov	r1, r8
 8003194:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003198:	4641      	mov	r1, r8
 800319a:	008a      	lsls	r2, r1, #2
 800319c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80031a0:	f7fd f868 	bl	8000274 <__aeabi_uldivmod>
 80031a4:	4602      	mov	r2, r0
 80031a6:	460b      	mov	r3, r1
 80031a8:	4b0d      	ldr	r3, [pc, #52]	; (80031e0 <UART_SetConfig+0x4e4>)
 80031aa:	fba3 1302 	umull	r1, r3, r3, r2
 80031ae:	095b      	lsrs	r3, r3, #5
 80031b0:	2164      	movs	r1, #100	; 0x64
 80031b2:	fb01 f303 	mul.w	r3, r1, r3
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	011b      	lsls	r3, r3, #4
 80031ba:	3332      	adds	r3, #50	; 0x32
 80031bc:	4a08      	ldr	r2, [pc, #32]	; (80031e0 <UART_SetConfig+0x4e4>)
 80031be:	fba2 2303 	umull	r2, r3, r2, r3
 80031c2:	095b      	lsrs	r3, r3, #5
 80031c4:	f003 020f 	and.w	r2, r3, #15
 80031c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4422      	add	r2, r4
 80031d0:	609a      	str	r2, [r3, #8]
}
 80031d2:	bf00      	nop
 80031d4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80031d8:	46bd      	mov	sp, r7
 80031da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031de:	bf00      	nop
 80031e0:	51eb851f 	.word	0x51eb851f

080031e4 <__errno>:
 80031e4:	4b01      	ldr	r3, [pc, #4]	; (80031ec <__errno+0x8>)
 80031e6:	6818      	ldr	r0, [r3, #0]
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	2000000c 	.word	0x2000000c

080031f0 <__libc_init_array>:
 80031f0:	b570      	push	{r4, r5, r6, lr}
 80031f2:	4d0d      	ldr	r5, [pc, #52]	; (8003228 <__libc_init_array+0x38>)
 80031f4:	4c0d      	ldr	r4, [pc, #52]	; (800322c <__libc_init_array+0x3c>)
 80031f6:	1b64      	subs	r4, r4, r5
 80031f8:	10a4      	asrs	r4, r4, #2
 80031fa:	2600      	movs	r6, #0
 80031fc:	42a6      	cmp	r6, r4
 80031fe:	d109      	bne.n	8003214 <__libc_init_array+0x24>
 8003200:	4d0b      	ldr	r5, [pc, #44]	; (8003230 <__libc_init_array+0x40>)
 8003202:	4c0c      	ldr	r4, [pc, #48]	; (8003234 <__libc_init_array+0x44>)
 8003204:	f000 fd1e 	bl	8003c44 <_init>
 8003208:	1b64      	subs	r4, r4, r5
 800320a:	10a4      	asrs	r4, r4, #2
 800320c:	2600      	movs	r6, #0
 800320e:	42a6      	cmp	r6, r4
 8003210:	d105      	bne.n	800321e <__libc_init_array+0x2e>
 8003212:	bd70      	pop	{r4, r5, r6, pc}
 8003214:	f855 3b04 	ldr.w	r3, [r5], #4
 8003218:	4798      	blx	r3
 800321a:	3601      	adds	r6, #1
 800321c:	e7ee      	b.n	80031fc <__libc_init_array+0xc>
 800321e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003222:	4798      	blx	r3
 8003224:	3601      	adds	r6, #1
 8003226:	e7f2      	b.n	800320e <__libc_init_array+0x1e>
 8003228:	08003ce8 	.word	0x08003ce8
 800322c:	08003ce8 	.word	0x08003ce8
 8003230:	08003ce8 	.word	0x08003ce8
 8003234:	08003cec 	.word	0x08003cec

08003238 <memset>:
 8003238:	4402      	add	r2, r0
 800323a:	4603      	mov	r3, r0
 800323c:	4293      	cmp	r3, r2
 800323e:	d100      	bne.n	8003242 <memset+0xa>
 8003240:	4770      	bx	lr
 8003242:	f803 1b01 	strb.w	r1, [r3], #1
 8003246:	e7f9      	b.n	800323c <memset+0x4>

08003248 <_puts_r>:
 8003248:	b570      	push	{r4, r5, r6, lr}
 800324a:	460e      	mov	r6, r1
 800324c:	4605      	mov	r5, r0
 800324e:	b118      	cbz	r0, 8003258 <_puts_r+0x10>
 8003250:	6983      	ldr	r3, [r0, #24]
 8003252:	b90b      	cbnz	r3, 8003258 <_puts_r+0x10>
 8003254:	f000 fa48 	bl	80036e8 <__sinit>
 8003258:	69ab      	ldr	r3, [r5, #24]
 800325a:	68ac      	ldr	r4, [r5, #8]
 800325c:	b913      	cbnz	r3, 8003264 <_puts_r+0x1c>
 800325e:	4628      	mov	r0, r5
 8003260:	f000 fa42 	bl	80036e8 <__sinit>
 8003264:	4b2c      	ldr	r3, [pc, #176]	; (8003318 <_puts_r+0xd0>)
 8003266:	429c      	cmp	r4, r3
 8003268:	d120      	bne.n	80032ac <_puts_r+0x64>
 800326a:	686c      	ldr	r4, [r5, #4]
 800326c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800326e:	07db      	lsls	r3, r3, #31
 8003270:	d405      	bmi.n	800327e <_puts_r+0x36>
 8003272:	89a3      	ldrh	r3, [r4, #12]
 8003274:	0598      	lsls	r0, r3, #22
 8003276:	d402      	bmi.n	800327e <_puts_r+0x36>
 8003278:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800327a:	f000 fad3 	bl	8003824 <__retarget_lock_acquire_recursive>
 800327e:	89a3      	ldrh	r3, [r4, #12]
 8003280:	0719      	lsls	r1, r3, #28
 8003282:	d51d      	bpl.n	80032c0 <_puts_r+0x78>
 8003284:	6923      	ldr	r3, [r4, #16]
 8003286:	b1db      	cbz	r3, 80032c0 <_puts_r+0x78>
 8003288:	3e01      	subs	r6, #1
 800328a:	68a3      	ldr	r3, [r4, #8]
 800328c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003290:	3b01      	subs	r3, #1
 8003292:	60a3      	str	r3, [r4, #8]
 8003294:	bb39      	cbnz	r1, 80032e6 <_puts_r+0x9e>
 8003296:	2b00      	cmp	r3, #0
 8003298:	da38      	bge.n	800330c <_puts_r+0xc4>
 800329a:	4622      	mov	r2, r4
 800329c:	210a      	movs	r1, #10
 800329e:	4628      	mov	r0, r5
 80032a0:	f000 f848 	bl	8003334 <__swbuf_r>
 80032a4:	3001      	adds	r0, #1
 80032a6:	d011      	beq.n	80032cc <_puts_r+0x84>
 80032a8:	250a      	movs	r5, #10
 80032aa:	e011      	b.n	80032d0 <_puts_r+0x88>
 80032ac:	4b1b      	ldr	r3, [pc, #108]	; (800331c <_puts_r+0xd4>)
 80032ae:	429c      	cmp	r4, r3
 80032b0:	d101      	bne.n	80032b6 <_puts_r+0x6e>
 80032b2:	68ac      	ldr	r4, [r5, #8]
 80032b4:	e7da      	b.n	800326c <_puts_r+0x24>
 80032b6:	4b1a      	ldr	r3, [pc, #104]	; (8003320 <_puts_r+0xd8>)
 80032b8:	429c      	cmp	r4, r3
 80032ba:	bf08      	it	eq
 80032bc:	68ec      	ldreq	r4, [r5, #12]
 80032be:	e7d5      	b.n	800326c <_puts_r+0x24>
 80032c0:	4621      	mov	r1, r4
 80032c2:	4628      	mov	r0, r5
 80032c4:	f000 f888 	bl	80033d8 <__swsetup_r>
 80032c8:	2800      	cmp	r0, #0
 80032ca:	d0dd      	beq.n	8003288 <_puts_r+0x40>
 80032cc:	f04f 35ff 	mov.w	r5, #4294967295
 80032d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80032d2:	07da      	lsls	r2, r3, #31
 80032d4:	d405      	bmi.n	80032e2 <_puts_r+0x9a>
 80032d6:	89a3      	ldrh	r3, [r4, #12]
 80032d8:	059b      	lsls	r3, r3, #22
 80032da:	d402      	bmi.n	80032e2 <_puts_r+0x9a>
 80032dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80032de:	f000 faa2 	bl	8003826 <__retarget_lock_release_recursive>
 80032e2:	4628      	mov	r0, r5
 80032e4:	bd70      	pop	{r4, r5, r6, pc}
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	da04      	bge.n	80032f4 <_puts_r+0xac>
 80032ea:	69a2      	ldr	r2, [r4, #24]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	dc06      	bgt.n	80032fe <_puts_r+0xb6>
 80032f0:	290a      	cmp	r1, #10
 80032f2:	d004      	beq.n	80032fe <_puts_r+0xb6>
 80032f4:	6823      	ldr	r3, [r4, #0]
 80032f6:	1c5a      	adds	r2, r3, #1
 80032f8:	6022      	str	r2, [r4, #0]
 80032fa:	7019      	strb	r1, [r3, #0]
 80032fc:	e7c5      	b.n	800328a <_puts_r+0x42>
 80032fe:	4622      	mov	r2, r4
 8003300:	4628      	mov	r0, r5
 8003302:	f000 f817 	bl	8003334 <__swbuf_r>
 8003306:	3001      	adds	r0, #1
 8003308:	d1bf      	bne.n	800328a <_puts_r+0x42>
 800330a:	e7df      	b.n	80032cc <_puts_r+0x84>
 800330c:	6823      	ldr	r3, [r4, #0]
 800330e:	250a      	movs	r5, #10
 8003310:	1c5a      	adds	r2, r3, #1
 8003312:	6022      	str	r2, [r4, #0]
 8003314:	701d      	strb	r5, [r3, #0]
 8003316:	e7db      	b.n	80032d0 <_puts_r+0x88>
 8003318:	08003ca0 	.word	0x08003ca0
 800331c:	08003cc0 	.word	0x08003cc0
 8003320:	08003c80 	.word	0x08003c80

08003324 <puts>:
 8003324:	4b02      	ldr	r3, [pc, #8]	; (8003330 <puts+0xc>)
 8003326:	4601      	mov	r1, r0
 8003328:	6818      	ldr	r0, [r3, #0]
 800332a:	f7ff bf8d 	b.w	8003248 <_puts_r>
 800332e:	bf00      	nop
 8003330:	2000000c 	.word	0x2000000c

08003334 <__swbuf_r>:
 8003334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003336:	460e      	mov	r6, r1
 8003338:	4614      	mov	r4, r2
 800333a:	4605      	mov	r5, r0
 800333c:	b118      	cbz	r0, 8003346 <__swbuf_r+0x12>
 800333e:	6983      	ldr	r3, [r0, #24]
 8003340:	b90b      	cbnz	r3, 8003346 <__swbuf_r+0x12>
 8003342:	f000 f9d1 	bl	80036e8 <__sinit>
 8003346:	4b21      	ldr	r3, [pc, #132]	; (80033cc <__swbuf_r+0x98>)
 8003348:	429c      	cmp	r4, r3
 800334a:	d12b      	bne.n	80033a4 <__swbuf_r+0x70>
 800334c:	686c      	ldr	r4, [r5, #4]
 800334e:	69a3      	ldr	r3, [r4, #24]
 8003350:	60a3      	str	r3, [r4, #8]
 8003352:	89a3      	ldrh	r3, [r4, #12]
 8003354:	071a      	lsls	r2, r3, #28
 8003356:	d52f      	bpl.n	80033b8 <__swbuf_r+0x84>
 8003358:	6923      	ldr	r3, [r4, #16]
 800335a:	b36b      	cbz	r3, 80033b8 <__swbuf_r+0x84>
 800335c:	6923      	ldr	r3, [r4, #16]
 800335e:	6820      	ldr	r0, [r4, #0]
 8003360:	1ac0      	subs	r0, r0, r3
 8003362:	6963      	ldr	r3, [r4, #20]
 8003364:	b2f6      	uxtb	r6, r6
 8003366:	4283      	cmp	r3, r0
 8003368:	4637      	mov	r7, r6
 800336a:	dc04      	bgt.n	8003376 <__swbuf_r+0x42>
 800336c:	4621      	mov	r1, r4
 800336e:	4628      	mov	r0, r5
 8003370:	f000 f926 	bl	80035c0 <_fflush_r>
 8003374:	bb30      	cbnz	r0, 80033c4 <__swbuf_r+0x90>
 8003376:	68a3      	ldr	r3, [r4, #8]
 8003378:	3b01      	subs	r3, #1
 800337a:	60a3      	str	r3, [r4, #8]
 800337c:	6823      	ldr	r3, [r4, #0]
 800337e:	1c5a      	adds	r2, r3, #1
 8003380:	6022      	str	r2, [r4, #0]
 8003382:	701e      	strb	r6, [r3, #0]
 8003384:	6963      	ldr	r3, [r4, #20]
 8003386:	3001      	adds	r0, #1
 8003388:	4283      	cmp	r3, r0
 800338a:	d004      	beq.n	8003396 <__swbuf_r+0x62>
 800338c:	89a3      	ldrh	r3, [r4, #12]
 800338e:	07db      	lsls	r3, r3, #31
 8003390:	d506      	bpl.n	80033a0 <__swbuf_r+0x6c>
 8003392:	2e0a      	cmp	r6, #10
 8003394:	d104      	bne.n	80033a0 <__swbuf_r+0x6c>
 8003396:	4621      	mov	r1, r4
 8003398:	4628      	mov	r0, r5
 800339a:	f000 f911 	bl	80035c0 <_fflush_r>
 800339e:	b988      	cbnz	r0, 80033c4 <__swbuf_r+0x90>
 80033a0:	4638      	mov	r0, r7
 80033a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033a4:	4b0a      	ldr	r3, [pc, #40]	; (80033d0 <__swbuf_r+0x9c>)
 80033a6:	429c      	cmp	r4, r3
 80033a8:	d101      	bne.n	80033ae <__swbuf_r+0x7a>
 80033aa:	68ac      	ldr	r4, [r5, #8]
 80033ac:	e7cf      	b.n	800334e <__swbuf_r+0x1a>
 80033ae:	4b09      	ldr	r3, [pc, #36]	; (80033d4 <__swbuf_r+0xa0>)
 80033b0:	429c      	cmp	r4, r3
 80033b2:	bf08      	it	eq
 80033b4:	68ec      	ldreq	r4, [r5, #12]
 80033b6:	e7ca      	b.n	800334e <__swbuf_r+0x1a>
 80033b8:	4621      	mov	r1, r4
 80033ba:	4628      	mov	r0, r5
 80033bc:	f000 f80c 	bl	80033d8 <__swsetup_r>
 80033c0:	2800      	cmp	r0, #0
 80033c2:	d0cb      	beq.n	800335c <__swbuf_r+0x28>
 80033c4:	f04f 37ff 	mov.w	r7, #4294967295
 80033c8:	e7ea      	b.n	80033a0 <__swbuf_r+0x6c>
 80033ca:	bf00      	nop
 80033cc:	08003ca0 	.word	0x08003ca0
 80033d0:	08003cc0 	.word	0x08003cc0
 80033d4:	08003c80 	.word	0x08003c80

080033d8 <__swsetup_r>:
 80033d8:	4b32      	ldr	r3, [pc, #200]	; (80034a4 <__swsetup_r+0xcc>)
 80033da:	b570      	push	{r4, r5, r6, lr}
 80033dc:	681d      	ldr	r5, [r3, #0]
 80033de:	4606      	mov	r6, r0
 80033e0:	460c      	mov	r4, r1
 80033e2:	b125      	cbz	r5, 80033ee <__swsetup_r+0x16>
 80033e4:	69ab      	ldr	r3, [r5, #24]
 80033e6:	b913      	cbnz	r3, 80033ee <__swsetup_r+0x16>
 80033e8:	4628      	mov	r0, r5
 80033ea:	f000 f97d 	bl	80036e8 <__sinit>
 80033ee:	4b2e      	ldr	r3, [pc, #184]	; (80034a8 <__swsetup_r+0xd0>)
 80033f0:	429c      	cmp	r4, r3
 80033f2:	d10f      	bne.n	8003414 <__swsetup_r+0x3c>
 80033f4:	686c      	ldr	r4, [r5, #4]
 80033f6:	89a3      	ldrh	r3, [r4, #12]
 80033f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80033fc:	0719      	lsls	r1, r3, #28
 80033fe:	d42c      	bmi.n	800345a <__swsetup_r+0x82>
 8003400:	06dd      	lsls	r5, r3, #27
 8003402:	d411      	bmi.n	8003428 <__swsetup_r+0x50>
 8003404:	2309      	movs	r3, #9
 8003406:	6033      	str	r3, [r6, #0]
 8003408:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800340c:	81a3      	strh	r3, [r4, #12]
 800340e:	f04f 30ff 	mov.w	r0, #4294967295
 8003412:	e03e      	b.n	8003492 <__swsetup_r+0xba>
 8003414:	4b25      	ldr	r3, [pc, #148]	; (80034ac <__swsetup_r+0xd4>)
 8003416:	429c      	cmp	r4, r3
 8003418:	d101      	bne.n	800341e <__swsetup_r+0x46>
 800341a:	68ac      	ldr	r4, [r5, #8]
 800341c:	e7eb      	b.n	80033f6 <__swsetup_r+0x1e>
 800341e:	4b24      	ldr	r3, [pc, #144]	; (80034b0 <__swsetup_r+0xd8>)
 8003420:	429c      	cmp	r4, r3
 8003422:	bf08      	it	eq
 8003424:	68ec      	ldreq	r4, [r5, #12]
 8003426:	e7e6      	b.n	80033f6 <__swsetup_r+0x1e>
 8003428:	0758      	lsls	r0, r3, #29
 800342a:	d512      	bpl.n	8003452 <__swsetup_r+0x7a>
 800342c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800342e:	b141      	cbz	r1, 8003442 <__swsetup_r+0x6a>
 8003430:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003434:	4299      	cmp	r1, r3
 8003436:	d002      	beq.n	800343e <__swsetup_r+0x66>
 8003438:	4630      	mov	r0, r6
 800343a:	f000 fa5b 	bl	80038f4 <_free_r>
 800343e:	2300      	movs	r3, #0
 8003440:	6363      	str	r3, [r4, #52]	; 0x34
 8003442:	89a3      	ldrh	r3, [r4, #12]
 8003444:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003448:	81a3      	strh	r3, [r4, #12]
 800344a:	2300      	movs	r3, #0
 800344c:	6063      	str	r3, [r4, #4]
 800344e:	6923      	ldr	r3, [r4, #16]
 8003450:	6023      	str	r3, [r4, #0]
 8003452:	89a3      	ldrh	r3, [r4, #12]
 8003454:	f043 0308 	orr.w	r3, r3, #8
 8003458:	81a3      	strh	r3, [r4, #12]
 800345a:	6923      	ldr	r3, [r4, #16]
 800345c:	b94b      	cbnz	r3, 8003472 <__swsetup_r+0x9a>
 800345e:	89a3      	ldrh	r3, [r4, #12]
 8003460:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003464:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003468:	d003      	beq.n	8003472 <__swsetup_r+0x9a>
 800346a:	4621      	mov	r1, r4
 800346c:	4630      	mov	r0, r6
 800346e:	f000 fa01 	bl	8003874 <__smakebuf_r>
 8003472:	89a0      	ldrh	r0, [r4, #12]
 8003474:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003478:	f010 0301 	ands.w	r3, r0, #1
 800347c:	d00a      	beq.n	8003494 <__swsetup_r+0xbc>
 800347e:	2300      	movs	r3, #0
 8003480:	60a3      	str	r3, [r4, #8]
 8003482:	6963      	ldr	r3, [r4, #20]
 8003484:	425b      	negs	r3, r3
 8003486:	61a3      	str	r3, [r4, #24]
 8003488:	6923      	ldr	r3, [r4, #16]
 800348a:	b943      	cbnz	r3, 800349e <__swsetup_r+0xc6>
 800348c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003490:	d1ba      	bne.n	8003408 <__swsetup_r+0x30>
 8003492:	bd70      	pop	{r4, r5, r6, pc}
 8003494:	0781      	lsls	r1, r0, #30
 8003496:	bf58      	it	pl
 8003498:	6963      	ldrpl	r3, [r4, #20]
 800349a:	60a3      	str	r3, [r4, #8]
 800349c:	e7f4      	b.n	8003488 <__swsetup_r+0xb0>
 800349e:	2000      	movs	r0, #0
 80034a0:	e7f7      	b.n	8003492 <__swsetup_r+0xba>
 80034a2:	bf00      	nop
 80034a4:	2000000c 	.word	0x2000000c
 80034a8:	08003ca0 	.word	0x08003ca0
 80034ac:	08003cc0 	.word	0x08003cc0
 80034b0:	08003c80 	.word	0x08003c80

080034b4 <__sflush_r>:
 80034b4:	898a      	ldrh	r2, [r1, #12]
 80034b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034ba:	4605      	mov	r5, r0
 80034bc:	0710      	lsls	r0, r2, #28
 80034be:	460c      	mov	r4, r1
 80034c0:	d458      	bmi.n	8003574 <__sflush_r+0xc0>
 80034c2:	684b      	ldr	r3, [r1, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	dc05      	bgt.n	80034d4 <__sflush_r+0x20>
 80034c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	dc02      	bgt.n	80034d4 <__sflush_r+0x20>
 80034ce:	2000      	movs	r0, #0
 80034d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80034d6:	2e00      	cmp	r6, #0
 80034d8:	d0f9      	beq.n	80034ce <__sflush_r+0x1a>
 80034da:	2300      	movs	r3, #0
 80034dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80034e0:	682f      	ldr	r7, [r5, #0]
 80034e2:	602b      	str	r3, [r5, #0]
 80034e4:	d032      	beq.n	800354c <__sflush_r+0x98>
 80034e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80034e8:	89a3      	ldrh	r3, [r4, #12]
 80034ea:	075a      	lsls	r2, r3, #29
 80034ec:	d505      	bpl.n	80034fa <__sflush_r+0x46>
 80034ee:	6863      	ldr	r3, [r4, #4]
 80034f0:	1ac0      	subs	r0, r0, r3
 80034f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80034f4:	b10b      	cbz	r3, 80034fa <__sflush_r+0x46>
 80034f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80034f8:	1ac0      	subs	r0, r0, r3
 80034fa:	2300      	movs	r3, #0
 80034fc:	4602      	mov	r2, r0
 80034fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003500:	6a21      	ldr	r1, [r4, #32]
 8003502:	4628      	mov	r0, r5
 8003504:	47b0      	blx	r6
 8003506:	1c43      	adds	r3, r0, #1
 8003508:	89a3      	ldrh	r3, [r4, #12]
 800350a:	d106      	bne.n	800351a <__sflush_r+0x66>
 800350c:	6829      	ldr	r1, [r5, #0]
 800350e:	291d      	cmp	r1, #29
 8003510:	d82c      	bhi.n	800356c <__sflush_r+0xb8>
 8003512:	4a2a      	ldr	r2, [pc, #168]	; (80035bc <__sflush_r+0x108>)
 8003514:	40ca      	lsrs	r2, r1
 8003516:	07d6      	lsls	r6, r2, #31
 8003518:	d528      	bpl.n	800356c <__sflush_r+0xb8>
 800351a:	2200      	movs	r2, #0
 800351c:	6062      	str	r2, [r4, #4]
 800351e:	04d9      	lsls	r1, r3, #19
 8003520:	6922      	ldr	r2, [r4, #16]
 8003522:	6022      	str	r2, [r4, #0]
 8003524:	d504      	bpl.n	8003530 <__sflush_r+0x7c>
 8003526:	1c42      	adds	r2, r0, #1
 8003528:	d101      	bne.n	800352e <__sflush_r+0x7a>
 800352a:	682b      	ldr	r3, [r5, #0]
 800352c:	b903      	cbnz	r3, 8003530 <__sflush_r+0x7c>
 800352e:	6560      	str	r0, [r4, #84]	; 0x54
 8003530:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003532:	602f      	str	r7, [r5, #0]
 8003534:	2900      	cmp	r1, #0
 8003536:	d0ca      	beq.n	80034ce <__sflush_r+0x1a>
 8003538:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800353c:	4299      	cmp	r1, r3
 800353e:	d002      	beq.n	8003546 <__sflush_r+0x92>
 8003540:	4628      	mov	r0, r5
 8003542:	f000 f9d7 	bl	80038f4 <_free_r>
 8003546:	2000      	movs	r0, #0
 8003548:	6360      	str	r0, [r4, #52]	; 0x34
 800354a:	e7c1      	b.n	80034d0 <__sflush_r+0x1c>
 800354c:	6a21      	ldr	r1, [r4, #32]
 800354e:	2301      	movs	r3, #1
 8003550:	4628      	mov	r0, r5
 8003552:	47b0      	blx	r6
 8003554:	1c41      	adds	r1, r0, #1
 8003556:	d1c7      	bne.n	80034e8 <__sflush_r+0x34>
 8003558:	682b      	ldr	r3, [r5, #0]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d0c4      	beq.n	80034e8 <__sflush_r+0x34>
 800355e:	2b1d      	cmp	r3, #29
 8003560:	d001      	beq.n	8003566 <__sflush_r+0xb2>
 8003562:	2b16      	cmp	r3, #22
 8003564:	d101      	bne.n	800356a <__sflush_r+0xb6>
 8003566:	602f      	str	r7, [r5, #0]
 8003568:	e7b1      	b.n	80034ce <__sflush_r+0x1a>
 800356a:	89a3      	ldrh	r3, [r4, #12]
 800356c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003570:	81a3      	strh	r3, [r4, #12]
 8003572:	e7ad      	b.n	80034d0 <__sflush_r+0x1c>
 8003574:	690f      	ldr	r7, [r1, #16]
 8003576:	2f00      	cmp	r7, #0
 8003578:	d0a9      	beq.n	80034ce <__sflush_r+0x1a>
 800357a:	0793      	lsls	r3, r2, #30
 800357c:	680e      	ldr	r6, [r1, #0]
 800357e:	bf08      	it	eq
 8003580:	694b      	ldreq	r3, [r1, #20]
 8003582:	600f      	str	r7, [r1, #0]
 8003584:	bf18      	it	ne
 8003586:	2300      	movne	r3, #0
 8003588:	eba6 0807 	sub.w	r8, r6, r7
 800358c:	608b      	str	r3, [r1, #8]
 800358e:	f1b8 0f00 	cmp.w	r8, #0
 8003592:	dd9c      	ble.n	80034ce <__sflush_r+0x1a>
 8003594:	6a21      	ldr	r1, [r4, #32]
 8003596:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003598:	4643      	mov	r3, r8
 800359a:	463a      	mov	r2, r7
 800359c:	4628      	mov	r0, r5
 800359e:	47b0      	blx	r6
 80035a0:	2800      	cmp	r0, #0
 80035a2:	dc06      	bgt.n	80035b2 <__sflush_r+0xfe>
 80035a4:	89a3      	ldrh	r3, [r4, #12]
 80035a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035aa:	81a3      	strh	r3, [r4, #12]
 80035ac:	f04f 30ff 	mov.w	r0, #4294967295
 80035b0:	e78e      	b.n	80034d0 <__sflush_r+0x1c>
 80035b2:	4407      	add	r7, r0
 80035b4:	eba8 0800 	sub.w	r8, r8, r0
 80035b8:	e7e9      	b.n	800358e <__sflush_r+0xda>
 80035ba:	bf00      	nop
 80035bc:	20400001 	.word	0x20400001

080035c0 <_fflush_r>:
 80035c0:	b538      	push	{r3, r4, r5, lr}
 80035c2:	690b      	ldr	r3, [r1, #16]
 80035c4:	4605      	mov	r5, r0
 80035c6:	460c      	mov	r4, r1
 80035c8:	b913      	cbnz	r3, 80035d0 <_fflush_r+0x10>
 80035ca:	2500      	movs	r5, #0
 80035cc:	4628      	mov	r0, r5
 80035ce:	bd38      	pop	{r3, r4, r5, pc}
 80035d0:	b118      	cbz	r0, 80035da <_fflush_r+0x1a>
 80035d2:	6983      	ldr	r3, [r0, #24]
 80035d4:	b90b      	cbnz	r3, 80035da <_fflush_r+0x1a>
 80035d6:	f000 f887 	bl	80036e8 <__sinit>
 80035da:	4b14      	ldr	r3, [pc, #80]	; (800362c <_fflush_r+0x6c>)
 80035dc:	429c      	cmp	r4, r3
 80035de:	d11b      	bne.n	8003618 <_fflush_r+0x58>
 80035e0:	686c      	ldr	r4, [r5, #4]
 80035e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d0ef      	beq.n	80035ca <_fflush_r+0xa>
 80035ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80035ec:	07d0      	lsls	r0, r2, #31
 80035ee:	d404      	bmi.n	80035fa <_fflush_r+0x3a>
 80035f0:	0599      	lsls	r1, r3, #22
 80035f2:	d402      	bmi.n	80035fa <_fflush_r+0x3a>
 80035f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035f6:	f000 f915 	bl	8003824 <__retarget_lock_acquire_recursive>
 80035fa:	4628      	mov	r0, r5
 80035fc:	4621      	mov	r1, r4
 80035fe:	f7ff ff59 	bl	80034b4 <__sflush_r>
 8003602:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003604:	07da      	lsls	r2, r3, #31
 8003606:	4605      	mov	r5, r0
 8003608:	d4e0      	bmi.n	80035cc <_fflush_r+0xc>
 800360a:	89a3      	ldrh	r3, [r4, #12]
 800360c:	059b      	lsls	r3, r3, #22
 800360e:	d4dd      	bmi.n	80035cc <_fflush_r+0xc>
 8003610:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003612:	f000 f908 	bl	8003826 <__retarget_lock_release_recursive>
 8003616:	e7d9      	b.n	80035cc <_fflush_r+0xc>
 8003618:	4b05      	ldr	r3, [pc, #20]	; (8003630 <_fflush_r+0x70>)
 800361a:	429c      	cmp	r4, r3
 800361c:	d101      	bne.n	8003622 <_fflush_r+0x62>
 800361e:	68ac      	ldr	r4, [r5, #8]
 8003620:	e7df      	b.n	80035e2 <_fflush_r+0x22>
 8003622:	4b04      	ldr	r3, [pc, #16]	; (8003634 <_fflush_r+0x74>)
 8003624:	429c      	cmp	r4, r3
 8003626:	bf08      	it	eq
 8003628:	68ec      	ldreq	r4, [r5, #12]
 800362a:	e7da      	b.n	80035e2 <_fflush_r+0x22>
 800362c:	08003ca0 	.word	0x08003ca0
 8003630:	08003cc0 	.word	0x08003cc0
 8003634:	08003c80 	.word	0x08003c80

08003638 <std>:
 8003638:	2300      	movs	r3, #0
 800363a:	b510      	push	{r4, lr}
 800363c:	4604      	mov	r4, r0
 800363e:	e9c0 3300 	strd	r3, r3, [r0]
 8003642:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003646:	6083      	str	r3, [r0, #8]
 8003648:	8181      	strh	r1, [r0, #12]
 800364a:	6643      	str	r3, [r0, #100]	; 0x64
 800364c:	81c2      	strh	r2, [r0, #14]
 800364e:	6183      	str	r3, [r0, #24]
 8003650:	4619      	mov	r1, r3
 8003652:	2208      	movs	r2, #8
 8003654:	305c      	adds	r0, #92	; 0x5c
 8003656:	f7ff fdef 	bl	8003238 <memset>
 800365a:	4b05      	ldr	r3, [pc, #20]	; (8003670 <std+0x38>)
 800365c:	6263      	str	r3, [r4, #36]	; 0x24
 800365e:	4b05      	ldr	r3, [pc, #20]	; (8003674 <std+0x3c>)
 8003660:	62a3      	str	r3, [r4, #40]	; 0x28
 8003662:	4b05      	ldr	r3, [pc, #20]	; (8003678 <std+0x40>)
 8003664:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003666:	4b05      	ldr	r3, [pc, #20]	; (800367c <std+0x44>)
 8003668:	6224      	str	r4, [r4, #32]
 800366a:	6323      	str	r3, [r4, #48]	; 0x30
 800366c:	bd10      	pop	{r4, pc}
 800366e:	bf00      	nop
 8003670:	08003ad5 	.word	0x08003ad5
 8003674:	08003af7 	.word	0x08003af7
 8003678:	08003b2f 	.word	0x08003b2f
 800367c:	08003b53 	.word	0x08003b53

08003680 <_cleanup_r>:
 8003680:	4901      	ldr	r1, [pc, #4]	; (8003688 <_cleanup_r+0x8>)
 8003682:	f000 b8af 	b.w	80037e4 <_fwalk_reent>
 8003686:	bf00      	nop
 8003688:	080035c1 	.word	0x080035c1

0800368c <__sfmoreglue>:
 800368c:	b570      	push	{r4, r5, r6, lr}
 800368e:	2268      	movs	r2, #104	; 0x68
 8003690:	1e4d      	subs	r5, r1, #1
 8003692:	4355      	muls	r5, r2
 8003694:	460e      	mov	r6, r1
 8003696:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800369a:	f000 f997 	bl	80039cc <_malloc_r>
 800369e:	4604      	mov	r4, r0
 80036a0:	b140      	cbz	r0, 80036b4 <__sfmoreglue+0x28>
 80036a2:	2100      	movs	r1, #0
 80036a4:	e9c0 1600 	strd	r1, r6, [r0]
 80036a8:	300c      	adds	r0, #12
 80036aa:	60a0      	str	r0, [r4, #8]
 80036ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80036b0:	f7ff fdc2 	bl	8003238 <memset>
 80036b4:	4620      	mov	r0, r4
 80036b6:	bd70      	pop	{r4, r5, r6, pc}

080036b8 <__sfp_lock_acquire>:
 80036b8:	4801      	ldr	r0, [pc, #4]	; (80036c0 <__sfp_lock_acquire+0x8>)
 80036ba:	f000 b8b3 	b.w	8003824 <__retarget_lock_acquire_recursive>
 80036be:	bf00      	nop
 80036c0:	20000151 	.word	0x20000151

080036c4 <__sfp_lock_release>:
 80036c4:	4801      	ldr	r0, [pc, #4]	; (80036cc <__sfp_lock_release+0x8>)
 80036c6:	f000 b8ae 	b.w	8003826 <__retarget_lock_release_recursive>
 80036ca:	bf00      	nop
 80036cc:	20000151 	.word	0x20000151

080036d0 <__sinit_lock_acquire>:
 80036d0:	4801      	ldr	r0, [pc, #4]	; (80036d8 <__sinit_lock_acquire+0x8>)
 80036d2:	f000 b8a7 	b.w	8003824 <__retarget_lock_acquire_recursive>
 80036d6:	bf00      	nop
 80036d8:	20000152 	.word	0x20000152

080036dc <__sinit_lock_release>:
 80036dc:	4801      	ldr	r0, [pc, #4]	; (80036e4 <__sinit_lock_release+0x8>)
 80036de:	f000 b8a2 	b.w	8003826 <__retarget_lock_release_recursive>
 80036e2:	bf00      	nop
 80036e4:	20000152 	.word	0x20000152

080036e8 <__sinit>:
 80036e8:	b510      	push	{r4, lr}
 80036ea:	4604      	mov	r4, r0
 80036ec:	f7ff fff0 	bl	80036d0 <__sinit_lock_acquire>
 80036f0:	69a3      	ldr	r3, [r4, #24]
 80036f2:	b11b      	cbz	r3, 80036fc <__sinit+0x14>
 80036f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036f8:	f7ff bff0 	b.w	80036dc <__sinit_lock_release>
 80036fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003700:	6523      	str	r3, [r4, #80]	; 0x50
 8003702:	4b13      	ldr	r3, [pc, #76]	; (8003750 <__sinit+0x68>)
 8003704:	4a13      	ldr	r2, [pc, #76]	; (8003754 <__sinit+0x6c>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	62a2      	str	r2, [r4, #40]	; 0x28
 800370a:	42a3      	cmp	r3, r4
 800370c:	bf04      	itt	eq
 800370e:	2301      	moveq	r3, #1
 8003710:	61a3      	streq	r3, [r4, #24]
 8003712:	4620      	mov	r0, r4
 8003714:	f000 f820 	bl	8003758 <__sfp>
 8003718:	6060      	str	r0, [r4, #4]
 800371a:	4620      	mov	r0, r4
 800371c:	f000 f81c 	bl	8003758 <__sfp>
 8003720:	60a0      	str	r0, [r4, #8]
 8003722:	4620      	mov	r0, r4
 8003724:	f000 f818 	bl	8003758 <__sfp>
 8003728:	2200      	movs	r2, #0
 800372a:	60e0      	str	r0, [r4, #12]
 800372c:	2104      	movs	r1, #4
 800372e:	6860      	ldr	r0, [r4, #4]
 8003730:	f7ff ff82 	bl	8003638 <std>
 8003734:	68a0      	ldr	r0, [r4, #8]
 8003736:	2201      	movs	r2, #1
 8003738:	2109      	movs	r1, #9
 800373a:	f7ff ff7d 	bl	8003638 <std>
 800373e:	68e0      	ldr	r0, [r4, #12]
 8003740:	2202      	movs	r2, #2
 8003742:	2112      	movs	r1, #18
 8003744:	f7ff ff78 	bl	8003638 <std>
 8003748:	2301      	movs	r3, #1
 800374a:	61a3      	str	r3, [r4, #24]
 800374c:	e7d2      	b.n	80036f4 <__sinit+0xc>
 800374e:	bf00      	nop
 8003750:	08003c7c 	.word	0x08003c7c
 8003754:	08003681 	.word	0x08003681

08003758 <__sfp>:
 8003758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800375a:	4607      	mov	r7, r0
 800375c:	f7ff ffac 	bl	80036b8 <__sfp_lock_acquire>
 8003760:	4b1e      	ldr	r3, [pc, #120]	; (80037dc <__sfp+0x84>)
 8003762:	681e      	ldr	r6, [r3, #0]
 8003764:	69b3      	ldr	r3, [r6, #24]
 8003766:	b913      	cbnz	r3, 800376e <__sfp+0x16>
 8003768:	4630      	mov	r0, r6
 800376a:	f7ff ffbd 	bl	80036e8 <__sinit>
 800376e:	3648      	adds	r6, #72	; 0x48
 8003770:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003774:	3b01      	subs	r3, #1
 8003776:	d503      	bpl.n	8003780 <__sfp+0x28>
 8003778:	6833      	ldr	r3, [r6, #0]
 800377a:	b30b      	cbz	r3, 80037c0 <__sfp+0x68>
 800377c:	6836      	ldr	r6, [r6, #0]
 800377e:	e7f7      	b.n	8003770 <__sfp+0x18>
 8003780:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003784:	b9d5      	cbnz	r5, 80037bc <__sfp+0x64>
 8003786:	4b16      	ldr	r3, [pc, #88]	; (80037e0 <__sfp+0x88>)
 8003788:	60e3      	str	r3, [r4, #12]
 800378a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800378e:	6665      	str	r5, [r4, #100]	; 0x64
 8003790:	f000 f847 	bl	8003822 <__retarget_lock_init_recursive>
 8003794:	f7ff ff96 	bl	80036c4 <__sfp_lock_release>
 8003798:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800379c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80037a0:	6025      	str	r5, [r4, #0]
 80037a2:	61a5      	str	r5, [r4, #24]
 80037a4:	2208      	movs	r2, #8
 80037a6:	4629      	mov	r1, r5
 80037a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80037ac:	f7ff fd44 	bl	8003238 <memset>
 80037b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80037b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80037b8:	4620      	mov	r0, r4
 80037ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037bc:	3468      	adds	r4, #104	; 0x68
 80037be:	e7d9      	b.n	8003774 <__sfp+0x1c>
 80037c0:	2104      	movs	r1, #4
 80037c2:	4638      	mov	r0, r7
 80037c4:	f7ff ff62 	bl	800368c <__sfmoreglue>
 80037c8:	4604      	mov	r4, r0
 80037ca:	6030      	str	r0, [r6, #0]
 80037cc:	2800      	cmp	r0, #0
 80037ce:	d1d5      	bne.n	800377c <__sfp+0x24>
 80037d0:	f7ff ff78 	bl	80036c4 <__sfp_lock_release>
 80037d4:	230c      	movs	r3, #12
 80037d6:	603b      	str	r3, [r7, #0]
 80037d8:	e7ee      	b.n	80037b8 <__sfp+0x60>
 80037da:	bf00      	nop
 80037dc:	08003c7c 	.word	0x08003c7c
 80037e0:	ffff0001 	.word	0xffff0001

080037e4 <_fwalk_reent>:
 80037e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037e8:	4606      	mov	r6, r0
 80037ea:	4688      	mov	r8, r1
 80037ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80037f0:	2700      	movs	r7, #0
 80037f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80037f6:	f1b9 0901 	subs.w	r9, r9, #1
 80037fa:	d505      	bpl.n	8003808 <_fwalk_reent+0x24>
 80037fc:	6824      	ldr	r4, [r4, #0]
 80037fe:	2c00      	cmp	r4, #0
 8003800:	d1f7      	bne.n	80037f2 <_fwalk_reent+0xe>
 8003802:	4638      	mov	r0, r7
 8003804:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003808:	89ab      	ldrh	r3, [r5, #12]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d907      	bls.n	800381e <_fwalk_reent+0x3a>
 800380e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003812:	3301      	adds	r3, #1
 8003814:	d003      	beq.n	800381e <_fwalk_reent+0x3a>
 8003816:	4629      	mov	r1, r5
 8003818:	4630      	mov	r0, r6
 800381a:	47c0      	blx	r8
 800381c:	4307      	orrs	r7, r0
 800381e:	3568      	adds	r5, #104	; 0x68
 8003820:	e7e9      	b.n	80037f6 <_fwalk_reent+0x12>

08003822 <__retarget_lock_init_recursive>:
 8003822:	4770      	bx	lr

08003824 <__retarget_lock_acquire_recursive>:
 8003824:	4770      	bx	lr

08003826 <__retarget_lock_release_recursive>:
 8003826:	4770      	bx	lr

08003828 <__swhatbuf_r>:
 8003828:	b570      	push	{r4, r5, r6, lr}
 800382a:	460e      	mov	r6, r1
 800382c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003830:	2900      	cmp	r1, #0
 8003832:	b096      	sub	sp, #88	; 0x58
 8003834:	4614      	mov	r4, r2
 8003836:	461d      	mov	r5, r3
 8003838:	da08      	bge.n	800384c <__swhatbuf_r+0x24>
 800383a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	602a      	str	r2, [r5, #0]
 8003842:	061a      	lsls	r2, r3, #24
 8003844:	d410      	bmi.n	8003868 <__swhatbuf_r+0x40>
 8003846:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800384a:	e00e      	b.n	800386a <__swhatbuf_r+0x42>
 800384c:	466a      	mov	r2, sp
 800384e:	f000 f9a7 	bl	8003ba0 <_fstat_r>
 8003852:	2800      	cmp	r0, #0
 8003854:	dbf1      	blt.n	800383a <__swhatbuf_r+0x12>
 8003856:	9a01      	ldr	r2, [sp, #4]
 8003858:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800385c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003860:	425a      	negs	r2, r3
 8003862:	415a      	adcs	r2, r3
 8003864:	602a      	str	r2, [r5, #0]
 8003866:	e7ee      	b.n	8003846 <__swhatbuf_r+0x1e>
 8003868:	2340      	movs	r3, #64	; 0x40
 800386a:	2000      	movs	r0, #0
 800386c:	6023      	str	r3, [r4, #0]
 800386e:	b016      	add	sp, #88	; 0x58
 8003870:	bd70      	pop	{r4, r5, r6, pc}
	...

08003874 <__smakebuf_r>:
 8003874:	898b      	ldrh	r3, [r1, #12]
 8003876:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003878:	079d      	lsls	r5, r3, #30
 800387a:	4606      	mov	r6, r0
 800387c:	460c      	mov	r4, r1
 800387e:	d507      	bpl.n	8003890 <__smakebuf_r+0x1c>
 8003880:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003884:	6023      	str	r3, [r4, #0]
 8003886:	6123      	str	r3, [r4, #16]
 8003888:	2301      	movs	r3, #1
 800388a:	6163      	str	r3, [r4, #20]
 800388c:	b002      	add	sp, #8
 800388e:	bd70      	pop	{r4, r5, r6, pc}
 8003890:	ab01      	add	r3, sp, #4
 8003892:	466a      	mov	r2, sp
 8003894:	f7ff ffc8 	bl	8003828 <__swhatbuf_r>
 8003898:	9900      	ldr	r1, [sp, #0]
 800389a:	4605      	mov	r5, r0
 800389c:	4630      	mov	r0, r6
 800389e:	f000 f895 	bl	80039cc <_malloc_r>
 80038a2:	b948      	cbnz	r0, 80038b8 <__smakebuf_r+0x44>
 80038a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038a8:	059a      	lsls	r2, r3, #22
 80038aa:	d4ef      	bmi.n	800388c <__smakebuf_r+0x18>
 80038ac:	f023 0303 	bic.w	r3, r3, #3
 80038b0:	f043 0302 	orr.w	r3, r3, #2
 80038b4:	81a3      	strh	r3, [r4, #12]
 80038b6:	e7e3      	b.n	8003880 <__smakebuf_r+0xc>
 80038b8:	4b0d      	ldr	r3, [pc, #52]	; (80038f0 <__smakebuf_r+0x7c>)
 80038ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80038bc:	89a3      	ldrh	r3, [r4, #12]
 80038be:	6020      	str	r0, [r4, #0]
 80038c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038c4:	81a3      	strh	r3, [r4, #12]
 80038c6:	9b00      	ldr	r3, [sp, #0]
 80038c8:	6163      	str	r3, [r4, #20]
 80038ca:	9b01      	ldr	r3, [sp, #4]
 80038cc:	6120      	str	r0, [r4, #16]
 80038ce:	b15b      	cbz	r3, 80038e8 <__smakebuf_r+0x74>
 80038d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80038d4:	4630      	mov	r0, r6
 80038d6:	f000 f975 	bl	8003bc4 <_isatty_r>
 80038da:	b128      	cbz	r0, 80038e8 <__smakebuf_r+0x74>
 80038dc:	89a3      	ldrh	r3, [r4, #12]
 80038de:	f023 0303 	bic.w	r3, r3, #3
 80038e2:	f043 0301 	orr.w	r3, r3, #1
 80038e6:	81a3      	strh	r3, [r4, #12]
 80038e8:	89a0      	ldrh	r0, [r4, #12]
 80038ea:	4305      	orrs	r5, r0
 80038ec:	81a5      	strh	r5, [r4, #12]
 80038ee:	e7cd      	b.n	800388c <__smakebuf_r+0x18>
 80038f0:	08003681 	.word	0x08003681

080038f4 <_free_r>:
 80038f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80038f6:	2900      	cmp	r1, #0
 80038f8:	d044      	beq.n	8003984 <_free_r+0x90>
 80038fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038fe:	9001      	str	r0, [sp, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	f1a1 0404 	sub.w	r4, r1, #4
 8003906:	bfb8      	it	lt
 8003908:	18e4      	addlt	r4, r4, r3
 800390a:	f000 f97d 	bl	8003c08 <__malloc_lock>
 800390e:	4a1e      	ldr	r2, [pc, #120]	; (8003988 <_free_r+0x94>)
 8003910:	9801      	ldr	r0, [sp, #4]
 8003912:	6813      	ldr	r3, [r2, #0]
 8003914:	b933      	cbnz	r3, 8003924 <_free_r+0x30>
 8003916:	6063      	str	r3, [r4, #4]
 8003918:	6014      	str	r4, [r2, #0]
 800391a:	b003      	add	sp, #12
 800391c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003920:	f000 b978 	b.w	8003c14 <__malloc_unlock>
 8003924:	42a3      	cmp	r3, r4
 8003926:	d908      	bls.n	800393a <_free_r+0x46>
 8003928:	6825      	ldr	r5, [r4, #0]
 800392a:	1961      	adds	r1, r4, r5
 800392c:	428b      	cmp	r3, r1
 800392e:	bf01      	itttt	eq
 8003930:	6819      	ldreq	r1, [r3, #0]
 8003932:	685b      	ldreq	r3, [r3, #4]
 8003934:	1949      	addeq	r1, r1, r5
 8003936:	6021      	streq	r1, [r4, #0]
 8003938:	e7ed      	b.n	8003916 <_free_r+0x22>
 800393a:	461a      	mov	r2, r3
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	b10b      	cbz	r3, 8003944 <_free_r+0x50>
 8003940:	42a3      	cmp	r3, r4
 8003942:	d9fa      	bls.n	800393a <_free_r+0x46>
 8003944:	6811      	ldr	r1, [r2, #0]
 8003946:	1855      	adds	r5, r2, r1
 8003948:	42a5      	cmp	r5, r4
 800394a:	d10b      	bne.n	8003964 <_free_r+0x70>
 800394c:	6824      	ldr	r4, [r4, #0]
 800394e:	4421      	add	r1, r4
 8003950:	1854      	adds	r4, r2, r1
 8003952:	42a3      	cmp	r3, r4
 8003954:	6011      	str	r1, [r2, #0]
 8003956:	d1e0      	bne.n	800391a <_free_r+0x26>
 8003958:	681c      	ldr	r4, [r3, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	6053      	str	r3, [r2, #4]
 800395e:	4421      	add	r1, r4
 8003960:	6011      	str	r1, [r2, #0]
 8003962:	e7da      	b.n	800391a <_free_r+0x26>
 8003964:	d902      	bls.n	800396c <_free_r+0x78>
 8003966:	230c      	movs	r3, #12
 8003968:	6003      	str	r3, [r0, #0]
 800396a:	e7d6      	b.n	800391a <_free_r+0x26>
 800396c:	6825      	ldr	r5, [r4, #0]
 800396e:	1961      	adds	r1, r4, r5
 8003970:	428b      	cmp	r3, r1
 8003972:	bf04      	itt	eq
 8003974:	6819      	ldreq	r1, [r3, #0]
 8003976:	685b      	ldreq	r3, [r3, #4]
 8003978:	6063      	str	r3, [r4, #4]
 800397a:	bf04      	itt	eq
 800397c:	1949      	addeq	r1, r1, r5
 800397e:	6021      	streq	r1, [r4, #0]
 8003980:	6054      	str	r4, [r2, #4]
 8003982:	e7ca      	b.n	800391a <_free_r+0x26>
 8003984:	b003      	add	sp, #12
 8003986:	bd30      	pop	{r4, r5, pc}
 8003988:	20000154 	.word	0x20000154

0800398c <sbrk_aligned>:
 800398c:	b570      	push	{r4, r5, r6, lr}
 800398e:	4e0e      	ldr	r6, [pc, #56]	; (80039c8 <sbrk_aligned+0x3c>)
 8003990:	460c      	mov	r4, r1
 8003992:	6831      	ldr	r1, [r6, #0]
 8003994:	4605      	mov	r5, r0
 8003996:	b911      	cbnz	r1, 800399e <sbrk_aligned+0x12>
 8003998:	f000 f88c 	bl	8003ab4 <_sbrk_r>
 800399c:	6030      	str	r0, [r6, #0]
 800399e:	4621      	mov	r1, r4
 80039a0:	4628      	mov	r0, r5
 80039a2:	f000 f887 	bl	8003ab4 <_sbrk_r>
 80039a6:	1c43      	adds	r3, r0, #1
 80039a8:	d00a      	beq.n	80039c0 <sbrk_aligned+0x34>
 80039aa:	1cc4      	adds	r4, r0, #3
 80039ac:	f024 0403 	bic.w	r4, r4, #3
 80039b0:	42a0      	cmp	r0, r4
 80039b2:	d007      	beq.n	80039c4 <sbrk_aligned+0x38>
 80039b4:	1a21      	subs	r1, r4, r0
 80039b6:	4628      	mov	r0, r5
 80039b8:	f000 f87c 	bl	8003ab4 <_sbrk_r>
 80039bc:	3001      	adds	r0, #1
 80039be:	d101      	bne.n	80039c4 <sbrk_aligned+0x38>
 80039c0:	f04f 34ff 	mov.w	r4, #4294967295
 80039c4:	4620      	mov	r0, r4
 80039c6:	bd70      	pop	{r4, r5, r6, pc}
 80039c8:	20000158 	.word	0x20000158

080039cc <_malloc_r>:
 80039cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039d0:	1ccd      	adds	r5, r1, #3
 80039d2:	f025 0503 	bic.w	r5, r5, #3
 80039d6:	3508      	adds	r5, #8
 80039d8:	2d0c      	cmp	r5, #12
 80039da:	bf38      	it	cc
 80039dc:	250c      	movcc	r5, #12
 80039de:	2d00      	cmp	r5, #0
 80039e0:	4607      	mov	r7, r0
 80039e2:	db01      	blt.n	80039e8 <_malloc_r+0x1c>
 80039e4:	42a9      	cmp	r1, r5
 80039e6:	d905      	bls.n	80039f4 <_malloc_r+0x28>
 80039e8:	230c      	movs	r3, #12
 80039ea:	603b      	str	r3, [r7, #0]
 80039ec:	2600      	movs	r6, #0
 80039ee:	4630      	mov	r0, r6
 80039f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039f4:	4e2e      	ldr	r6, [pc, #184]	; (8003ab0 <_malloc_r+0xe4>)
 80039f6:	f000 f907 	bl	8003c08 <__malloc_lock>
 80039fa:	6833      	ldr	r3, [r6, #0]
 80039fc:	461c      	mov	r4, r3
 80039fe:	bb34      	cbnz	r4, 8003a4e <_malloc_r+0x82>
 8003a00:	4629      	mov	r1, r5
 8003a02:	4638      	mov	r0, r7
 8003a04:	f7ff ffc2 	bl	800398c <sbrk_aligned>
 8003a08:	1c43      	adds	r3, r0, #1
 8003a0a:	4604      	mov	r4, r0
 8003a0c:	d14d      	bne.n	8003aaa <_malloc_r+0xde>
 8003a0e:	6834      	ldr	r4, [r6, #0]
 8003a10:	4626      	mov	r6, r4
 8003a12:	2e00      	cmp	r6, #0
 8003a14:	d140      	bne.n	8003a98 <_malloc_r+0xcc>
 8003a16:	6823      	ldr	r3, [r4, #0]
 8003a18:	4631      	mov	r1, r6
 8003a1a:	4638      	mov	r0, r7
 8003a1c:	eb04 0803 	add.w	r8, r4, r3
 8003a20:	f000 f848 	bl	8003ab4 <_sbrk_r>
 8003a24:	4580      	cmp	r8, r0
 8003a26:	d13a      	bne.n	8003a9e <_malloc_r+0xd2>
 8003a28:	6821      	ldr	r1, [r4, #0]
 8003a2a:	3503      	adds	r5, #3
 8003a2c:	1a6d      	subs	r5, r5, r1
 8003a2e:	f025 0503 	bic.w	r5, r5, #3
 8003a32:	3508      	adds	r5, #8
 8003a34:	2d0c      	cmp	r5, #12
 8003a36:	bf38      	it	cc
 8003a38:	250c      	movcc	r5, #12
 8003a3a:	4629      	mov	r1, r5
 8003a3c:	4638      	mov	r0, r7
 8003a3e:	f7ff ffa5 	bl	800398c <sbrk_aligned>
 8003a42:	3001      	adds	r0, #1
 8003a44:	d02b      	beq.n	8003a9e <_malloc_r+0xd2>
 8003a46:	6823      	ldr	r3, [r4, #0]
 8003a48:	442b      	add	r3, r5
 8003a4a:	6023      	str	r3, [r4, #0]
 8003a4c:	e00e      	b.n	8003a6c <_malloc_r+0xa0>
 8003a4e:	6822      	ldr	r2, [r4, #0]
 8003a50:	1b52      	subs	r2, r2, r5
 8003a52:	d41e      	bmi.n	8003a92 <_malloc_r+0xc6>
 8003a54:	2a0b      	cmp	r2, #11
 8003a56:	d916      	bls.n	8003a86 <_malloc_r+0xba>
 8003a58:	1961      	adds	r1, r4, r5
 8003a5a:	42a3      	cmp	r3, r4
 8003a5c:	6025      	str	r5, [r4, #0]
 8003a5e:	bf18      	it	ne
 8003a60:	6059      	strne	r1, [r3, #4]
 8003a62:	6863      	ldr	r3, [r4, #4]
 8003a64:	bf08      	it	eq
 8003a66:	6031      	streq	r1, [r6, #0]
 8003a68:	5162      	str	r2, [r4, r5]
 8003a6a:	604b      	str	r3, [r1, #4]
 8003a6c:	4638      	mov	r0, r7
 8003a6e:	f104 060b 	add.w	r6, r4, #11
 8003a72:	f000 f8cf 	bl	8003c14 <__malloc_unlock>
 8003a76:	f026 0607 	bic.w	r6, r6, #7
 8003a7a:	1d23      	adds	r3, r4, #4
 8003a7c:	1af2      	subs	r2, r6, r3
 8003a7e:	d0b6      	beq.n	80039ee <_malloc_r+0x22>
 8003a80:	1b9b      	subs	r3, r3, r6
 8003a82:	50a3      	str	r3, [r4, r2]
 8003a84:	e7b3      	b.n	80039ee <_malloc_r+0x22>
 8003a86:	6862      	ldr	r2, [r4, #4]
 8003a88:	42a3      	cmp	r3, r4
 8003a8a:	bf0c      	ite	eq
 8003a8c:	6032      	streq	r2, [r6, #0]
 8003a8e:	605a      	strne	r2, [r3, #4]
 8003a90:	e7ec      	b.n	8003a6c <_malloc_r+0xa0>
 8003a92:	4623      	mov	r3, r4
 8003a94:	6864      	ldr	r4, [r4, #4]
 8003a96:	e7b2      	b.n	80039fe <_malloc_r+0x32>
 8003a98:	4634      	mov	r4, r6
 8003a9a:	6876      	ldr	r6, [r6, #4]
 8003a9c:	e7b9      	b.n	8003a12 <_malloc_r+0x46>
 8003a9e:	230c      	movs	r3, #12
 8003aa0:	603b      	str	r3, [r7, #0]
 8003aa2:	4638      	mov	r0, r7
 8003aa4:	f000 f8b6 	bl	8003c14 <__malloc_unlock>
 8003aa8:	e7a1      	b.n	80039ee <_malloc_r+0x22>
 8003aaa:	6025      	str	r5, [r4, #0]
 8003aac:	e7de      	b.n	8003a6c <_malloc_r+0xa0>
 8003aae:	bf00      	nop
 8003ab0:	20000154 	.word	0x20000154

08003ab4 <_sbrk_r>:
 8003ab4:	b538      	push	{r3, r4, r5, lr}
 8003ab6:	4d06      	ldr	r5, [pc, #24]	; (8003ad0 <_sbrk_r+0x1c>)
 8003ab8:	2300      	movs	r3, #0
 8003aba:	4604      	mov	r4, r0
 8003abc:	4608      	mov	r0, r1
 8003abe:	602b      	str	r3, [r5, #0]
 8003ac0:	f7fd fcf4 	bl	80014ac <_sbrk>
 8003ac4:	1c43      	adds	r3, r0, #1
 8003ac6:	d102      	bne.n	8003ace <_sbrk_r+0x1a>
 8003ac8:	682b      	ldr	r3, [r5, #0]
 8003aca:	b103      	cbz	r3, 8003ace <_sbrk_r+0x1a>
 8003acc:	6023      	str	r3, [r4, #0]
 8003ace:	bd38      	pop	{r3, r4, r5, pc}
 8003ad0:	2000015c 	.word	0x2000015c

08003ad4 <__sread>:
 8003ad4:	b510      	push	{r4, lr}
 8003ad6:	460c      	mov	r4, r1
 8003ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003adc:	f000 f8a0 	bl	8003c20 <_read_r>
 8003ae0:	2800      	cmp	r0, #0
 8003ae2:	bfab      	itete	ge
 8003ae4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003ae6:	89a3      	ldrhlt	r3, [r4, #12]
 8003ae8:	181b      	addge	r3, r3, r0
 8003aea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003aee:	bfac      	ite	ge
 8003af0:	6563      	strge	r3, [r4, #84]	; 0x54
 8003af2:	81a3      	strhlt	r3, [r4, #12]
 8003af4:	bd10      	pop	{r4, pc}

08003af6 <__swrite>:
 8003af6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003afa:	461f      	mov	r7, r3
 8003afc:	898b      	ldrh	r3, [r1, #12]
 8003afe:	05db      	lsls	r3, r3, #23
 8003b00:	4605      	mov	r5, r0
 8003b02:	460c      	mov	r4, r1
 8003b04:	4616      	mov	r6, r2
 8003b06:	d505      	bpl.n	8003b14 <__swrite+0x1e>
 8003b08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f000 f868 	bl	8003be4 <_lseek_r>
 8003b14:	89a3      	ldrh	r3, [r4, #12]
 8003b16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b1e:	81a3      	strh	r3, [r4, #12]
 8003b20:	4632      	mov	r2, r6
 8003b22:	463b      	mov	r3, r7
 8003b24:	4628      	mov	r0, r5
 8003b26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b2a:	f000 b817 	b.w	8003b5c <_write_r>

08003b2e <__sseek>:
 8003b2e:	b510      	push	{r4, lr}
 8003b30:	460c      	mov	r4, r1
 8003b32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b36:	f000 f855 	bl	8003be4 <_lseek_r>
 8003b3a:	1c43      	adds	r3, r0, #1
 8003b3c:	89a3      	ldrh	r3, [r4, #12]
 8003b3e:	bf15      	itete	ne
 8003b40:	6560      	strne	r0, [r4, #84]	; 0x54
 8003b42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003b46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003b4a:	81a3      	strheq	r3, [r4, #12]
 8003b4c:	bf18      	it	ne
 8003b4e:	81a3      	strhne	r3, [r4, #12]
 8003b50:	bd10      	pop	{r4, pc}

08003b52 <__sclose>:
 8003b52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b56:	f000 b813 	b.w	8003b80 <_close_r>
	...

08003b5c <_write_r>:
 8003b5c:	b538      	push	{r3, r4, r5, lr}
 8003b5e:	4d07      	ldr	r5, [pc, #28]	; (8003b7c <_write_r+0x20>)
 8003b60:	4604      	mov	r4, r0
 8003b62:	4608      	mov	r0, r1
 8003b64:	4611      	mov	r1, r2
 8003b66:	2200      	movs	r2, #0
 8003b68:	602a      	str	r2, [r5, #0]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	f7fc fd04 	bl	8000578 <_write>
 8003b70:	1c43      	adds	r3, r0, #1
 8003b72:	d102      	bne.n	8003b7a <_write_r+0x1e>
 8003b74:	682b      	ldr	r3, [r5, #0]
 8003b76:	b103      	cbz	r3, 8003b7a <_write_r+0x1e>
 8003b78:	6023      	str	r3, [r4, #0]
 8003b7a:	bd38      	pop	{r3, r4, r5, pc}
 8003b7c:	2000015c 	.word	0x2000015c

08003b80 <_close_r>:
 8003b80:	b538      	push	{r3, r4, r5, lr}
 8003b82:	4d06      	ldr	r5, [pc, #24]	; (8003b9c <_close_r+0x1c>)
 8003b84:	2300      	movs	r3, #0
 8003b86:	4604      	mov	r4, r0
 8003b88:	4608      	mov	r0, r1
 8003b8a:	602b      	str	r3, [r5, #0]
 8003b8c:	f7fd fc59 	bl	8001442 <_close>
 8003b90:	1c43      	adds	r3, r0, #1
 8003b92:	d102      	bne.n	8003b9a <_close_r+0x1a>
 8003b94:	682b      	ldr	r3, [r5, #0]
 8003b96:	b103      	cbz	r3, 8003b9a <_close_r+0x1a>
 8003b98:	6023      	str	r3, [r4, #0]
 8003b9a:	bd38      	pop	{r3, r4, r5, pc}
 8003b9c:	2000015c 	.word	0x2000015c

08003ba0 <_fstat_r>:
 8003ba0:	b538      	push	{r3, r4, r5, lr}
 8003ba2:	4d07      	ldr	r5, [pc, #28]	; (8003bc0 <_fstat_r+0x20>)
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	4604      	mov	r4, r0
 8003ba8:	4608      	mov	r0, r1
 8003baa:	4611      	mov	r1, r2
 8003bac:	602b      	str	r3, [r5, #0]
 8003bae:	f7fd fc54 	bl	800145a <_fstat>
 8003bb2:	1c43      	adds	r3, r0, #1
 8003bb4:	d102      	bne.n	8003bbc <_fstat_r+0x1c>
 8003bb6:	682b      	ldr	r3, [r5, #0]
 8003bb8:	b103      	cbz	r3, 8003bbc <_fstat_r+0x1c>
 8003bba:	6023      	str	r3, [r4, #0]
 8003bbc:	bd38      	pop	{r3, r4, r5, pc}
 8003bbe:	bf00      	nop
 8003bc0:	2000015c 	.word	0x2000015c

08003bc4 <_isatty_r>:
 8003bc4:	b538      	push	{r3, r4, r5, lr}
 8003bc6:	4d06      	ldr	r5, [pc, #24]	; (8003be0 <_isatty_r+0x1c>)
 8003bc8:	2300      	movs	r3, #0
 8003bca:	4604      	mov	r4, r0
 8003bcc:	4608      	mov	r0, r1
 8003bce:	602b      	str	r3, [r5, #0]
 8003bd0:	f7fd fc53 	bl	800147a <_isatty>
 8003bd4:	1c43      	adds	r3, r0, #1
 8003bd6:	d102      	bne.n	8003bde <_isatty_r+0x1a>
 8003bd8:	682b      	ldr	r3, [r5, #0]
 8003bda:	b103      	cbz	r3, 8003bde <_isatty_r+0x1a>
 8003bdc:	6023      	str	r3, [r4, #0]
 8003bde:	bd38      	pop	{r3, r4, r5, pc}
 8003be0:	2000015c 	.word	0x2000015c

08003be4 <_lseek_r>:
 8003be4:	b538      	push	{r3, r4, r5, lr}
 8003be6:	4d07      	ldr	r5, [pc, #28]	; (8003c04 <_lseek_r+0x20>)
 8003be8:	4604      	mov	r4, r0
 8003bea:	4608      	mov	r0, r1
 8003bec:	4611      	mov	r1, r2
 8003bee:	2200      	movs	r2, #0
 8003bf0:	602a      	str	r2, [r5, #0]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	f7fd fc4c 	bl	8001490 <_lseek>
 8003bf8:	1c43      	adds	r3, r0, #1
 8003bfa:	d102      	bne.n	8003c02 <_lseek_r+0x1e>
 8003bfc:	682b      	ldr	r3, [r5, #0]
 8003bfe:	b103      	cbz	r3, 8003c02 <_lseek_r+0x1e>
 8003c00:	6023      	str	r3, [r4, #0]
 8003c02:	bd38      	pop	{r3, r4, r5, pc}
 8003c04:	2000015c 	.word	0x2000015c

08003c08 <__malloc_lock>:
 8003c08:	4801      	ldr	r0, [pc, #4]	; (8003c10 <__malloc_lock+0x8>)
 8003c0a:	f7ff be0b 	b.w	8003824 <__retarget_lock_acquire_recursive>
 8003c0e:	bf00      	nop
 8003c10:	20000150 	.word	0x20000150

08003c14 <__malloc_unlock>:
 8003c14:	4801      	ldr	r0, [pc, #4]	; (8003c1c <__malloc_unlock+0x8>)
 8003c16:	f7ff be06 	b.w	8003826 <__retarget_lock_release_recursive>
 8003c1a:	bf00      	nop
 8003c1c:	20000150 	.word	0x20000150

08003c20 <_read_r>:
 8003c20:	b538      	push	{r3, r4, r5, lr}
 8003c22:	4d07      	ldr	r5, [pc, #28]	; (8003c40 <_read_r+0x20>)
 8003c24:	4604      	mov	r4, r0
 8003c26:	4608      	mov	r0, r1
 8003c28:	4611      	mov	r1, r2
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	602a      	str	r2, [r5, #0]
 8003c2e:	461a      	mov	r2, r3
 8003c30:	f7fd fbea 	bl	8001408 <_read>
 8003c34:	1c43      	adds	r3, r0, #1
 8003c36:	d102      	bne.n	8003c3e <_read_r+0x1e>
 8003c38:	682b      	ldr	r3, [r5, #0]
 8003c3a:	b103      	cbz	r3, 8003c3e <_read_r+0x1e>
 8003c3c:	6023      	str	r3, [r4, #0]
 8003c3e:	bd38      	pop	{r3, r4, r5, pc}
 8003c40:	2000015c 	.word	0x2000015c

08003c44 <_init>:
 8003c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c46:	bf00      	nop
 8003c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c4a:	bc08      	pop	{r3}
 8003c4c:	469e      	mov	lr, r3
 8003c4e:	4770      	bx	lr

08003c50 <_fini>:
 8003c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c52:	bf00      	nop
 8003c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c56:	bc08      	pop	{r3}
 8003c58:	469e      	mov	lr, r3
 8003c5a:	4770      	bx	lr
